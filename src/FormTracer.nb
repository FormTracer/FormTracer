Notebook[{

Cell[CellGroupData[{
Cell["FormTracer", \
"Title",ExpressionUUID->"f833df8f-2a17-49ad-9796-7f8ed8ca022e"],

Cell[CellGroupData[{

Cell["License", \
"Section",ExpressionUUID->"f6372645-efbe-460d-a317-2cb5e0668c28"],

Cell[BoxData[
 RowBox[{"(*", 
  "\"\<\nCopyright (C) 2013-2018, Anton K. Cyrol, Mario Mitter, Jan M. \
Pawlowski and Nils Strodthoff.\nThis program is free software: you can \
redistribute it and/or modify\nit under the terms of the GNU General Public \
License as published by\nthe Free Software Foundation, either version 3 of \
the License, or\n(at your option) any later version.\n\nThis program is \
distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; \
without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\n\
You should have received a copy of the GNU General Public License\nalong with \
this program.  If not, see <http://www.gnu.org/licenses/>.\n\>\"", 
  "*)"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"554f307c-f214-4de0-ae92-e3e054ed43ff"]
}, Closed]],

Cell[CellGroupData[{

Cell["Begin and Declarations", \
"Section",ExpressionUUID->"00fd03bb-d364-4736-ac34-b3f19574da92"],

Cell[CellGroupData[{

Cell["Declarations and Documentation", \
"Subsection",ExpressionUUID->"8afa1008-abb2-463a-8e57-b828007edd6b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BeginPackage", "[", "\"\<FormTracer`\>\"", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Unprotect", "@@", 
   RowBox[{"Names", "[", "\"\<FormTracer`*\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "@@", 
   RowBox[{"Names", "[", "\"\<FormTracer`*\>\"", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"0e7e11a7-7757-4941-b4c5-35cb7ca549f8"],

Cell["Public functions:", \
"Text",ExpressionUUID->"13ad8e46-7e79-4909-986f-a7f2efcd1415"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"$FormTracerVersionNumber", "::", "usage"}], "=", 
    "\"\<FormTracer version.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTracer", "::", "usage"}], "=", 
    "\"\<A Mathematica Tracing Package Using FORM\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTracer", "::", "incompatiblemathematicaversion"}], "=", 
    "\"\<The FormTracer requires Mathematica 10.0 or higher. Please update \
your Mathematica version.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTracer", "::", "formtracerdirectorynotfound"}], "=", 
    "\"\<The FormTracer could not locate the FormTracer folder in your \
Applications folder. This is required for group traces.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineLorentzTensors", "::", "usage"}], "=", 
    "\"\<DefineLorentzTensors[lorentzDelta_,vector_,scalarProduct_,epsilon_:\
Null,diracDelta_:Null,gamma_:Null,gamma5_:Null,vectorspatial_:Null,\
scalarProductspatial_:Null] defines Lorentz and Dirac tensors. For each of \
the entries one can either pass a symbol (e.g. gamma[mu,i,j]) or a list with \
a symbol and the corresponding indices (e.g. \
{gamma[i,mu,j,anotherArg],mu,i,j}) if they do not follow the default order \
used in the documentation.\n\nExample call:\n\
DefineLorentzTensors[deltaLorentz[mu,nu],vec[p,mu],sp[p,q],eps[],deltaDirac[i,\
j],gamma[mu,i,j],gamma5[i,j]]\n\nFinite temperature example call:\n\
DefineLorentzTensors[deltaLorentz[mu,nu],vec[p,mu],sp[p,q],eps[],deltaDirac[i,\
j],gamma[mu,i,j],gamma5[i,j],vecs[p,mu],sps[p,q]]\n\nDefineLorentzTensors \
clears all Lorentz tensor identities and all combined Lorentz tensors. They \
have to be declared after the syntax is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineLorentzTensors", "::", "badarg"}], "=", 
    "\"\<Wrong syntax. Type ?DefineLorentzTensors for help!\\nPlease check \
the arguments and their order.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearLorentzTensorIdentities", "::", "usage"}], "=", 
    "\"\<ClearLorentzTensorIdentities[] clears all Lorentz tensors \
identities.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddLorentzTensorIdentity", "::", "usage"}], "=", 
    "\"\<AddLorentzTensorIdentity[identity_List] can be given a Lorentz \
tensor identities for speedup.\n\nBrief syntax format:\nidentity = { left \
hand side, right hand side }\n\nExample call (requires example call from \
DefineCombinedLorentzTensors):\n\
AddLorentzTensorIdentity[{transProj[p,mu,rho]transProj[p,rho,nu],transProj[p,\
mu,nu]}]\n\nAll (combined) Lorentz tensors appearing in the identity must be \
known to the FormTracer before the identity is specified.\nOtherwise you may \
use the long syntax format:\nidentity = { list of momenta, list of Lorentz \
indices, left hand side, right hand side }\n\nBasic syntax must be specified \
using DefineLorentzTensors before Lorentz tensor identities can be \
added.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddLorentzTensorIdentity", "::", "closedindices"}], "=", 
    "\"\<Dummy indices in Lorentz tensors identities are not \
supported.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddLorentzTensorIdentity", "::", "diracindices"}], "=", 
    "\"\<Only Lorentz, no Dirac indices are supported in Lorentz tensors \
identities.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineLorentzTensorIdentities", "::", "usage"}], "=", 
    "\"\<DefineLorentzTensorIdentities[identities_List] can be given a list \
of tensor identities for speedup, see AddLorentzTensorIdentity. Clears all \
previously defined Lorentz tensor identities.\n\nExample call (requires \
example call from DefineCombinedLorentzTensors):\n\
DefineLorentzTensorIdentities[{\n\
{transProj[p,mu,rho]transProj[p,rho,nu],transProj[p,mu,nu]},\n\
{longProj[p,mu,rho]longProj[p,rho,nu],longProj[p,mu,nu]},\n\
{transProj[p,mu,rho]longProj[p,rho,nu],0}\n}]\n\nBasic syntax must be \
specified with DefineLorentzTensors before Lorentz tensor identities can be \
defined.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearCombinedLorentzTensors", "::", "usage"}], "=", 
    "\"\<ClearCombinedLorentzTensors[] clears all combined Lorentz tensors.\>\
\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCombinedLorentzTensor", "::", "usage"}], "=", 
    "\"\<AddCombinedLorentzTensor[combinedTensor_List] can be used to add a \
combined Lorentz tensor. The combined/explicit tensors must not contain dummy \
indices. \nCombined Lorentz tensors must be of the form combinedTensor = { \
combined tensor, explicit tensor }.\n\nExample call:\n\
AddCombinedLorentzTensor[{transProj[p,mu,nu],deltaLorentz[mu,nu]-vec[p,mu]vec[\
p,nu]/sp[p,p]}]\n\nBy default, the FormTacer considers all momenta of the \
explicit tensor as part of the abbreviated combined tensor. If this is not \
the case, i.e., if you have a momentum that does not appear as argument in \
the combined tensor, you must use the long form:\ncombinedTensor = { list of \
momenta, list of Lorentz indices, combined tensor, explicit tensor }\n\n\
Example call:\nAddCombinedLorentzTensor[{ {p}, {mu}, myP[p, mu], \
vec[p,mu]/sp[q,q] }]\n\nBasic syntax must be specified with \
DefineLorentzTensors before combined Lorentz tensors can be added.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCombinedLorentzTensor", "::", "badarg"}], "=", 
    "\"\<Invalid combined tensor supplied. Type ?AddCombinedLorentzTensor for \
help!\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCombinedLorentzTensor", "::", "closedindices"}], "=", 
    "\"\<Dummy indices in combined Lorentz tensors are not supported.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCombinedLorentzTensor", "::", "diracindices"}], "=", 
    "\"\<Only Lorentz, no Dirac indices are supported in combined Lorentz \
tensors.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCombinedLorentzTensor", "::", "duplicate"}], "=", 
    "\"\<Duplicate combined Lorentz tensor definition detected.\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCombinedLorentzTensor", "::", "momentumsums"}], "=", 
    "\"\<Sums of momenta in function arguments are not supported.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineCombinedLorentzTensors", "::", "usage"}], "=", 
    "\"\<DefineCombinedLorentzTensors[combinedTensors_List] accepts a list of \
combined Lorentz tensors, see AddCombinedLorentzTensor. Clears all previously \
defined combined Lorentz tensors and Lorentz tensor identities.\n\nExample \
call:\nDefineCombinedLorentzTensors[{\n\
{transProj[p,mu,nu],deltaLorentz[mu,nu]-vec[p,mu]vec[p,nu]/sp[p,p]},\n\
{longProj[p,mu,nu],vec[p,mu]vec[p,nu]/sp[p,p]}\n}]\n\nBasic syntax must be \
specified with DefineLorentzTensors before combined Lorentz tensors can be \
defined.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineGroupTensors", "::", "usage"}], "=", 
    "\"\<DefineGroupTensors[listOfGroups_List] defines the groups. The \
argument has to be of the form\nlistOfGroups={\n\
{groupTemplate1,groupName1,deltaAdj1,structureF1,deltaFund1,generatorT1,\
epsilonAdj1,epsilonFund1}},\n\
{groupTemplate2,groupName2,deltaAdj2,structureF2,deltaFund2,generatorT2,\
epsilonAdj1,epsilonFund1},\n... more groups ...\n}\n\nIf you prefer your own \
names or numerical values instead of the default names for group dimensions \
and casimirs, you can also use \n\
group={groupTemplate,{groupName1,NR,cR,NA,cA,I2R},deltaAdj1,structureF1,\
deltaFund1,generatorT1}.\nIn case you specify something like\n\
{groupTemplate,{groupName1,myNR,mycR},deltaAdj1,structureF1,deltaFund1,\
generatorT},\n{NA,cA,I2R} will get the default names.\n\nExample call:\n\
DefineGroupTensors[{\n\
{SUNfund,{color,3},deltaAdjCol[a,b],structureConstantCol[a,b,c],deltaFundCol[\
i,j],generatorCol[a,i,j]},\n\
{SUNfund,{flavor,Nf},deltaAdj[a,b],structureConstant[a,b,c],deltaFund[i,j],\
generator[a,i,j]},\n\
{GenericGroup,testing,generalAdjDelta[a,b],generalStructureConstant[a,b,c],\
generalDeltaFund[i,j],generalGenerator[a,i,j]}\n}]\n\nEvaluate \
ShowGroupTemplates[] to show available group templates.\nEvaluate \
ShowGroupConstants[] to check your settings.\n\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GenericGroup", "::", "usage"}], "=", 
    "\"\<GenericGroup represents a generic simple compact Lie group which is \
traced with the generic color trace (to supplied as group template argument \
in DefineGroupTensors).\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SUNfund", "::", "usage"}], "=", 
    "\"\<SUNfund represents the fundamental SU(N) group (to supplied as group \
template argument in DefineGroupTensors).\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SONfund", "::", "usage"}], "=", 
    "\"\<SONfund represents the fundamental SO(N) group (to supplied as group \
template argument in DefineGroupTensors).\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SPNfund", "::", "usage"}], "=", 
    "\"\<SPNfund represents the fundamental Sp(N) group (to supplied as group \
template argument in DefineGroupTensors).\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SU2fundexplicit", "::", "usage"}], "=", 
    "\"\<SU2fundexplicit represents the fundamental SU(2) group which is \
traced with the explicit SU(2) tracing algorithm that supports explicit \
numerical indices, partial traces and transposed generators (to supplied as \
group template argument in DefineGroupTensors).\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SU3fundexplicit", "::", "usage"}], "=", 
    "\"\<SU3fundexplicit represents the fundamental SU(3) group which is \
traced with the explicit SU(3) tracing algorithm that supports explicit \
numerical indices, partial traces and transposed generators (to supplied as \
group template argument in DefineGroupTensors).\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineGroupTensors", "::", "badarg"}], "=", 
    "\"\<Wrong syntax. Type ?DefineGroupTensors for help!\\nPlease check the \
arguments and their order.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineGroupTensors", "::", "templatemissing"}], "=", 
    "\"\<The group you want to specify is not known to the FormTracer. Use \
ShowGroupTemplates[] to see which groups are available.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineGroupTensors", "::", "duplicategroupnames"}], "=", 
    "\"\<Duplicate group names encountered. Please use unique group \
names!\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearGroupTensors", "::", "usage"}], "=", 
    "\"\<ClearGroupTensors[] clears all groups.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowGroupTemplates", "::", "usage"}], "=", 
    "\"\<ShowGroupTemplates[] shows group templates that can be used in \
DefineGroupTensors.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowGroupConstants", "::", "usage"}], "=", 
    "\"\<ShowGroupConstants[] shows currently defined group constants.\>\""}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowGroupConstants", "::", "nogroups"}], "=", 
    "\"\<No groups were defined. Use DefineGroupTensors to define \
them.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "usage"}], "=", 
    "\"\<FormTrace[expr] takes the traces of the expression and returns it to \
Mathematica (or exports it as optimized C code).\n\nThe full form of \
FormTrace is given by:\n\
FormTrace[expr_,prerepl_List:{},postrepl_List:{},filename_String:\\\"\\\",\
bracket_List:{},exportResVar_String:\\\"expr\\\",exportTmpVar_String:\\\"w\\\"\
,exportVarType_String:\\\"double\\\"]\n\nexpr: can be either a single \
expression or a list of expressions that are added up after all traces have \
been taken \nprerepl: allows to specify lists of FORM replacement rules that \
are carried out prior to all contractions\n\t(use multiply replace_ where \
possible,use argument blocks for id inside subexpressions);\n\talso accepts \
list entries of the form {group,repl} and {LorentzFormRule,repl} where repl \
is only applied to the particular group/Lorentz objects;\n\t\
{PreambleFormFule,repl} allows to insert user-specific FORM code (like \
functions and declarations) in the preamble of the FORM file.\npostrepl: \
allows to specify lists of FORM replacement rules that are carried out after \
the contractions (same syntax as for prerepl)\nfilename: if a filename is \
specified, the result will be exported to the file as optimized c code. \
Filename can also be a list {filename[, optimization[, format]]}.\nbracket: \
if the expression is exported to C, the result can be bracketed according to \
the bracketing list\nexportResVar: allows you to specify the name of the c \
variable which contains the result\nexportTmpVar: is the name of the \
temporary c variable which is used for the evaluation\nexportTmpVarType: is \
the type of exportResVar and exportTmpVar\n\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "badarg"}], "=", 
    "\"\<FormTrace was called with invalid arguments. Aborting. Type \
?FormTrace for help!\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "formfailed"}], "=", 
    "\"\<An unknow error occured in the FORM script.\\nCheck whether there \
are undeclared variables and if so add them via AddExtraVars or \
DefineExtraVars.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "formnotfound"}], "=", 
    "\"\<FormTracer could not find FORM. Please specify a valid FORM \
executable with DefineFormExecutable[path].\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "specialchar"}], "=", 
    "\"\<You have declared extra variables with special characters. This is \
not (and cannot) be supported if optimized ouput shall be generated.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "specialcharmomentum"}], "=", 
    "\"\<You have declared momentum variables with special characters. This \
is not (and cannot) be supported if optimized ouput shall be \
generated.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "openindices"}], "=", 
    "\"\<There are open indices:  `1` \nTracing was aborted. Close all \
indices! If you do want to calculate partial traces, you can enable this \
feature by evaluating PartialTrace[True].\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "openindicesexport"}], "=", 
    "\"\<There are open indices:  `1`\nTracing was aborted. Close all \
indices! Exporting is and can only be supported for scalars.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "formeexitcode"}], "=", 
    "\"\<FORM exited with error code `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "formerror"}], "=", 
    "\"\<FORM encountered an error:\\n`1`\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "nobracketing"}], "=", 
    "\"\<Bracketing can only be used if output is saved to file.\\nPlease \
perform the bracketing in Mathematica yourself.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"LorentzFormRule", "::", "usage"}], "=", 
    "\"\<LorentzFormRule specifies that a replacement rule is only applied to \
Lorentz terms (passed as first list argument in FormTrace's prereplrule or \
postreplrule).\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PreambleFormRule", "::", "usage"}], "=", 
    "\"\<PreambleFormRules specifies user-specific FORM code that is inserted \
in the preamble of the generated FORM file (passed as first list argument in \
FormTrace's prereplrule).\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "invalidprerepl"}], "=", 
    "\"\<Invalid pre-replacement rules discovered.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FormTrace", "::", "invalidpostrepl"}], "=", 
    "\"\<Invalid post replacement rules discovered.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetIndices", "::", "usage"}], "=", 
    "\"\<GetIndices[expr] returns a list with all indices in expr.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetLorentzIndices", "::", "usage"}], "=", 
    "\"\<GetLorentzIndices[expr] returns a list with all Lorentz indices in \
expr.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetDiracIndices", "::", "usage"}], "=", 
    "\"\<GetDiracIndices[expr] returns a list with all Dirac indices in expr.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetOpenIndices", "::", "usage"}], "=", 
    "\"\<GetOpenIndices[expr] returns a list with all open indices in expr.\>\
\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetOpenLorentzIndices", "::", "usage"}], "=", 
    "\"\<GetOpenLorentzIndices[expr] returns a list with all open Lorentz \
indices in expr.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetOpenDiracIndices", "::", "usage"}], "=", 
    "\"\<GetOpenDiracIndices[expr] returns a list with all open Dirac indices \
in expr.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetClosedIndices", "::", "usage"}], "=", 
    "\"\<GetClosedIndices[expr] returns a list with all closed indices in \
expr.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetClosedLorentzIndices", "::", "usage"}], "=", 
    "\"\<GetClosedLorentzIndices[expr] returns a list with all closed Lorentz \
indices in expr.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetClosedDiracIndices", "::", "usage"}], "=", 
    "\"\<GetClosedDiracIndices[expr] returns a list with all closed Dirac \
indices in expr.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetFundGroupIndices", "::", "usage"}], "=", 
    "\"\<GetFundGroupIndices[expr,group] returns a list with all fundamental \
indices of group group in expr.\\nThe group argument can be omitted if only \
one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetAdjGroupIndices", "::", "usage"}], "=", 
    "\"\<GetAdjGroupIndices[expr,group] returns a list with all adjoint \
indices of group group in expr.\\nThe group argument can be omitted if only \
one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetOpenFundGroupIndices", "::", "usage"}], "=", 
    "\"\<GetOpenFundGroupIndices[expr,group] returns a list with all open \
fundamental indices of group group in expr.\\nThe group argument can be \
omitted if only one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetOpenAdjGroupIndices", "::", "usage"}], "=", 
    "\"\<GetOpenAdjGroupIndices[expr,group] returns a list with all open \
adjoint indices of group group in expr.\\nThe group argument can be omitted \
if only one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetClosedFundGroupIndices", "::", "usage"}], "=", 
    "\"\<GetClosedFundGroupIndices[expr,group] returns a list with all closed \
fundamental indices of group group in expr.\\nThe group argument can be \
omitted if only one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetClosedAdjGroupIndices", "::", "usage"}], "=", 
    "\"\<GetClosedAdjGroupIndices[expr,group] returns a list with all closed \
adjoint indices of group group in expr.\\nThe group argument can be omitted \
if only one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckLorentzTensorSums", "::", "usage"}], "=", 
    "\"\<CheckLorentzTensorSums[expr] checks whether only Lorentz tensors of \
the same rank are summed.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckDiracTensorSums", "::", "usage"}], "=", 
    "\"\<CheckDiracTensorSums[expr] checks whether only Dirac tensors of the \
same rank are summed.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckFundGroupTensorSums", "::", "usage"}], "=", 
    "\"\<CheckFundGroupTensorSums[expr,group] checks whether only fundamental \
group tensors of the same rank are summed.\\nThe group argument can be \
omitted if only one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckAdjGroupTensorSums", "::", "usage"}], "=", 
    "\"\<CheckAdjGroupTensorSums[expr,group] checks whether only adjoint \
group tensors of the same rank are summed.\\nThe group argument can be \
omitted if only one group is specified.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckTensorSums", "::", "usage"}], "=", 
    "\"\<CheckTensorSums[expr] checks all tensor sums in expr for \
consistency.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckTensorSums", "::", "invalidsum"}], "=", 
    "\"\<Invalid sum of tensors encountered: `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"generateDimensionReplRules", "::", "invalidvars"}], "=", 
    "\"\<The following variables cannot be used as group (or Lorentz) \
dimensions: `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"General", "::", "grouparg"}], "=", 
    "\"\<Please specify the group by providing a second argument with the \
group name.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"General", "::", "missingnotation"}], "=", 
    "\"\<You must specify your notation.\\nType ?DefineLorentzTensors or \
?DefineGroupTensors for help!\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineFormExecutable", "::", "usage"}], "=", 
    "\"\<DefineFormExecutable[path] sets the path the FormTracer looks for \
the FORM executable.\n\nYou can also use tform (a parallel version of FORM) \
by evaluating \\\"DefineFormExecutable[tform -wN]\\\", where you have to \
replace N with the number of worker threads you want to use. Note that the \
tracing part cannot be efficiently handled by tform and thus tform is usually \
slower than form. However, if you make heavy use of the FORM optimization \
routines (meaning, e.g., optimization with O3), tform can be much faster \
since the optimization is well parallelizable.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineFormExecutable", "::", "badarg"}], "=", 
    "\"\<DefineFormExecutable was called with an invalid argument. Argument \
must be a string.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineFormExecutable", "::", "formnotfound"}], "=", 
    "\"\<The specified FORM executable could not be found.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineFormExecutable", "::", "cygwin"}], "=", 
    "\"\<FORM exited with error code -1073741515. This hints at a problem \
with your Cygwin installation.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DebuggingMode", "::", "usage"}], "=", 
    "\"\<DebuggingMode[True/False] prints extra information if set to true.\>\
\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DebuggingMode", "::", "badarg"}], "=", 
    "\"\<DebuggingMode was called with an invalid argument. Argument must be \
True or False.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DisentangleLorentzStructures", "::", "usage"}], "=", 
    "\"\<DisentangleLorentzStructures[True/False] if set to true, the Lorentz \
structures are disentangled.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DisentangleLorentzStructures", "::", "badarg"}], "=", 
    "\"\<DisentangleLorentzStructures was called with an invalid argument. \
Argument must be True or False.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FiniteT", "::", "usage"}], "=", 
    "\"\<FiniteT[True/False] if set to True, finite T is enabled.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FiniteT", "::", "badarg"}], "=", 
    "\"\<FiniteT was called with an invalid argument. Argument must be True \
or False.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FastGamma5Trace", "::", "usage"}], "=", 
    "\"\<FastGamma5Trace[True/False] determines whether the faster algorithm \
from arXiv:1506.04517 [hep-ph] is used instead of the Larin scheme to \
evaluate Dirac traces with a single gamma5 matrix in d!=4 dimensions.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FastGamma5Trace", "::", "badarg"}], "=", 
    "\"\<FastGamma5Trace was called with an invalid argument. Argument must \
be True or False.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineFormAutoDeclareFunctions", "::", "usage"}], "=", 
    "\"\<DefineAutoDeclareFunctions[cfuntions] can be used to define \
CFunctions that are autodeclared in FORM.\nDefineAutoDeclareFunctions clears \
all previously defined autodeclare functions. Note that cfuntions must not \
contain substrings of standard Mathematica symbols that have to be translated \
into FORM code (e.g. (complex) I, Pi, Sqrt). \n\nExample call:\n\
DefineFormAutoDeclareFunctions[myFunctionPrefix,myOtherPrefix]\nlets you use \
any symbol or function that starts with myFunctionPrefix or myOtherPrefix.\n\n\
You must not use special characters in this function. It is recommended to \
use DefineExtraVars/AddExtraVars unless you have many function/symbols \
starting with that prefix.\nYou cannot autodeclare the symbols (f, T, cA, cR, \
NA, NR, and I2R) that are used by the FORM color package internally.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineExtraVars", "::", "usage"}], "=", 
    "\"\<DefineExtraVars[vars] defines extra variables that might appear in \
your expressions. Clears all previously defined extra variables.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddExtraVars", "::", "usage"}], "=", 
    "\"\<AddExtraVars[vars] adds an extra variable.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetExtraVars", "::", "usage"}], "=", 
    "\"\<GetExtraVars[] returns a list with all extra variables.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetExtraVarsSynonyms", "::", "usage"}], "=", 
    "\"\<GetExtraVarsSynonyms[] returns a list with all extra variables and \
their respective FORM synonyms (that changes whenever new extra variables are \
declared).\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearExtraVars", "::", "usage"}], "=", 
    "\"\<ClearExtraVars[] clears all extra variable.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MeasureEvaluationTime", "::", "usage"}], "=", 
    "\"\<MeasureEvaluationTime[arg,message_String:\\\"\\\"] measures the \
absolute time arg needs to evaluate and prints the time in the format \
message<>time in seconds. The return value is the return value of arg.\>\""}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PartialTrace", "::", "usage"}], "=", 
    "\"\<PartialTrace[True/False] enables/disables partial traces.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PartialTrace", "::", "badarg"}], "=", 
    "\"\<PartialTrace was called with an invalid argument. Argument must be \
True or False.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AlwaysCheckTensorSums", "::", "usage"}], "=", 
    "\"\<AlwaysCheckTensorSums[True/False] enables/disables consistency \
checks.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AlwaysCheckTensorSums", "::", "badarg"}], "=", 
    "\"\<AlwaysCheckTensorSums was called with an invalid argument. Argument \
must be True or False.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineLorentzDimensions", "::", "usage"}], "=", 
    "\"\<DefineLorentzDimensions[dim] sets the space dimension to dim.\n\
DefineLorentzDimensions[dim, dimDirac]: sets the space and Dirac dimensions \
to dim and dimDirac, respectively.\nThe default dimensions are 4 for both \
dimensions.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ConvertInput", "::", "usage"}], "=", 
    "\"\<ConvertInput[expr_] converts input into FormTracer syntax.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ExpandLorentzStructures", "::", "usage"}], "=", 
    "\"\<ExpandLorentzStructures[expr_] dismantles Lorentz and Dirac tensors.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ExpandLorentzStructures", "::", "failedconsistencycheck"}], "=", 
    "\"\<An internal check revealed that you either entered an ill-defined \
expression or lorentzTensorProductToSortedLists has a serious bug! Please use \
DisentangleLorentzStructures[False].\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ExpandTerms", "::", "usage"}], "=", 
    "\"\<ExpandTerms[expr_] dismantles an expression into the specified \
tensor classes.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ImportFormResult", "::", "usage"}], "=", 
    "\"\<ImportFormResult[filename_:String,deleteImportedFile_:False] imports \
a FORM result.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ImportFormResult", "::", "noformoutput"}], "=", 
    "\"\<An unknown FORM error occured!\\nNo FORM output was \
generated.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GenerateFormFile", "::", "usage"}], "=", 
    "\"\<GenerateFormFile[expr_,formFileName_String,resFileName_String,\
optimization_String:\\\"\\\",format_String:\\\"mathematica\\\",prerepl_List:{}\
,postrepl_List:{},bracket_List:{},exportResVar_String:\\\"expr\\\",\
exportTmpVar_String:\\\"w\\\",exportVarType_String:\\\"double\\\"] generates \
the form file and returns variable lists for Mathematica replacements.\>\""}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GenerateFormFile", "::", "duplicateindicesnames"}], "=", 
    "\"\<Duplicate index names detected.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getLatestVersionNumbers", "::", "pacletinfonotfound"}], "=", 
    "\"\<Paclet info could not be found at `1`. Ensure that you have a \
working network connection.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckForFormTracerUpdates", "::", "usage"}], "=", 
    "\"\<CheckForFormTracerUpdates[] searches online for FormTracer updates.\n\
CheckForFormTracerUpdates[quiet] with quiet=True suppresses warnings if \
paclet info is not found.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowFormTracerChangeLog", "::", "usage"}], "=", 
    "\"\<ShowFormTracerChangeLog[numberOfItems_Integer:15] shows the last \
numberOfItems entries in the changelog.\nIf an internet connection exists, it \
shows the latest changelog available. Otherwise it shows the local \
one.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowFormTracerChangeLog", "::", "changelognotfound"}], "=", 
    "\"\<Changelog could not be found (neither online nor local \
version).\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InstallFORM", "::", "usage"}], "=", 
    "\"\<InstallFORM[] downloads the FORM executables for your operating \
system from http://www.github.com/vermaseren/form/releases and copies them \
into the FormTracer directory in Mathematica's application folder.\>\""}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InstallFORM41", "::", "usage"}], "=", 
    "\"\<InstallFORM41[] downloads the old FORM executable for your operating \
system from http://www.nikhef.nl/~form/maindir/binaries/binaries.html and \
copies it into the FormTracer directory in Mathematica's application folder.\n\
\nThis function is deprecated since a newer version of FORM is available via \
InstallFORM[].\n\nHowever, use it if you are having trouble with the newer \
version.\>\""}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InstallFORM", "::", "downloadfailed"}], "=", 
    "\"\<The FormTracer failed to download the FORM executable from `1`. \
Ensure that you have a working network connection and writing permission to \
the FormTracer directory.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InstallFORM", "::", "exenotknown"}], "=", 
    "\"\<The FormTracer does not know where it can find FORM executables for \
your system architecture.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"General", "::", "allowinternetuse"}], "=", 
    "\"\<You have forbidden Mathematica to access the internet. This function \
requires internet access.\>\""}], ";"}], "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"InstallCygwin", "::", "usage"}], "=", 
     "\"\<InstallCygwin[] downloads and starts the Cygwin setup executable \
from https://www.cygwin.com/.\>\""}], ";", "\n", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InstallCygwin", "::", "nowindows"}], "=", 
     "\"\<Cygwin can and needs only be installed on Windows systems.\>\""}], 
    ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InstallCygwin", "::", "downloadfailed"}], "=", 
     "\"\<The FormTracer failed to Cygwin from `1`. Ensure that you have a \
working network connection.\>\""}], ";"}], "\[IndentingNewLine]", "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"UpdateFormTracer", "::", "usage"}], "=", 
   "\"\<UpdateFormTracer[] updates the FormTracer to the latest \
version.\>\""}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"2a06e167-2526-4e6e-a401-18c6def0aed7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"c9a3132f-ec71-45c8-9173-c7ebc0500ddb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"determine", " ", "the", " ", "FormTracer", " ", "directory"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"formTracerDirectory", "=", 
     RowBox[{"SelectFirst", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
           "$UserBaseDirectory", ",", "\"\<Applications\>\"", ",", 
            "\"\<FormTracer\>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
           "$BaseDirectory", ",", "\"\<Applications\>\"", ",", 
            "\"\<FormTracer\>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
           "$InstallationDirectory", ",", "\"\<AddOns\>\"", ",", 
            "\"\<Applications\>\"", ",", "\"\<FormTracer\>\""}], "}"}], "]"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
           "$InstallationDirectory", ",", "\"\<AddOns\>\"", ",", 
            "\"\<Packages\>\"", ",", "\"\<FormTracer\>\""}], "}"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
           "$InstallationDirectory", ",", "\"\<AddOns\>\"", ",", 
            "\"\<ExtraPackages\>\"", ",", "\"\<FormTracer\>\""}], "}"}], 
          "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
       RowBox[{
        RowBox[{"DirectoryQ", "[", "#", "]"}], "&"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"formTracerDirectory", "===", 
       RowBox[{"Missing", "[", "\"\<NotFound\>\"", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"FormTracer", "::", "formtracerdirectorynotfound"}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"formTracerDirectory", "=", 
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
          "$UserBaseDirectory", ",", "\"\<Applications\>\"", ",", 
           "\"\<FormTracer\>\""}], "}"}], "]"}]}]}]}], "\[IndentingNewLine]", 
     "]"}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"$FormTracerVersionNumber", "=", 
     RowBox[{"Quiet", "[", 
      RowBox[{"Check", "[", 
       RowBox[{
        RowBox[{"Version", "/.", 
         RowBox[{"List", "@@", 
          RowBox[{"Import", "[", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{"formTracerDirectory", ",", "\"\<PacletInfo.m\>\""}], 
             "}"}], "]"}], "]"}]}]}], ",", "\"\<0.0.0\>\""}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "$FormTracerMainVersion", ",", "$FormTracerVersion", ",", 
       "$FormTracerBuiltVersion"}], "}"}], "=", 
     RowBox[{"First", "@", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"$FormTracerVersionNumber", ",", 
        RowBox[{
         RowBox[{
         "mV__", "~~", "\"\<.\>\"", "~~", "v__", "~~", "\"\<.\>\"", "~~", 
          "bV__"}], "\[RuleDelayed]", 
         RowBox[{"ToExpression", "/@", 
          RowBox[{"{", 
           RowBox[{"mV", ",", "v", ",", "bV"}], "}"}]}]}]}], "]"}]}]}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{
     "\"\<\nFormTracer \>\"", "<>", "$FormTracerVersionNumber", "<>", 
      "\"\< loaded.\n\nCopyright (C) 2013-2018, Anton K. Cyrol, Mario Mitter, \
Jan M. Pawlowski, and Nils Strodthoff.\nFormTracer is released under the GNU \
General Public License version three or later.\n\nIf used in scientific \
publications, please acknowledge our work by citing:\nA. K. Cyrol, M. Mitter, \
and N. Strodthoff, Comput. Phys. Commun. 219C (2017) 346-352, \
arXiv:1610.09331 [hep-ph]\n\>\""}], "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"$VersionNumber", "<", "10"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"FormTracer", "::", "incompatiblemathematicaversion"}], "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
    ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"39e7612f-4015-4ada-b632-7121ed522f75"]
}, Closed]],

Cell[CellGroupData[{

Cell["Checking for Updates", \
"Subsection",ExpressionUUID->"69a2e34d-975d-4447-bade-733af37bd06c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "formTracerRepositoryAddress", "=", 
   "\"\<https://raw.githubusercontent.com/FormTracer/FormTracer/master/\>\""}]\
, ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"f8cf67a9-92b9-44f7-91f4-96c9a0af2056"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getLatestVersionNumbers", "[", "quiet_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newVersionString", ",", 
       RowBox[{"pacletInfoLocation", "=", 
        RowBox[{
        "formTracerRepositoryAddress", "<>", "\"\<src/PacletInfo.m\>\""}]}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"quiet", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newVersionString", "=", 
          RowBox[{"Quiet", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"Version", "/.", 
              RowBox[{"List", "@@", 
               RowBox[{"Import", "[", "pacletInfoLocation", "]"}]}]}], ",", 
             "\"\<\>\""}], "]"}], "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"newVersionString", "=", 
          RowBox[{"Quiet", "[", 
           RowBox[{
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"Version", "/.", 
               RowBox[{"List", "@@", 
                RowBox[{"Import", "[", "pacletInfoLocation", "]"}]}]}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{
                 "getLatestVersionNumbers", "::", "pacletinfonotfound"}], ",",
                  "formTracerRepositoryAddress"}], "]"}], ";", "\"\<\>\""}]}],
              "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Import", "::", "nffil"}], ",", 
              RowBox[{"ReplaceAll", "::", "reps"}], ",", 
              RowBox[{"FetchURL", "::", "httperr"}]}], "}"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"newVersionString", "===", "\"\<\>\""}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"First", "@", 
          RowBox[{"StringReplace", "[", 
           RowBox[{"newVersionString", ",", 
            RowBox[{
             RowBox[{
             "mainVersion__", "~~", "\"\<.\>\"", "~~", "version__", "~~", 
              "\"\<.\>\"", "~~", "builtVersion__"}], "\[RuleDelayed]", 
             RowBox[{"ToExpression", "/@", 
              RowBox[{"{", 
               RowBox[{"mainVersion", ",", "version", ",", "builtVersion"}], 
               "}"}]}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"ad2c13ba-2611-46b5-bd49-4aeae4fc99ca"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CheckForFormTracerUpdates", "[", 
    RowBox[{"quiet_", ":", "False"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newVersionNumbers", ",", "newVersionString"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"\"\<AllowInternetUse\>\"", " ", "/.", " ", 
          RowBox[{"SystemInformation", "[", "\"\<Network\>\"", "]"}]}], "]"}],
         ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", "quiet", "]"}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{"CheckForFormTracerUpdates", "::", "allowinternetuse"}], 
            "]"}]}], "]"}], ";", 
         RowBox[{"Return", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newVersionNumbers", "=", 
       RowBox[{"getLatestVersionNumbers", "[", "quiet", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newVersionString", "=", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{"ToString", "/@", "newVersionNumbers"}], ",", "\"\<.\>\""}],
          "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"newVersionNumbers", "=!=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"newVersionNumbers", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "+", 
             RowBox[{
              RowBox[{"newVersionNumbers", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "/", "10"}]}], ">", 
            RowBox[{"$FormTracerMainVersion", "+", 
             RowBox[{"$FormTracerVersion", "/", "10"}]}]}], ",", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<\nFormTracer version \>\"", "<>", "newVersionString", "<>", 
              "\"\< is available. You are currently using version \>\"", "<>",
               " ", "$FormTracerVersionNumber", "<>", 
              "\"\<.\nYou are strongly advised to update as the new version \
may contain bugfixes. You can do so by evaluating UpdateFormTracer[].\nPlease \
be aware that syntax changes may have occured. We recommend to read the \
changelog before updating. The latest\nchangelog is available from \
ShowFormTracerChangeLog[].\n\>\""}], "]"}], ";"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"newVersionNumbers", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", 
                RowBox[{
                 RowBox[{"newVersionNumbers", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", "10"}], "+", 
                RowBox[{
                 RowBox[{"newVersionNumbers", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "/", "100"}]}], ">", 
               RowBox[{"$FormTracerMainVersion", "+", 
                RowBox[{"$FormTracerVersion", "/", "10"}], "+", 
                RowBox[{"$FormTracerBuiltVersion", "/", "100"}]}]}], ",", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{
                "\"\<\nFormTracer version \>\"", "<>", "newVersionString", 
                 "<>", "\"\< is available. You are currently using version \>\
\"", "<>", " ", "$FormTracerVersionNumber", "<>", 
                 "\"\<.\nYou can update the FormTracer by evaluating \
UpdateFormTracer[]. The changelog is available from \
ShowFormTracerChangeLog[].\n\>\""}], "]"}], ";"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"Not", "[", "quiet", "]"}], ",", 
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{
                   "\"\<You are already using the latest version of the \
FormTracer, version \>\"", "<>", " ", "$FormTracerVersionNumber", "<>", 
                    "\"\<.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"38eb4292-2708-46b5-9137-c0f170f5b71d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"UpdateFormTracer", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "newVersionNumbers", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"\"\<AllowInternetUse\>\"", " ", "/.", " ", 
          RowBox[{"SystemInformation", "[", "\"\<Network\>\"", "]"}]}], "]"}],
         ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"UpdateFormTracer", "::", "allowinternetuse"}], "]"}], ";", 
         
         RowBox[{"Return", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newVersionNumbers", "=", 
       RowBox[{"getLatestVersionNumbers", "[", "False", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"newVersionNumbers", "=!=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"newVersionNumbers", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "+", 
             RowBox[{
              RowBox[{"newVersionNumbers", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "/", "10"}], "+", 
             RowBox[{
              RowBox[{"newVersionNumbers", "[", 
               RowBox[{"[", "3", "]"}], "]"}], "/", "100"}]}], ">", 
            RowBox[{"$FormTracerMainVersion", "+", 
             RowBox[{"$FormTracerVersion", "/", "10"}], "+", 
             RowBox[{"$FormTracerBuiltVersion", "/", "100"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{
             "formTracerRepositoryAddress", "<>", 
              "\"\<src/FormTracerInstaller.m\>\""}], "]"}], ";"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<You are already using the latest version of the FormTracer, \
version \>\"", "<>", " ", "$FormTracerVersionNumber", "<>", "\"\<.\>\""}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"234a1118-685d-43fe-840e-8a30860587c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowFormTracerChangeLog", "[", 
    RowBox[{"numberOfItems_Integer", ":", "15"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"changelog", ",", "changelogSplit"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "try", " ", "to", " ", "obtain", " ", "latest", " ", "changelog", " ", 
        "online"}], ",", " ", 
       RowBox[{
       "otherwise", " ", "show", " ", "the", " ", "local", " ", "one"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"changelog", "=", 
       RowBox[{"Quiet", "[", 
        RowBox[{"Check", "[", 
         RowBox[{
          RowBox[{"Import", "[", 
           RowBox[{
            RowBox[{
            "formTracerRepositoryAddress", "<>", "\"\<src/CHANGELOG\>\""}], 
            ",", "\"\<String\>\""}], "]"}], ",", 
          RowBox[{"Import", "[", 
           RowBox[{
            RowBox[{"FileNameJoin", "[", 
             RowBox[{"{", 
              RowBox[{"formTracerDirectory", ",", "\"\<CHANGELOG\>\""}], 
              "}"}], "]"}], ",", "\"\<String\>\""}], "]"}]}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"changelog", "===", "$Failed"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"ShowFormTracerChangeLog", "::", "changelognotfound"}], 
          "]"}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"changelogSplit", "=", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"changelog", ",", "\"\<\\n\\n\>\""}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"StringTrim", "[", 
           RowBox[{"StringJoin", "@", 
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"changelogSplit", ",", 
                RowBox[{"Min", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", "changelogSplit", "]"}], ",", 
                  RowBox[{"numberOfItems", "+", "1"}]}], "]"}]}], "]"}], ",", 
              "\"\<\\n\>\""}], "]"}]}], "]"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"72c61f8b-c5e0-4909-b141-6b6ff3c03714"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InstallFORM", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "archiveLocation", ",", "localArchiveLocation", ",", 
       "extractedArchiveLocation", ",", "fullArchiveName", ",", "archiveName",
        ",", "exeLocation"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"$OperatingSystem", "===", "\"\<Windows\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<\nInstalling FORM 4.1 since compiled executables of the \n\
newer version FORM 4.2 are not available for Windows.\n\>\"", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"InstallFORM41", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"\"\<AllowInternetUse\>\"", " ", "/.", " ", 
          RowBox[{"SystemInformation", "[", "\"\<Network\>\"", "]"}]}], "]"}],
         ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"InstallFORM", "::", "allowinternetuse"}], "]"}], ";", 
         RowBox[{"Return", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"archiveLocation", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "$OperatingSystem", ",", "\[IndentingNewLine]", "\"\<Unix\>\"", ",", 
         "\"\<https://github.com/vermaseren/form/releases/download/v4.2.0/\
form-4.2.0-x86_64-linux.tar.gz\>\"", ",", "\[IndentingNewLine]", 
         "\"\<MacOSX\>\"", ",", 
         "\"\<https://github.com/vermaseren/form/releases/download/v4.2.0/\
form-4.2.0-x86_64-osx.tar.gz\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "\"\<Windows\>\"", ",", 
           "\"\<http://www.nikhef.nl/~form/maindir/binaries/cygwin/form.exe\>\
\"", ","}], "*)"}], "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"InstallFORM", "::", "exenotknown"}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"fullArchiveName", "=", 
       RowBox[{"Last", "[", 
        RowBox[{"FileNameSplit", "[", "archiveLocation", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"archiveName", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{"fullArchiveName", ",", 
         RowBox[{"-", "7"}]}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"without", " ", ".", "tar", ".", "gz"}], " ", "ending"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"localArchiveLocation", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"$TemporaryDirectory", ",", "fullArchiveName"}], "}"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extractedArchiveLocation", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"formTracerDirectory", ",", "archiveName"}], "}"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"exeLocation", "=", 
       RowBox[{"First", "[", "defaultFormExecutables", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"download", " ", "archiv"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Quiet", "[", 
       RowBox[{
        RowBox[{"Check", "[", 
         RowBox[{
          RowBox[{"URLDownload", "[", 
           RowBox[{"archiveLocation", ",", "localArchiveLocation"}], "]"}], 
          ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"InstallFORM", "::", "downloadfailed"}], ",", 
            "exeLocation"}], "]"}]}], "]"}], ",", 
        RowBox[{"URLFetch", "::", "offline"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"extract", " ", "archiv"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"DirectoryQ", "[", "extractedArchiveLocation", "]"}], ",", 
        RowBox[{
         RowBox[{"DeleteDirectory", "[", 
          RowBox[{"extractedArchiveLocation", ",", 
           RowBox[{"DeleteContents", "\[Rule]", "True"}]}], "]"}], ";"}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExtractArchive", "[", 
       RowBox[{"localArchiveLocation", ",", "formTracerDirectory"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Quiet", "[", 
       RowBox[{"DeleteFile", "[", "localArchiveLocation", "]"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "copy", " ", "file", " ", "to", " ", "main", " ", "FormTracer", " ", 
        "folder"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FileExistsQ", "[", "exeLocation", "]"}], ",", 
        RowBox[{"DeleteFile", "[", "exeLocation", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"CopyFile", "[", 
       RowBox[{
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{"extractedArchiveLocation", ",", "\"\<form\>\""}], "}"}], 
         "]"}], ",", "exeLocation"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"mark", " ", "as", " ", "executable"}], ",", " ", 
        RowBox[{"just", " ", "in", " ", "case"}], ",", " ", 
        RowBox[{"should", " ", "not", " ", "be", " ", "necessary"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Quiet", "[", 
       RowBox[{"Run", "[", 
        RowBox[{"\"\<chmod +x \>\"", "<>", "exeLocation"}], "]"}], "]"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"$OperatingSystem", "===", "\"\<MacOSX\>\""}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<\nNote that you may need to install the GNU Multiple \n\
Precision Arithmetic Library (GMP), which you\nobtain from \
https://gmplib.org/\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"DefineFormExecutable", "[", "exeLocation", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"6bf2754f-3c59-4934-900c-e5c8b64e1cec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InstallFORM41", "[", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"exeLocation", ",", "cygwinDownloadSuccessfull", ",", 
        RowBox[{
        "cygwinDLL", "=", 
         "\"\<http://www.thphys.uni-heidelberg.de/~cyrol/downloads/cygwin1.\
dll\>\""}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{"\"\<AllowInternetUse\>\"", " ", "/.", " ", 
           RowBox[{"SystemInformation", "[", "\"\<Network\>\"", "]"}]}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"InstallFORM", "::", "allowinternetuse"}], "]"}], ";", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"exeLocation", "=", 
        RowBox[{
        "\"\<http://www.nikhef.nl/~form/maindir/binaries/\>\"", "<>", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "$OperatingSystem", ",", "\[IndentingNewLine]", "\"\<Unix\>\"", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"$ProcessorType", "===", "\"\<x86\>\""}], ",", 
             "\"\<linux32/form\>\"", ",", "\"\<linux64/form\>\""}], "]"}], 
           ",", "\[IndentingNewLine]", "\"\<MacOSX\>\"", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"$ProcessorType", "===", "\"\<x86\>\""}], ",", 
             "\"\<apple/form32\>\"", ",", "\"\<apple/form\>\""}], "]"}], ",", 
           "\[IndentingNewLine]", "\"\<Windows\>\"", ",", 
           "\"\<cygwin/form.exe\>\"", ",", "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{"InstallFORM", "::", "exenotknown"}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Quiet", "[", 
        RowBox[{
         RowBox[{"Check", "[", 
          RowBox[{
           RowBox[{"URLDownload", "[", 
            RowBox[{"exeLocation", ",", 
             RowBox[{"First", "[", "defaultFormExecutables", "]"}]}], "]"}], 
           ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"InstallFORM", "::", "downloadfailed"}], ",", 
             "exeLocation"}], "]"}]}], "]"}], ",", 
         RowBox[{"URLFetch", "::", "offline"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"$OperatingSystem", "===", "\"\<Windows\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "Windows", " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ChoiceDialog", "[", 
             RowBox[{
              RowBox[{
              "\"\<To run FORM under Windows, you need to install (the \n32 \
bit version of) Cygwin (see https://www.cygwin.com/).\n\nHowever, FormTracer \
can also download the DLL required by FORM from\n\>\"", "<>", "cygwinDLL", 
               "<>", "\"\<\n\nDo you want to download the DLL now?\>\""}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
              "WindowTitle", "\[Rule]", "\"\<Download cygwin1.dll?\>\""}], 
              ",", 
              RowBox[{"WindowSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"Medium", ",", "All"}], "}"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"cygwinDownloadSuccessfull", "=", "True"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"URLDownload", "[", 
                 RowBox[{"cygwinDLL", ",", 
                  RowBox[{"FileNameJoin", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "formTracerDirectory", ",", "\"\<cygwin1.dll\>\""}], 
                    "}"}], "]"}]}], "]"}], ";"}], ",", 
               RowBox[{
                RowBox[{"cygwinDownloadSuccessfull", "=", "False"}], ";"}]}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"cygwinDownloadSuccessfull", ",", 
               RowBox[{
                RowBox[{
                "Print", "[", 
                 "\"\<Cygwin1.dll was successfully downloaded.\>\"", "]"}], 
                ";"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Linux", " ", "and", " ", "MacOSX"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"\"\<chmod +x \>\"", "<>", 
            RowBox[{"First", "[", "defaultFormExecutables", "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"$OperatingSystem", "===", "\"\<MacOSX\>\""}], ",", 
            RowBox[{
             RowBox[{
             "Print", "[", 
              "\"\<\nNote that you may need to install the GNU Multiple \n\
Precision Arithmetic Library (GMP), which you\nobtain from \
https://gmplib.org/\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"DefineFormExecutable", "[", 
        RowBox[{"First", "[", "defaultFormExecutables", "]"}], "]"}], ";"}]}],
      "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"InstallCygwin", "[", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"setupExe", ",", "setupExeOnline", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "always", " ", "use", " ", "32", " ", "bit", " ", "executable", " ",
            "until", " ", "the", " ", "64", " ", "bit", " ", "version", " ", 
           "of", " ", 
           RowBox[{"form", ".", "exe"}], " ", "is", " ", "available"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"setupExeName", "=", "\"\<setup-x86.exe\>\""}]}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"$ProcessorType", "===", "\"\<x86\>\""}], ",", 
           "\"\<setup-x86.exe\>\"", ",", "\"\<setup-x86_64.exe\>\""}], "]"}], 
         "*)"}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"$OperatingSystem", "=!=", "\"\<Windows\>\""}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"InstallCygwin", "::", "nowindows"}], "]"}], ";", " ", 
           RowBox[{"Return", "[", "]"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"setupExeOnline", "=", 
         RowBox[{"\"\<https://cygwin.com/\>\"", "<>", "setupExeName"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"setupExe", "=", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{"$TemporaryDirectory", ",", "setupExeName"}], "}"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"download", " ", "executable"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Check", "[", 
           RowBox[{
            RowBox[{"FindFile", "@", 
             RowBox[{"URLDownload", "[", 
              RowBox[{"setupExeOnline", ",", "setupExe"}], "]"}]}], ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"InstallCygwin", "::", "downloadfailed"}], ",", 
              "setupExeOnline"}], "]"}]}], "]"}], ",", 
          RowBox[{"URLFetch", "::", "offline"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"grant", " ", "the", " ", "user", " ", "permission", " ", 
          RowBox[{"(", 
           RowBox[{
           "not", " ", "sure", " ", "wether", " ", "that", " ", "is", " ", 
            "necessary", " ", "but", " ", "it", " ", "cannot", " ", "harm"}], 
           ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{
           "\"\<CACLS \>\"", "<>", "setupExe", "<>", "\"\< /e /p \>\"", "<>", 
            "$UserName", "<>", "\"\<:f\>\""}], "]"}], ";"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"install", " ", "Cygwin"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Run", "[", "setupExe", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"delete", " ", "the", " ", "install", " ", "file"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{"DeleteFile", "[", "setupExe", "]"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "*)"}]}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"a6d39643-e5d4-4afb-8562-f5778ee2e59d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"check", " ", "for", " ", "updates", " ", "at", " ", "startup"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"\"\<AllowInternetUse\>\"", " ", "/.", " ", 
      RowBox[{"SystemInformation", "[", "\"\<Network\>\"", "]"}]}], ",", 
     RowBox[{
      RowBox[{"CheckForFormTracerUpdates", "[", "True", "]"}], ";"}]}], "]"}],
    ";"}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"a31c524f-7e4e-4f4f-81e7-81488eb580bb"]
}, Closed]],

Cell[CellGroupData[{

Cell["Options and Definitions", \
"Subsection",ExpressionUUID->"f1be7e0a-6378-411d-8e32-194442a37bcc"],

Cell[CellGroupData[{

Cell["Switches and Default Values ", \
"Subsubsection",ExpressionUUID->"d23c4efb-7e42-47a6-aa6d-c3791a8221c1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"defaultFormExecutables", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"formTracerDirectory", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"$OperatingSystem", "===", "\"\<Windows\>\""}], ",", 
          "\"\<form.exe\>\"", ",", "\"\<form\>\""}], "]"}]}], "}"}], "]"}], 
     RowBox[{"(*", 
      RowBox[{
      "has", " ", "to", " ", "be", " ", "the", " ", "first", " ", "entry", 
       " ", "due", " ", "to", " ", "InstallFORM"}], "*)"}], ",", 
     "\[IndentingNewLine]", "\"\<form\>\"", ",", 
     RowBox[{"(*", 
      RowBox[{
      "should", " ", "work", " ", "if", " ", "form", " ", "lies", " ", "in", 
       " ", "any", " ", "executable", " ", "path"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
       "$PathnameSeparator", ",", "\"\<usr\>\"", ",", "\"\<bin\>\"", ",", 
        "\"\<form\>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
       "$PathnameSeparator", ",", "\"\<usr\>\"", ",", "\"\<local\>\"", ",", 
        "\"\<bin\>\"", ",", "\"\<form\>\""}], "}"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
       "$PathnameSeparator", ",", "\"\<opt\>\"", ",", "\"\<bin\>\"", ",", 
        "\"\<form\>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{
        "$UserBaseDirectory", ",", "\"\<Applications\>\"", ",", 
         "\"\<FormLink\>\"", ",", "\"\<bin\>\"", ",", 
         RowBox[{"Switch", "[", 
          RowBox[{"$OperatingSystem", ",", "\"\<Unix\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<linux64\>\"", ",", "\"\<form\>\""}], "}"}], ",", 
           "\"\<MacOSX\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<macosx64\>\"", ",", "\"\<form\>\""}], "}"}], ",", 
           "\"\<Windows\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<windows\>\"", ",", "\"\<form.exe\>\""}], "}"}]}], 
          "]"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"formExecutable", "=", "\"\<\>\""}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"is", " ", "set", " ", "automatically", " ", "below"}], ",", " ", 
    
    RowBox[{"can", " ", "be", " ", "changed", " ", "by", " ", 
     RowBox[{"DefineFormExecutable", "[", "path", "]"}]}]}], "*)"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formChecked", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formInfo", "=", "\"\<\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"debuggingMode", "=", "False"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "disentangleLorentzStructures", " ", "can", " ", "be", " ", "False", " ",
       "despite", " ", "disentangleLorentzStructuresSwitch"}], "==", "True"}],
     ",", " ", 
    RowBox[{
     RowBox[{"if", " ", "partialtrace"}], "\[Equal]", "True"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"disentangleLorentzStructuresSwitch", "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "disentangleLorentzStructures", "=", "disentangleLorentzStructuresSwitch"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"finiteTenabled", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cacheFilesDirectory", "=", "\"\<FormTracerCache\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"partialtrace", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fastgamma5tracedneq4", "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"checkTensorSums", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lorentzDimensions", "=", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"cab5380c-5dfe-4e29-b300-7bf1dde517fa"]
}, Closed]],

Cell[CellGroupData[{

Cell["Getter and Setter Functions", \
"Subsubsection",ExpressionUUID->"c772f5c9-bcb1-4617-a8da-3dd6b69a7a4e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"checkFormExecutable", "[", 
     RowBox[{"quietMode_", ":", "False"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "formProcessResult", ",", "formResponse", ",", "formExitCode"}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Don", "'"}], "t", " ", "check", " ", "whether", " ", "FORM", 
        " ", "works", " ", "if", " ", "it", " ", "was", " ", "already", " ", 
        RowBox[{"checked", "."}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"formChecked", ",", 
         RowBox[{"Return", "[", "True", 
          RowBox[{"(*", 
           RowBox[{"=", "formChecked"}], "*)"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Check", " ", "if", " ", "FORM", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"formProcessResult", "=", 
        RowBox[{"Quiet", "[", 
         RowBox[{"RunProcess", "[", 
          RowBox[{"{", 
           RowBox[{"formExecutable", ",", "\"\<-v\>\""}], "}"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"formResponse", "=", 
        RowBox[{"formProcessResult", "[", "\"\<StandardOutput\>\"", "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"formExitCode", "=", 
        RowBox[{"formProcessResult", "[", "\"\<ExitCode\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"formChecked", "=", 
        RowBox[{"formExitCode", "===", "0"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"formChecked", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"formInfo", "=", 
           RowBox[{"StringTrim", "[", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"StringSplit", "[", 
                RowBox[{"formResponse", ",", "EndOfLine"}], "]"}], ",", 
               RowBox[{
                RowBox[{"Not", "@", 
                 RowBox[{"StringContainsQ", "[", 
                  RowBox[{"#", ",", "\"\<out of\>\""}], "]"}]}], "&"}]}], 
              "]"}], "]"}], "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"formInfo", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "[", "quietMode", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"DefineFormExecutable", "::", "formnotfound"}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"formExitCode", "===", 
                 RowBox[{"-", "1073741515"}]}], "&&", 
                RowBox[{"$OperatingSystem", "===", "\"\<Windows\>\""}]}], ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{"DefineFormExecutable", "::", "cygwin"}], "]"}], 
                ";"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "formChecked", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "try", " ", "to", " ", "find", " ", "the", " ", "FORM", " ", "executable", 
    " ", "trying", " ", "all", " ", "commands", " ", "in", " ", 
    "defaultFormExecutables"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Catch", "[", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"formExecutable", "=", "tmpFormExecutable"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"checkFormExecutable", "[", "True", "]"}], ",", 
            RowBox[{"Throw", "[", "$Success", "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"tmpFormExecutable", ",", "defaultFormExecutables"}], 
          "}"}]}], "]"}], "]"}], "===", "$Success"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Using \>\"", "<>", "formInfo", "<>", "\"\<.\>\""}], "]"}],
       ";"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", 
       "\"\<FormTracer could not locate the FORM executable. Please install \
FORM via InstallFORM[].\nIf FORM is installed on your system, use \
DefineFormExecutable[pathToExecutable] to specify the path. \nYou may also \
obtain FORM at http://www.nikhef.nl/~form or from \
https://github.com/vermaseren/form.\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineFormExecutable", "[", "path_String", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"formExecutable", "=", "path"}], ";", "\[IndentingNewLine]", 
      RowBox[{"formChecked", "=", "False"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"checkFormExecutable", "[", "]"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "formInfo", "]"}], ";"}]}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineFormExecutable", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"DefineFormExecutable", "::", "badarg"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DisentangleLorentzStructures", "[", 
    RowBox[{"yesno_", "/;", 
     RowBox[{"BooleanQ", "[", "yesno", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"disentangleLorentzStructuresSwitch", "=", "yesno"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"partialtrace", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"If", "[", 
           RowBox[{
           "disentangleLorentzStructuresSwitch", ",", 
            "\"\<Lorentz structures are disentangled once you have \
deactivated partial traces.\>\"", ",", 
            "\"\<Lorentz structures are not disentangled.\>\""}], "]"}], 
          "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "disentangleLorentzStructures", "=", 
          "disentangleLorentzStructuresSwitch"}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"Print", "[", 
          RowBox[{"If", "[", 
           RowBox[{
           "disentangleLorentzStructures", ",", 
            "\"\<Lorentz structures are disentangled.\>\"", ",", 
            "\"\<Lorentz structures are not disentangled.\>\""}], "]"}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DisentangleLorentzStructures", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"DisentangleLorentzStructures", "::", "badarg"}], "]"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FiniteT", "[", 
    RowBox[{"yesno_", "/;", 
     RowBox[{"BooleanQ", "[", "yesno", "]"}]}], "]"}], ":=", 
   RowBox[{"Print", "[", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"enableFiniteT", "[", "yesno", "]"}], ",", 
      "\"\<Finite T enabled.\>\"", ",", "\"\<Finite T disabled.\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FiniteT", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"FiniteT", "::", "badarg"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FastGamma5Trace", "[", 
    RowBox[{"yesno_", "/;", 
     RowBox[{"BooleanQ", "[", "yesno", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fastgamma5tracedneq4", "=", "yesno"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Fast gamma5 trace in d!=4 \>\"", "<>", 
        RowBox[{"If", "[", 
         RowBox[{
         "fastgamma5tracedneq4", ",", "\"\<enabled\>\"", ",", 
          "\"\<disabled\>\""}], "]"}], "<>", "\"\<.\>\""}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FastGamma5Trace", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"FastGamma5Trace", "::", "badarg"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DebuggingMode", "[", 
    RowBox[{"yesno_", "/;", 
     RowBox[{"BooleanQ", "[", "yesno", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"debuggingMode", "=", "yesno"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Debugging mode \>\"", "<>", 
        RowBox[{"If", "[", 
         RowBox[{
         "debuggingMode", ",", "\"\<enabled\>\"", ",", "\"\<disabled\>\""}], 
         "]"}], "<>", "\"\<.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DebuggingMode", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"DebuggingMode", "::", "badarg"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PartialTrace", "[", 
    RowBox[{"yesno_", "/;", 
     RowBox[{"BooleanQ", "[", "yesno", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"partialtrace", "=", "yesno"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"yesno", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"disentangleLorentzStructures", "=", "False"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
         "Print", "[", 
          "\"\<Partial traces enabled. Keep in mind that this leads to \
performance losses and does not allow for consistency checks.\>\"", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
           "disentangleLorentzStructures", "\[NotEqual]", 
            "disentangleLorentzStructuresSwitch"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "Print", "[", 
             "\"\<Lorentz structures are no longer disentangled (until you \
deactivate partial traces again).\>\"", "]"}], ";"}]}], "\[IndentingNewLine]",
           "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Partial traces disabled.\>\"", "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{
         "disentangleLorentzStructures", "=", 
          "disentangleLorentzStructuresSwitch"}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"If", "[", 
          RowBox[{"disentangleLorentzStructures", ",", 
           RowBox[{
            RowBox[{
            "Print", "[", "\"\<Lorentz structures are now disentangled.\>\"", 
             "]"}], ";"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PartialTrace", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"PartialTrace", "::", "badarg"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AlwaysCheckTensorSums", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"AlwaysCheckTensorSums", "::", "badarg"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AlwaysCheckTensorSums", "[", 
    RowBox[{"yesno_", "/;", 
     RowBox[{"BooleanQ", "[", "yesno", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"checkTensorSums", "=", "yesno"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"If", "[", 
        RowBox[{
        "checkTensorSums", ",", "\[IndentingNewLine]", 
         "\"\<Tensors sums are checked for consistency.\\nKeep in mind that \
this leads to performance losses.\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
          "debuggingMode", ",", 
           "\"\<Note that tensor sums are still being checked as long as the \
debugging mode is activated.\>\"", ",", "\[IndentingNewLine]", 
           "\"\<Tensors sums are not checked for consistency.\>\""}], "]"}]}],
         "\[IndentingNewLine]", "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AlwaysCheckTensorSums", "[", "___", "]"}], ":=", 
    RowBox[{"Message", "[", 
     RowBox[{"AlwaysCheckTensorSums", "::", "badarg"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineLorentzDimensions", "[", "dim_", "]"}], ":=", 
   RowBox[{"DefineLorentzDimensions", "[", 
    RowBox[{"{", 
     RowBox[{"dim", ",", 
      RowBox[{"Last", "[", "lorentzDimensions", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineLorentzDimensions", "[", 
    RowBox[{"dim_", ",", "dimSpinor_"}], "]"}], ":=", 
   RowBox[{"DefineLorentzDimensions", "[", 
    RowBox[{"{", 
     RowBox[{"dim", ",", "dimSpinor"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineLorentzDimensions", "[", "dim_List", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tmpCombinedLorentzTensorInputCache", "=", 
       "combinedLorentzTensorInputCache"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "Combined", " ", "Lorentz", " ", "tensors", " ", "must", " ", "be", 
        " ", "re"}], "-", 
       RowBox[{
       "declared", " ", "since", " ", "the", " ", "traces", " ", "of", " ", 
        "the", " ", "squared", " ", "combined", " ", "tensors", " ", "is", 
        " ", "cached", " ", "and", " ", "these", " ", "can", " ", 
        RowBox[{"change", "."}]}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"ClearCombinedLorentzTensors", "[", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"lorentzDimensions", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "dim", "]"}], "===", "2"}], ",", "dim", ",", 
         
         RowBox[{"{", 
          RowBox[{
           RowBox[{"First", "[", "dim", "]"}], ",", 
           RowBox[{"Last", "[", "lorentzDimensions", "]"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dimLorVars", "=", 
       RowBox[{"Variables", "[", "lorentzDimensions", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"generateDimensionReplRules", "[", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
      "DefineCombinedLorentzTensors", "[", 
       "tmpCombinedLorentzTensorInputCache", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"cbbb14d7-37a6-48b9-aec9-61c4495b6c8d"],

Cell[BoxData["\<\"Using FORM 4.1 (Jul 23 2017) 64-bits.\"\>"], \
"Print",ExpressionUUID->"57309c29-0cee-41c3-b0bb-db6e6d6d6d58"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Internal Tensor Notation and Indices Rules", \
"Subsubsection",ExpressionUUID->"81094585-ee70-4d7f-a6c6-2323777d60bb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"lorDummyPrefix", "=", "\"\<lorDummy\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"spiDummyPrefix", "=", "\"\<spiDummy\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tempPartialTraceDummy", "=", "FormTracer`Private`TempDummy"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"adjGroupDummyPrefix", "=", "\"\<adj\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fundGroupDummyPrefix", "=", "\"\<fund\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lorDummyPrefixFORM", "=", "\"\<lorFORMDummy\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"spiDummyPrefixFORM", "=", "\"\<spiFORMDummy\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lorentzTensorReplacementRulesInput", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lorentzTensorReplacementRulesOutput", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lorentzTensorReplacementRulesOutputTraced", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lorentzTensorReplacementRulesOutputPartiallyTraced", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupTensorReplacementRulesInput", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupTensorReplacementRulesOutput", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupTensorReplacementRulesOutputTraced", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"groupTensorReplacementRulesOutputPartiallyTraced", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formLorentzTensorIdentities", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"combinedTensorIdentities", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"combinedTensorNames", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"combinedTensorSquaresReplRules", "=", 
    RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "All", " ", "extra", " ", "vars", " ", "are", " ", "replaced", " ", "bei",
      " ", 
     RowBox[{"Unique", "[", "\"\<FTxextraVar\>\"", "]"}], " ", "in", " ", 
     RowBox[{"Form", ".", " ", "Thus"}]}], ",", " ", 
    RowBox[{
    "extra", " ", "vars", " ", "can", " ", "be", " ", "special", " ", 
     RowBox[{"characters", "."}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFormVarPrefix", "=", "\"\<FTxextraVar\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"extraFormVarsList", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{"Format", " ", "of", " ", "this", " ", 
    RowBox[{"list", ":", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"symbol", ",", "FTxextraVar34234"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"anotherSymbol", ",", "FTxextraVar34235"}], "}"}]}], 
      "}"}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFormVarsListExportDeclare", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFormVarsListInputConversion", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFormVarsListOutputConversion", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFormVarsListInputConversionExport", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"extraFormVarsListOutputConversionExport", "=", "\"\<\>\""}], 
   ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Is", " ", "a", " ", "string", " ", "because", " ", "in", " ", "this", " ",
     "case", " ", "the", " ", "replacement", " ", "is", " ", "done", " ", 
    "in", " ", "FORM"}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"extraFormDimVarPrefix", "=", "\"\<FTxextraDimVar\>\""}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "extra", " ", "dim", " ", "vars", " ", "have", " ", "to", " ", "be", " ", 
    "declared", " ", "as", " ", "symbol"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dimReplVarsSynonyms", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dimVarRulesInput", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dimLorVars", "=", 
   RowBox[{"Variables", "[", "lorentzDimensions", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dimGroupVars", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dimVars", "=", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{"dimLorVars", ",", "dimGroupVars"}], "]"}], "/.", 
     "dimVarRulesInput"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "All", " ", "items", " ", "in", " ", "the", " ", "following", " ", "list",
      " ", "declared", " ", "via", " ", "AutoDeclare", " ", "CFunction", " ", 
     "x"}], ",", "y", ",", 
    RowBox[{"z", ".", " ", "Thus"}], ",", " ", 
    RowBox[{"xBla", " ", "is", " ", "also", " ", "an", " ", "valid", " ", 
     RowBox[{"input", ".", " ", "Should"}], " ", "be", " ", "used", " ", 
     "with", " ", 
     RowBox[{"care", "."}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formCFunctionAutoDeclareListBasic", "=", 
   RowBox[{"{", "extraFormVarPrefix", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "formCFunctionAutoDeclareList", "=", "formCFunctionAutoDeclareListBasic"}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"0aed7be0-41e2-44fe-b693-1a043470a264"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getGroupTensors", "[", "group_", "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"FTxdeltaAdj", "[", 
       RowBox[{"group", ",", "_", ",", "_"}], "]"}], ",", 
      RowBox[{"FTxdeltaFund", "[", 
       RowBox[{"group", ",", "_", ",", "_"}], "]"}], ",", 
      RowBox[{"FTxF", "[", 
       RowBox[{"group", ",", "_", ",", "_", ",", "_"}], "]"}], ",", 
      RowBox[{"FTxT", "[", 
       RowBox[{"group", ",", "_", ",", "_", ",", "_"}], "]"}], ",", 
      RowBox[{"FTxepsAdj", "[", 
       RowBox[{"group", ",", "__"}], "]"}], ",", 
      RowBox[{"FTxepsFund", "[", 
       RowBox[{"group", ",", "__"}], "]"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"adjIndicesFromExprRules", "[", "group_", "]"}], ":=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxdeltaAdj", "[", 
        RowBox[{"group", ",", "x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxF", "[", 
        RowBox[{"group", ",", "x_", ",", "y_", ",", "z_"}], "]"}], 
       "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxT", "[", 
        RowBox[{"group", ",", "x_", ",", "y_", ",", "z_"}], "]"}], 
       "\[RuleDelayed]", 
       RowBox[{"{", "x", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxepsAdj", "[", 
        RowBox[{"group", ",", "x__"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", "x", "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"fundIndicesFromExprRules", "[", "group_", "]"}], ":=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxdeltaFund", "[", 
        RowBox[{"group", ",", "x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxT", "[", 
        RowBox[{"group", ",", "x_", ",", "y_", ",", "z_"}], "]"}], 
       "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"y", ",", "z"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxepsFund", "[", 
        RowBox[{"group", ",", "x__"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", "x", "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "the", " ", "order", " ", "is", " ", "relevant", " ", "in", " ", 
    "removeSquaredTensorsRulesT0"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"formColorPackageExtVars", "=", 
    RowBox[{"{", 
     RowBox[{
     "Global`NR", ",", "Global`cR", ",", "Global`NA", ",", "Global`cA", ",", 
      "Global`I2R"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "last", " ", "argument", " ", "is", " ", "the", " ", "tracing", " ", 
    "algorithm"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"formColorPackageGroupTemplates", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "FormTracer`GenericGroup", ",", "formColorPackageExtVars", ",", "1"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"FormTracer`SUNfund", ",", " ", 
        RowBox[{"{", 
         RowBox[{"Global`NR", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Global`NR", "^", "2"}], "-", "1"}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"2", "*", "Global`NR"}], ")"}]}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Global`NR", "^", "2"}], "-", "1"}], ")"}], ",", 
          "Global`NR", ",", 
          RowBox[{"1", "/", "2"}]}], "}"}], ",", "2"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"FormTracer`SONfund", ",", " ", 
        RowBox[{"{", 
         RowBox[{"Global`NR", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Global`NR", "-", "1"}], ")"}], "/", "2"}], ",", 
          RowBox[{"Global`NR", "*", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Global`NR", "-", "1"}], ")"}], "/", "2"}]}], ",", 
          RowBox[{"Global`NR", "-", "2"}], ",", "1"}], "}"}], ",", "3"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"FormTracer`SPNfund", ",", " ", 
        RowBox[{"{", 
         RowBox[{"Global`NR", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Global`NR", "+", "1"}], ")"}], "/", "4"}], ",", 
          RowBox[{"Global`NR", "*", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Global`NR", "+", "1"}], ")"}], "/", "2"}]}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Global`NR", "+", "2"}], ")"}], "/", "2"}], ",", 
          RowBox[{"1", "/", "2"}]}], "}"}], ",", "4"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"FormTracer`SU2fundexplicit", ",", " ", 
        RowBox[{"{", 
         RowBox[{"2", ",", 
          RowBox[{"3", "/", "4"}], ",", "3", ",", "2", ",", 
          RowBox[{"1", "/", "2"}]}], "}"}], ",", "5"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"FormTracer`SU3fundexplicit", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", 
          RowBox[{"4", "/", "3"}], ",", "8", ",", "3", ",", 
          RowBox[{"1", "/", "2"}]}], "}"}], ",", "6"}], "}"}]}], 
     "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"first", " ", 
      RowBox[{"argument", ":", " ", "algorithm"}]}], ";", " ", 
     RowBox[{"second", ":", " ", "header"}], ";", " ", 
     RowBox[{"third", ":", " ", 
      RowBox[{"1", " ", "requires", " ", "dimension", " ", "NA"}]}]}], ",", 
    " ", 
    RowBox[{"2", " ", "requires", " ", "dimension", " ", "NR"}], ",", " ", 
    RowBox[{"0", " ", "nothing"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"formColorPackageTracingAlgorithms", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<#call color\\n#call adjoint\>\"", ",", "\"\<color.h\>\"", ",", 
        "1"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<#call SUNfund\>\"", ",", "\"\<special_color.h\>\"", ",", "2"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<#call SONfund\>\"", ",", "\"\<special_color.h\>\"", ",", "2"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<#call SPNfund\>\"", ",", "\"\<special_color.h\>\"", ",", "2"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<#call SU2fundexplicit\>\"", ",", "\"\<special_color.h\>\"", ",", 
        "1"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<#call SU3fundexplicit\>\"", ",", "\"\<special_color.h\>\"", ",", 
        "2"}], "}"}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"formColorPackageGenericD", "=", 
    RowBox[{"ToString", "/@", 
     RowBox[{"{", 
      RowBox[{
      "d33", ",", "d44", ",", "d55", ",", "d433", ",", "d66", ",", "d633", 
       ",", "d543", ",", "d444", ",", "d3333", ",", "d77", ",", "d743", ",", 
       "d653", ",", "d644", ",", "d554", ",", "d5333", ",", "d4433a", ",", 
       "d4433b", ",", "d4433c", ",", "d88", ",", "d853", ",", "d844", ",", 
       "d763", ",", "d754", ",", "d7333", ",", "d664", ",", "d655", ",", 
       "d6433a", ",", "d6433b", ",", "d6433c", ",", "d5533a", ",", "d5533b", 
       ",", "d5533c", ",", "d5533d", ",", "d5443a", ",", "d5443b", ",", 
       "d5443c", ",", "d5443d", ",", "d4444a", ",", "d4444b", ",", "d43333a", 
       ",", "d43333b"}], "}"}]}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"prefix", " ", "for", " ", "GenericD", " ", "replacements"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"prefixColorPackageGenericD", "=", "\"\<grp\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "postfix", " ", "for", " ", "scalar", " ", "products", " ", "of", " ", 
     "group", " ", "vectors"}], "-", " ", 
    RowBox[{
    "gets", " ", "appended", " ", "to", " ", "prefixColorPackageGenericD"}]}],
    "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"postfixColorPackagesp", "=", "\"\<sp\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "prefix", " ", "for", " ", "the", " ", "group", " ", "vectors", " ", 
    "coming", " ", "out", " ", "of", " ", "color", " ", "package"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"prefixColorPackagegrpvecsym", "=", "\"\<grpvecx\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "maximal", " ", "order", " ", "up", " ", "to", " ", "which", " ", 
    "grpvecsyms", " ", "are", " ", "replaced"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"grpvecsymreplorder", "=", "2"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"forbiddenFormVars", "=", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<f\>\"", ",", "\"\<T\>\"", ",", "\"\<cA\>\"", ",", "\"\<cR\>\"", 
        ",", "\"\<NA\>\"", ",", "\"\<NR\>\"", ",", "\"\<I2R\>\""}], "}"}], 
      ",", "formColorPackageGenericD"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"prefixListLorentzDirac", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<mom\>\"", ",", "\"\<lor\>\"", ",", "\"\<spi\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"prefixListIndices", "=", "prefixListLorentzDirac"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupTypes", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupNames", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"shortGroupNames", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupConstantsTable", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupTracingAlgorithms", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formPreGroupTraceIdentities", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formPostGroupRenamingRules", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formGenericDReplacementRules", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formPostGroupTensorRenamingRules", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"groupTensorsList", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicLorentzTensorsT0", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"FTxdeltaLorentz", "[", 
      RowBox[{"_", ",", "_"}], "]"}], ",", 
     RowBox[{"FTxdeltaDirac", "[", 
      RowBox[{"_", ",", "_"}], "]"}], ",", 
     RowBox[{"FTxvec", "[", 
      RowBox[{"_", ",", "_"}], "]"}], ",", 
     RowBox[{"FTxgamma", "[", 
      RowBox[{"_", ",", "_", ",", "_"}], "]"}], ",", 
     RowBox[{"FTxgamma5", "[", 
      RowBox[{"_", ",", "_"}], "]"}], ",", 
     RowBox[{"FTxepsLorentz", "[", "__", "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicLorentzTensorsT", "=", 
   RowBox[{"{", 
    RowBox[{"FTxvecs", "[", 
     RowBox[{"_", ",", "_"}], "]"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicLorentzTensors", "=", "basicLorentzTensorsT0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lorentzTensors", "=", "basicLorentzTensors"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicLorentzFromExprRulesT0", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"FTxdeltaLorentz", "[", 
       RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxvec", "[", 
       RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"{", "y", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxgamma", "[", 
       RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"{", "x", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxepsLorentz", "[", "x__", "]"}], "\[RuleDelayed]", 
      RowBox[{"{", "x", "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicLorentzFromExprRulesT", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxvecs", "[", 
      RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"{", "y", "}"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicLorentzFromExprRules", "=", "basicLorentzFromExprRulesT0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lorentzFromExprRules", "=", "basicLorentzFromExprRules"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"spinorFromExprRules", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxgamma", "[", 
        RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"y", ",", "z"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxgamma5", "[", 
        RowBox[{"y_", ",", "z_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"y", ",", "z"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxdeltaDirac", "[", 
        RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicMomentumFromExprRulesT0", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"FTxvec", "[", 
       RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"{", "x", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxsp", "[", 
       RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"basicMomentumFromExprRulesT", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxvecs", "[", 
        RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", "x", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FTxsps", "[", 
        RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicMomentumFromExprRules", "=", "basicMomentumFromExprRulesT0"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"momentumFromExprRules", "=", "basicMomentumFromExprRules"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"basicCombinedMomentumReplT0", "=", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FTxvec", "[", 
      RowBox[{"p_Plus", ",", "mu_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"FTxvec", "[", 
      RowBox[{
       RowBox[{"momentumSum", "[", "p", "]"}], ",", "mu"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxvec", "[", 
      RowBox[{"p_Times", ",", "mu_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{
      RowBox[{"p", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "*", 
      RowBox[{"FTxvec", "[", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "mu"}], "]"}]}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsp", "[", 
      RowBox[{"p_Plus", ",", "q_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"FTxsp", "[", 
      RowBox[{
       RowBox[{"momentumSum", "[", "p", "]"}], ",", "q"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsp", "[", 
      RowBox[{"p_", ",", "q_Plus"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"FTxsp", "[", 
      RowBox[{"p", ",", 
       RowBox[{"momentumSum", "[", "q", "]"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsp", "[", 
      RowBox[{"p_Times", ",", "q_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{
      RowBox[{"p", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "*", 
      RowBox[{"FTxsp", "[", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "q"}], "]"}]}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsp", "[", 
      RowBox[{"p_", ",", "q_Times"}], "]"}], "\[RuleDelayed]", 
     RowBox[{
      RowBox[{"q", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "*", 
      RowBox[{"FTxsp", "[", 
       RowBox[{"p", ",", 
        RowBox[{"q", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"basicCombinedMomentumReplT", "=", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FTxvecs", "[", 
      RowBox[{"p_Plus", ",", "mu_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"FTxvecs", "[", 
      RowBox[{
       RowBox[{"momentumSum", "[", "p", "]"}], ",", "mu"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxvecs", "[", 
      RowBox[{"p_Times", ",", "mu_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{
      RowBox[{"p", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "*", 
      RowBox[{"FTxvecs", "[", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "mu"}], "]"}]}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsps", "[", 
      RowBox[{"p_Plus", ",", "q_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"FTxsps", "[", 
      RowBox[{
       RowBox[{"momentumSum", "[", "p", "]"}], ",", "q"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsps", "[", 
      RowBox[{"p_", ",", "q_Plus"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"FTxsps", "[", 
      RowBox[{"p", ",", 
       RowBox[{"momentumSum", "[", "q", "]"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsps", "[", 
      RowBox[{"p_Times", ",", "q_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{
      RowBox[{"p", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "*", 
      RowBox[{"FTxsps", "[", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "q"}], "]"}]}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FTxsps", "[", 
      RowBox[{"p_", ",", "q_Times"}], "]"}], "\[RuleDelayed]", 
     RowBox[{
      RowBox[{"q", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "*", 
      RowBox[{"FTxsps", "[", 
       RowBox[{"p", ",", 
        RowBox[{"q", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basicCombinedMomentumRepl", "=", "basicCombinedMomentumReplT0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"combinedMomentumRepl", "=", "basicCombinedMomentumRepl"}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"07c11e0a-114d-4bc4-a333-939858ab9c70"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Define Tensors", "Section",
 CellChangeTimes->{{3.6465649753106613`*^9, 3.6465649826502*^9}, 
   3.646565043788147*^9, {3.646680858723034*^9, 
   3.646680859338702*^9}},ExpressionUUID->"3b2272dc-2a07-4bb1-9c0c-\
3ed417705b09"],

Cell[CellGroupData[{

Cell["Defining Basic Notation", \
"Subsection",ExpressionUUID->"5b16d51f-cadb-42ab-b140-97eed59e6656"],

Cell[CellGroupData[{

Cell["Helper Modules", \
"Subsubsection",ExpressionUUID->"85486936-8336-47b0-9bc2-88181baabb93"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateDimensionReplRules", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dimReplVars", ",", "forbiddenDimVars"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"forbiddenDimVars", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"forbiddenFormVars", ",", 
         RowBox[{"ToString", "/@", "formColorPackageExtVars"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"dimVars", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"dimLorVars", ",", "dimGroupVars"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"AnyTrue", "[", 
         RowBox[{"dimVars", ",", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"forbiddenDimVars", ",", 
             RowBox[{"ToString", "[", "#", "]"}]}], "]"}], "&"}]}], "]"}], 
        ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"generateDimensionReplRules", "::", "invalidvars"}], ",", 
           "forbiddenDimVars"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dimReplVars", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "groupNames", "]"}], "===", "0"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"dimLorVars", ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "groupNames", "]"}], ">", "1"}], ",", 
               "dimGroupVars", ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"ToString", "/@", "formColorPackageExtVars"}], ",", 
              RowBox[{"ToString", "[", "#", "]"}]}], "]"}], "&"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dimReplVarsSynonyms", "=", 
       RowBox[{"getSynonymList", "[", 
        RowBox[{"dimReplVars", ",", "extraFormDimVarPrefix"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dimVarRulesInput", "=", 
       RowBox[{"Dispatch", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"First", "[", "#", "]"}], "\[Rule]", 
            RowBox[{"Last", "[", "#", "]"}]}], "&"}], ",", 
          "dimReplVarsSynonyms"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dimVars", "=", 
       RowBox[{"dimVars", "/.", "dimVarRulesInput"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"f69f53f8-8ead-4b87-919b-a3c3fb63b6b7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"addbar", "[", "s_Symbol", "]"}], ":=", 
   RowBox[{"ToExpression", "[", 
    RowBox[{
     RowBox[{"ToString", "[", "s", "]"}], "<>", "\"\<_\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"barrepl", "[", 
    RowBox[{"s_", ",", "vars_List"}], "]"}], ":=", 
   RowBox[{"s", "/.", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"var", "\[Rule]", 
       RowBox[{"addbar", "[", "var", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"var", ",", "vars"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"extractExprAndVars", "[", 
    RowBox[{"arg_", ",", "numberOfArgs_Integer"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"VectorQ", "[", "arg", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"First", "[", "arg", "]"}], ",", 
       RowBox[{"Rest", "[", "arg", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"arg", ",", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"List", "@@", "arg"}], ",", 
         RowBox[{"-", "numberOfArgs"}]}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"e0879401-bfbe-49bf-b106-0d6e169129f8"]
}, Closed]],

Cell[CellGroupData[{

Cell["Lorentz Tensors", \
"Subsubsection",ExpressionUUID->"8381aec8-649d-4498-9796-e601dc7027f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"outputRules", " ", 
     RowBox[{"doesn", "'"}], "t", " ", "act", " ", "on", " ", "FORM", " ", 
     "output", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"e", ".", "g", ".", " ", "just"}], " ", "for", " ", "expand", 
       " ", "terms"}], ")"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
    "outputRulesTraced", " ", "acting", " ", "on", " ", "FORM", " ", "output",
      " ", "with", " ", "partial", " ", "trace", " ", "disabled"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
    "outputRulesPartiallyTraced", " ", "acting", " ", "on", " ", "FORM", " ", 
     "output", " ", "with", " ", "partial", " ", "trace", " ", "enabled"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
    "rules", " ", "in", " ", "outputRulesTraced", " ", "are", " ", "also", 
     " ", "added", " ", "to", " ", "outputRulesPartiallyTraced", " ", "at", 
     " ", "the", " ", "end"}]}], "\[IndentingNewLine]", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"DefineLorentzTensors", "[", "___", "]"}], ":=", 
     RowBox[{"Message", "[", 
      RowBox[{"DefineLorentzTensors", "::", "badarg"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DefineLorentzTensors", "[", 
      RowBox[{"lorentzDelta_", ",", "vector_", ",", "scalarProduct_", ",", 
       RowBox[{"epsilon_", ":", "Null"}], ",", 
       RowBox[{"spinorDelta_", ":", "Null"}], ",", 
       RowBox[{"gamma_", ":", "Null"}], ",", 
       RowBox[{"gamma5_", ":", "Null"}], ",", 
       RowBox[{"vectorspatial_", ":", "Null"}], ",", 
       RowBox[{"scalarProductspatial_", ":", "Null"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"inputRules", "=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"outputRules", "=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"outputRulesTraced", "=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"outputRulesPartiallyTraced", "=", 
          RowBox[{"{", "}"}]}], ",", "tmpExpr", ",", "tmpVars"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Clear", " ", "combined", " ", "Lorentz", " ", "tensors", " ", "and", 
         " ", "Lorentz", " ", "tensor", " ", "identities", " ", "since", " ", 
         "they", " ", "may", " ", "use", " ", "an", " ", "old", " ", "syntax",
          " ", "which", " ", "would", " ", "lead", " ", "to", " ", 
         RowBox[{"errors", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ClearCombinedLorentzTensors", "[", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ClearLorentzTensorIdentities", "[", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Check", "[", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
            "lorentz", " ", "delta", " ", "replacement", " ", "rule"}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
              RowBox[{"extractExprAndVars", "[", 
               RowBox[{"lorentzDelta", ",", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"inputRules", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", 
                 RowBox[{"FormTracer`Private`FTxdeltaLorentz", "[", 
                  RowBox[{
                   RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"outputRules", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{
                  RowBox[{"FormTracer`Private`FTxdeltaLorentz", "[", 
                   RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                  "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"outputRulesPartiallyTraced", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{
                  RowBox[{"Global`FTxdeltaLorentz", "[", 
                   RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                  "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"vector", " ", "replacement", " ", "rule"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
              RowBox[{"extractExprAndVars", "[", 
               RowBox[{"vector", ",", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"inputRules", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", 
                 RowBox[{"FormTracer`Private`FTxvec", "[", 
                  RowBox[{
                   RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "special", " ", "rule", " ", "for", " ", "shorthand", " ", 
               "vecs", " ", "in", " ", "gamma", " ", "strings"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"gamma", "=!=", "Null"}], ",", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"inputRules", ",", 
                 RowBox[{
                  RowBox[{"barrepl", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "tmpExpr", "]"}], "@@", 
                    RowBox[{"(", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "tmpExpr"}], ",", 
                    RowBox[{"-", "1"}]}], "]"}], ")"}]}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"tmpVars", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], "]"}], "\[RuleDelayed]", 
                  RowBox[{"Evaluate", "[", 
                   RowBox[{"FormTracer`Private`FTxvec", "[", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}]}], "]"}]}],
               "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"outputRules", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{
                  RowBox[{"FormTracer`Private`FTxvec", "[", 
                   RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                  "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"outputRulesTraced", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{
                  RowBox[{"Global`FTxvec", "[", 
                   RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                  "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "special", " ", "rule", " ", "for", " ", "shorthand", " ", 
               "vecs", " ", "in", " ", "gamma", " ", "strings"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"gamma", "=!=", "Null"}], ",", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"outputRulesPartiallyTraced", ",", 
                 RowBox[{
                  RowBox[{"barrepl", "[", 
                   RowBox[{
                    RowBox[{"Global`FTxvec", "[", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "tmpVars"}], 
                   "]"}], "\[RuleDelayed]", 
                  RowBox[{"Evaluate", "[", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"tmpExpr", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "scalar", " ", "product", " ", "replacement", " ", "rule"}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
              RowBox[{"extractExprAndVars", "[", 
               RowBox[{"scalarProduct", ",", "2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"inputRules", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", 
                 RowBox[{"FormTracer`Private`FTxsp", "[", 
                  RowBox[{
                   RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"outputRules", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{
                  RowBox[{"FormTracer`Private`FTxsp", "[", 
                   RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                  "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"outputRulesTraced", ",", 
               RowBox[{
                RowBox[{"barrepl", "[", 
                 RowBox[{
                  RowBox[{"Global`FTxsp", "[", 
                   RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                  "]"}], "\[RuleDelayed]", 
                RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "optional", " ", "epsilon", " ", "replacement", " ", "rule"}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"epsilon", "=!=", "Null"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Head", "[", "epsilon", "]"}], "[", "a__", "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{
                   "FormTracer`Private`FTxepsLorentz", "[", "a", "]"}]}]}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRules", ",", 
                  RowBox[{
                   RowBox[{
                   "FormTracer`Private`FTxepsLorentz", "[", "a__", "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{
                    RowBox[{"Head", "[", "epsilon", "]"}], "[", "a", 
                    "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRulesTraced", ",", 
                  RowBox[{
                   RowBox[{"Global`FTxepsLorentz", "[", "a__", "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{
                    RowBox[{"Head", "[", "epsilon", "]"}], "[", "a", 
                    "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "optional", " ", "spinor", " ", "delta", " ", "replacement", 
               " ", "rule"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"spinorDelta", "=!=", "Null"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
                 RowBox[{"extractExprAndVars", "[", 
                  RowBox[{"spinorDelta", ",", "2"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"FormTracer`Private`FTxdeltaDirac", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
                 ";", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"FormTracer`Private`FTxdeltaDirac", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRulesPartiallyTraced", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"Global`FTxdeltaDirac", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], 
                ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "optional", " ", "gamma", " ", "replacement", " ", "rule"}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"gamma", "=!=", "Null"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
                 RowBox[{"extractExprAndVars", "[", 
                  RowBox[{"gamma", ",", "3"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"FormTracer`Private`FTxgamma", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
                 ";", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "special", " ", "rule", " ", "for", " ", "closed", " ", 
                  "gamma", " ", "strings"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "tmpExpr", "]"}], "@@", 
                    RowBox[{"(", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "tmpExpr"}], ",", 
                    RowBox[{"-", "2"}]}], "]"}], ")"}]}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"tmpVars", ",", 
                    RowBox[{"-", "2"}]}], "]"}]}], "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"FormTracer`Private`FTxgamma", "[", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}]}], "]"}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"FormTracer`Private`FTxgamma", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRulesPartiallyTraced", ",", " ", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"Global`FTxgamma", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], 
                ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "optional", " ", "gamma5", " ", "replacement", " ", "rule"}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"gamma5", "=!=", "Null"}], ",", "\[IndentingNewLine]", 
               
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
                 RowBox[{"extractExprAndVars", "[", 
                  RowBox[{"gamma5", ",", "2"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"FormTracer`Private`FTxgamma5", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
                 ";", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "special", " ", "rule", " ", "for", " ", "shorthand", " ", 
                  "gamma5", " ", "in", " ", "gamma", " ", "strings"}], "*)"}],
                 "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"Head", "[", "tmpExpr", "]"}], "\[RuleDelayed]", 
                   "FormTracer`Private`FTxgamma5"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"FormTracer`Private`FTxgamma5", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRulesPartiallyTraced", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"Global`FTxgamma5", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], 
                ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "optional", " ", "vecs", " ", "replacement", " ", "rule"}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"vectorspatial", "=!=", "Null"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
                 RowBox[{"extractExprAndVars", "[", 
                  RowBox[{"vectorspatial", ",", "2"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"FormTracer`Private`FTxvecs", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
                 ";", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "special", " ", "rule", " ", "for", " ", "shorthand", " ", 
                  "vecs", " ", "in", " ", "gamma", " ", "strings"}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "tmpExpr", "]"}], "@@", 
                    RowBox[{"(", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "tmpExpr"}], ",", 
                    RowBox[{"-", "1"}]}], "]"}], ")"}]}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"tmpVars", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"FormTracer`Private`FTxvecs", "[", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}]}], "]"}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"FormTracer`Private`FTxvecs", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRulesTraced", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"Global`FTxvecs", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "special", " ", "rule", " ", "for", " ", "shorthand", " ", 
                  "vecs", " ", "in", " ", "gamma", " ", "strings"}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRulesPartiallyTraced", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"Global`FTxvecs", "[", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "tmpVars"}], 
                    "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"tmpExpr", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "optional", " ", "sp3", " ", "replacement", " ", "rule"}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"scalarProductspatial", "=!=", "Null"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
                 RowBox[{"extractExprAndVars", "[", 
                  RowBox[{"scalarProductspatial", ",", "2"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"inputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], 
                   "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", 
                    RowBox[{"FormTracer`Private`FTxsps", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}],
                 ";", "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRules", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"FormTracer`Private`FTxsps", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"outputRulesTraced", ",", 
                  RowBox[{
                   RowBox[{"barrepl", "[", 
                    RowBox[{
                    RowBox[{"Global`FTxsps", "[", 
                    RowBox[{
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"tmpVars", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}],
                     "]"}], "\[RuleDelayed]", 
                   RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], 
                ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"Message", "[", 
             RowBox[{"DefineLorentzTensors", "::", "badarg"}], "]"}]}], "]"}],
           ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Take", "::", "take"}], ",", 
            RowBox[{"Part", "::", "partw"}], ",", 
            RowBox[{"General", "::", "stop"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"lorentzTensorReplacementRulesInput", "=", 
         RowBox[{"Dispatch", "[", "inputRules", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"lorentzTensorReplacementRulesOutput", "=", 
         RowBox[{"Dispatch", "[", "outputRules", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"lorentzTensorReplacementRulesOutputTraced", "=", 
         RowBox[{"Dispatch", "[", "outputRulesTraced", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"lorentzTensorReplacementRulesOutputPartiallyTraced", "=", 
         RowBox[{"Dispatch", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"outputRulesTraced", ",", "outputRulesPartiallyTraced"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        
        RowBox[{"enableFiniteT", "[", 
         RowBox[{
          RowBox[{"vectorspatial", "=!=", "Null"}], "||", 
          RowBox[{"scalarProductspatial", "=!=", "Null"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"b0ba90f0-2b29-4ef4-9092-273ee3ac6e2d"]
}, Closed]],

Cell[CellGroupData[{

Cell["Group Tensors", \
"Subsubsection",ExpressionUUID->"6fe4719e-ed99-45e8-9912-c93c61468dbb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getGroupTensorRules", "[", 
    RowBox[{"{", 
     RowBox[{
     "type_", ",", "group_", ",", "deltaAdj_", ",", "structureF_", ",", 
      RowBox[{"deltaFund_", ":", "Null"}], ",", 
      RowBox[{"generatorT_", ":", "Null"}], ",", 
      RowBox[{"epsilonAdj_", ":", "Null"}], ",", 
      RowBox[{"epsilonFund_", ":", "Null"}]}], "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"groupName", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "group", "]"}], "===", "List"}], ",", 
          RowBox[{"First", "[", "group", "]"}], ",", "group"}], "]"}]}], ",", 
       
       RowBox[{"inputRules", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"outputRules", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"outputRulesTraced", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"outputRulesPartiallyTraced", "=", 
        RowBox[{"{", "}"}]}], ",", "tmpExpr", ",", "tmpVars"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"delta", " ", "adj", " ", "replacement", " ", "rule"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
       RowBox[{"extractExprAndVars", "[", 
        RowBox[{"deltaAdj", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"inputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"FormTracer`Private`FTxdeltaAdj", "[", 
           RowBox[{"groupName", ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"FormTracer`Private`FTxdeltaAdj", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRulesPartiallyTraced", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"Global`FTxdeltaAdj", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "FT", " ", "context", " ", "as", " ", "deltas", " ", "and", " ", 
        "epsilons", " ", "will", " ", "be", " ", "converted", " ", 
        "internally"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"structureF", " ", "replacement", " ", "rule"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
       RowBox[{"extractExprAndVars", "[", 
        RowBox[{"structureF", ",", "3"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"inputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"FormTracer`Private`FTxF", "[", 
           RowBox[{"groupName", ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"FormTracer`Private`FTxF", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRulesPartiallyTraced", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"Global`FTxF", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "optional", " ", "delta", " ", "fund", " ", "replacement", " ", 
        "rule"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"deltaFund", "===", "Null"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{
          "inputRules", ",", "outputRules", ",", "outputRulesTraced", ",", 
           "outputRulesPartiallyTraced"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
       RowBox[{"extractExprAndVars", "[", 
        RowBox[{"deltaFund", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"AppendTo", "[", 
       RowBox[{"inputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"FormTracer`Private`FTxdeltaFund", "[", 
           RowBox[{"groupName", ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"FormTracer`Private`FTxdeltaFund", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRulesPartiallyTraced", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"Global`FTxdeltaFund", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"optional", " ", "T", " ", "replacement", " ", "rule"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"generatorT", "===", "Null"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{
          "inputRules", ",", "outputRules", ",", "outputRulesTraced", ",", 
           "outputRulesPartiallyTraced"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tmpExpr", ",", "tmpVars"}], "}"}], "=", 
       RowBox[{"extractExprAndVars", "[", 
        RowBox[{"generatorT", ",", "3"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"inputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{"tmpExpr", ",", "tmpVars"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"FormTracer`Private`FTxT", "[", 
           RowBox[{"groupName", ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", 
            RowBox[{"tmpVars", "[", 
             RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRules", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"FormTracer`Private`FTxT", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRulesPartiallyTraced", ",", 
        RowBox[{
         RowBox[{"barrepl", "[", 
          RowBox[{
           RowBox[{"Global`FTxT", "[", 
            RowBox[{"groupName", ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"tmpVars", "[", 
              RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ",", "tmpVars"}], 
          "]"}], "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", "tmpExpr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "optional", " ", "epsilon", " ", "adj", " ", "replacement", " ", 
        "rule"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"epsilonAdj", "===", "Null"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{
          "inputRules", ",", "outputRules", ",", "outputRulesTraced", ",", 
           "outputRulesPartiallyTraced"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"inputRules", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "epsilonAdj", "]"}], "[", "a__", "]"}], 
         "\[RuleDelayed]", 
         RowBox[{"FormTracer`Private`FTxepsAdj", "[", 
          RowBox[{"groupName", ",", "a"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRules", ",", 
        RowBox[{
         RowBox[{"FormTracer`Private`FTxepsAdj", "[", 
          RowBox[{"groupName", ",", "a__"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"Head", "[", "epsilonAdj", "]"}], "[", "a", "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRulesPartiallyTraced", ",", 
        RowBox[{
         RowBox[{"Global`FTxepsAdj", "[", 
          RowBox[{"groupName", ",", "a__"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"Head", "[", "epsilonAdj", "]"}], "[", "a", "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "optional", " ", "epsilon", " ", "fund", " ", "replacement", " ", 
        "rule"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"epsilonFund", "===", "Null"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{
          "inputRules", ",", "outputRules", ",", "outputRulesTraced", ",", 
           "outputRulesPartiallyTraced"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"inputRules", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "epsilonFund", "]"}], "[", "a__", "]"}], 
         "\[RuleDelayed]", 
         RowBox[{"FormTracer`Private`FTxepsFund", "[", 
          RowBox[{"groupName", ",", "a"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRules", ",", 
        RowBox[{
         RowBox[{"FormTracer`Private`FTxepsFund", "[", 
          RowBox[{"groupName", ",", "a__"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"Head", "[", "epsilonFund", "]"}], "[", "a", "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"outputRulesPartiallyTraced", ",", 
        RowBox[{
         RowBox[{"Global`FTxepsFund", "[", 
          RowBox[{"groupName", ",", "a__"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"Head", "[", "epsilonFund", "]"}], "[", "a", "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{
        "inputRules", ",", "outputRules", ",", "outputRulesTraced", ",", 
         "outputRulesPartiallyTraced"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"ad99d5e6-ce63-456d-a244-146ed4ac58da"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getGroupNames", "[", "groups_List", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "groupName", "]"}], "===", "List"}], ",", 
        RowBox[{"First", "[", "groupName", "]"}], ",", "groupName"}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"groupName", ",", 
        RowBox[{"groups", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getShortGroupNames", "[", "groups_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"n", "=", "1"}], ",", 
        RowBox[{"groupNames", "=", 
         RowBox[{"ToString", "/@", 
          RowBox[{"getGroupNames", "[", "groups", "]"}]}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{"DuplicateFreeQ", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"StringTake", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Min", "[", 
                RowBox[{"n", ",", 
                 RowBox[{"StringLength", "[", "#", "]"}]}], "]"}]}], "]"}], 
             "&"}], "/@", "groupNames"}], "]"}], "]"}], ",", 
         RowBox[{"n", "++"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"#", ",", 
            RowBox[{"Min", "[", 
             RowBox[{"n", ",", 
              RowBox[{"StringLength", "[", "#", "]"}]}], "]"}]}], "]"}], 
          "&"}], "/@", "groupNames"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getGroupConstantNameRules", "[", 
     RowBox[{"groupNaming_", ",", "shortGroupName_String"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "numberOfSpecialNames", ",", "specialNames", ",", "standardNames", ",",
         "allNames"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"numberOfSpecialNames", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "groupNaming", "]"}], "===", "List"}], ",", 
          RowBox[{
           RowBox[{"Length", "[", "groupNaming", "]"}], "-", "1"}], ",", 
          "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"specialNames", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"numberOfSpecialNames", ">", "0"}], ",", 
          RowBox[{"Take", "[", 
           RowBox[{"groupNaming", ",", 
            RowBox[{"-", "numberOfSpecialNames"}]}], "]"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"standardNames", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"#", ",", "shortGroupName"}], "]"}], "]"}], "&"}], "/@", 
         RowBox[{"Take", "[", 
          RowBox[{
           RowBox[{"ToString", "/@", "formColorPackageExtVars"}], ",", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"Length", "[", "formColorPackageExtVars", "]"}]}], "+", 
            "numberOfSpecialNames"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"allNames", "=", 
        RowBox[{"Join", "[", 
         RowBox[{"specialNames", ",", "standardNames"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"formColorPackageExtVars", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "\[Rule]", 
           RowBox[{"allNames", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "@", "formColorPackageExtVars"}]}], "}"}]}], 
         "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getGroupConstantNames", "[", 
     RowBox[{"group_List", ",", "shortGroupName_String"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"groupTemplate", ",", "groupNameRules"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"groupTemplate", "=", 
        RowBox[{"FirstCase", "[", 
         RowBox[{"formColorPackageGroupTemplates", ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"First", "[", "group", "]"}], ",", "defValues_", ",", 
             "algorithm_"}], "}"}], "\[RuleDelayed]", "defValues"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupNameRules", "=", 
        RowBox[{"getGroupConstantNameRules", "[", 
         RowBox[{
          RowBox[{"group", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", "shortGroupName"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"groupTemplate", "//.", "groupNameRules"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getGroupTracingAlgorithms", "[", "group_List", "]"}], ":=", 
    RowBox[{"formColorPackageTracingAlgorithms", "[", 
     RowBox[{"[", 
      RowBox[{"FirstCase", "[", 
       RowBox[{"formColorPackageGroupTemplates", ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"First", "[", "group", "]"}], ",", "defValues_", ",", 
           "algorithm_"}], "}"}], "\[RuleDelayed]", "algorithm"}]}], "]"}], 
      "]"}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFormPostGroupRenamingRules", "[", 
     RowBox[{
     "groupConstants_List", ",", "shortGroupName_String", ",", "groupType_"}],
      "]"}], ":=", 
    RowBox[{"\"\<Multiply replace_(\>\"", "~~", 
     RowBox[{"stringList", "[", 
      RowBox[{"toGenericFormString", "/@", 
       RowBox[{"Riffle", "[", 
        RowBox[{"formColorPackageExtVars", ",", "groupConstants"}], "]"}]}], 
      "]"}], "~~", "\"\<);\n\>\"", "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"FirstCase", "[", 
         RowBox[{"formColorPackageGroupTemplates", ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"groupType", ",", "defValues_", ",", "algorithm_"}], 
            "}"}], "\[RuleDelayed]", "algorithm"}]}], "]"}], "\[Equal]", 
        "1"}], ",", 
       RowBox[{
       "\"\<*replace possible color package remnants\n#do i = 1, \>\"", "~~", 
        
        RowBox[{"ToString", "[", "grpvecsymreplorder", "]"}], "~~", 
        "\"\<\n\tMultiply replace_(cOlpR`i',\>\"", "~~", 
        "prefixColorPackagegrpvecsym", "~~", "shortGroupName", "~~", 
        "\"\<R`i',cOlpA`i',\>\"", "~~", "prefixColorPackagegrpvecsym", "~~", 
        "shortGroupName", "~~", "\"\<A`i');\n#enddo\>\""}], ",", "\"\<\>\""}],
       "]"}]}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFormGenericDReplacementRules", "[", "groupType_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"FirstCase", "[", 
        RowBox[{"formColorPackageGroupTemplates", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"groupType", ",", "defValues_", ",", "algorithm_"}], "}"}],
           "\[RuleDelayed]", "algorithm"}]}], "]"}], "\[Equal]", "1"}], ",", 
      RowBox[{
      "\"\<id \>\"", "~~", "prefixColorPackagegrpvecsym", "~~", "\"\<1?.\>\"",
        "~~", "prefixColorPackagegrpvecsym", "~~", "\"\<2?=\>\"", "~~", 
       "prefixColorPackageGenericD", "~~", "postfixColorPackagesp", "~~", 
       "\"\<(\>\"", "~~", "prefixColorPackagegrpvecsym", "~~", "\"\<1,\>\"", "~~",
        "prefixColorPackagegrpvecsym", "~~", "\"\<2);\n\>\"", "~~", 
       RowBox[{"stringLines", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "\"\<id \>\"", "~~", "#", "~~", "\"\<(?\>\"", "~~", 
            "prefixColorPackagegrpvecsym", "~~", "\"\<)=\>\"", "~~", 
            "prefixColorPackageGenericD", "~~", "#", "~~", "\"\<(?\>\"", "~~",
             "prefixColorPackagegrpvecsym", "~~", "\"\<);\>\""}], "&"}], ",", 
          "formColorPackageGenericD"}], "]"}], "]"}]}], ",", "\"\<\>\""}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFormPreGroupTraceIdentities", "[", 
     RowBox[{"shortGroupName_String", ",", "groupType_"}], "]"}], ":=", 
    "\"\<\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getFormPostGroupTensorRenamingRules", "[", 
    RowBox[{"groupName_String", ",", "shortGroupName_String"}], "]"}], ":=", 
   RowBox[{
   "\"\<\nid d_(a\>\"", "~~", "shortGroupName", "~~", "\"\<1?a\>\"", "~~", 
    "shortGroupName", "~~", "\"\<Indices,a\>\"", "~~", "shortGroupName", 
    "~~", "\"\<2?)=FTxdeltaAdj(\>\"", "~~", "groupName", "~~", "\"\<,a\>\"", "~~",
     "shortGroupName", "~~", "\"\<1,a\>\"", "~~", "shortGroupName", "~~", 
    "\"\<2);\nid d_(f\>\"", "~~", "shortGroupName", "~~", "\"\<1?f\>\"", "~~",
     "shortGroupName", "~~", "\"\<Indices,f\>\"", "~~", "shortGroupName", 
    "~~", "\"\<2?)=FTxdeltaFund(\>\"", "~~", "groupName", "~~", "\"\<,f\>\"", 
    "~~", "shortGroupName", "~~", "\"\<1,f\>\"", "~~", "shortGroupName", 
    "~~", "\"\<2);\nid FTxeps(a\>\"", "~~", "shortGroupName", "~~", 
    "\"\<1?a\>\"", "~~", "shortGroupName", "~~", "\"\<Indices,?a\>\"", "~~", 
    "shortGroupName", "~~", "\"\<2)=FTxepsAdj(\>\"", "~~", "groupName", "~~", 
    "\"\<,a\>\"", "~~", "shortGroupName", "~~", "\"\<1,?a\>\"", "~~", 
    "shortGroupName", "~~", "\"\<2);\nid FTxeps(f\>\"", "~~", 
    "shortGroupName", "~~", "\"\<1?f\>\"", "~~", "shortGroupName", "~~", 
    "\"\<Indices,?f\>\"", "~~", "shortGroupName", "~~", 
    "\"\<2)=FTxepsFund(\>\"", "~~", "groupName", "~~", "\"\<,f\>\"", "~~", 
    "shortGroupName", "~~", "\"\<1,?f\>\"", "~~", "shortGroupName", "~~", 
    "\"\<2);\nid T(f\>\"", "~~", "shortGroupName", "~~", "\"\<1?,f\>\"", "~~",
     "shortGroupName", "~~", "\"\<2?,a\>\"", "~~", "shortGroupName", "~~", 
    "\"\<1?)=FTxT(\>\"", "~~", "groupName", "~~", "\"\<,a\>\"", "~~", 
    "shortGroupName", "~~", "\"\<1,f\>\"", "~~", "shortGroupName", "~~", 
    "\"\<1,f\>\"", "~~", "shortGroupName", "~~", "\"\<2);\nid f(a\>\"", "~~", 
    "shortGroupName", "~~", "\"\<1?,a\>\"", "~~", "shortGroupName", "~~", 
    "\"\<2?,a\>\"", "~~", "shortGroupName", "~~", "\"\<3?)=FTxF(\>\"", "~~", 
    "groupName", "~~", "\"\<,a\>\"", "~~", "shortGroupName", "~~", 
    "\"\<1,a\>\"", "~~", "shortGroupName", "~~", "\"\<2,a\>\"", "~~", 
    "shortGroupName", "~~", "\"\<3);\n\>\""}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->
  True,ExpressionUUID->"92c12ce1-7b0a-40b4-9747-c793b8c4fe8c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearGroupTensors", "[", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"prefixListIndices", "=", "prefixListLorentzDirac"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"groupTypes", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupNames", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"shortGroupNames", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupConstantsTable", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dimGroupVars", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"generateDimensionReplRules", "[", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"groupTracingAlgorithms", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"formPreGroupTraceIdentities", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"formPostGroupRenamingRules", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"formGenericDReplacementRules", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"formPostGroupTensorRenamingRules", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupTensorsList", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesInput", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesOutput", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesOutputTraced", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesOutputPartiallyTraced", "=", 
        RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineGroupTensors", "[", 
    RowBox[{"{", "}"}], "]"}], ":=", 
   RowBox[{"ClearGroupTensors", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineGroupTensors", "[", 
    RowBox[{"{", 
     RowBox[{"{", "}"}], "}"}], "]"}], ":=", 
   RowBox[{"ClearGroupTensors", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DefineGroupTensors", "[", "groups__", "]"}], ":=", 
  RowBox[{"DefineGroupTensors", "[", 
   RowBox[{"List", "[", "groups", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineGroupTensors", "[", 
     RowBox[{"groups_List", "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"First", "[", "groups", "]"}], "]"}], "==", "List"}]}], "]"}],
     ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "replacementRules", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "sanity", " ", "check", " ", "before", " ", "anything", " ", "is", " ",
         "changed"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{"DuplicateFreeQ", "[", 
           RowBox[{"getGroupNames", "[", "groups", "]"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"DefineGroupTensors", "::", "duplicategroupnames"}], "]"}],
           ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"AnyTrue", "[", 
          RowBox[{
           RowBox[{"groups", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"formColorPackageGroupTemplates", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", " ", "#"}], 
              "]"}]}], "&"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"DefineGroupTensors", "::", "templatemissing"}], "]"}], 
          ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Initializing", " ", "group", " ", "and", " ", "group", " ", 
         "constant", " ", "names"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Quiet", "[", 
        RowBox[{
         RowBox[{"Check", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"groupTypes", "=", 
             RowBox[{"groups", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"groupNames", "=", 
             RowBox[{"getGroupNames", "[", "groups", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"shortGroupNames", "=", 
             RowBox[{"getShortGroupNames", "[", "groups", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"groupConstantsTable", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"getGroupConstantNames", "[", 
                RowBox[{
                 RowBox[{"groups", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", 
                 RowBox[{"shortGroupNames", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "groups", "]"}]}], "}"}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"dimGroupVars", "=", 
             RowBox[{"Variables", "[", "groupConstantsTable", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"generateDimensionReplRules", "[", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"groupTracingAlgorithms", "=", 
             RowBox[{"getGroupTracingAlgorithms", "/@", "groups"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"prefixListIndices", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"prefixListLorentzDirac", ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"\"\<a\>\"", ",", "#"}], "]"}], "&"}], ",", 
                 RowBox[{"(", 
                  RowBox[{"ToString", "/@", "shortGroupNames"}], ")"}]}], 
                "]"}], ",", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"\"\<f\>\"", ",", "#"}], "]"}], "&"}], ",", 
                 RowBox[{"(", 
                  RowBox[{"ToString", "/@", "shortGroupNames"}], ")"}]}], 
                "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"formPreGroupTraceIdentities", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"getFormPreGroupTraceIdentities", "[", 
                RowBox[{
                 RowBox[{"ToString", "@", 
                  RowBox[{"shortGroupNames", "[", 
                   RowBox[{"[", "iGroup", "]"}], "]"}]}], ",", 
                 RowBox[{"groupTypes", "[", 
                  RowBox[{"[", "iGroup", "]"}], "]"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"iGroup", ",", 
                 RowBox[{"Length", "@", "groupNames"}]}], "}"}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"formPostGroupRenamingRules", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"getFormPostGroupRenamingRules", "[", 
                RowBox[{
                 RowBox[{"groupConstantsTable", "[", 
                  RowBox[{"[", "iGroup", "]"}], "]"}], ",", 
                 RowBox[{"ToString", "@", 
                  RowBox[{"shortGroupNames", "[", 
                   RowBox[{"[", "iGroup", "]"}], "]"}]}], ",", 
                 RowBox[{"groupTypes", "[", 
                  RowBox[{"[", "iGroup", "]"}], "]"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"iGroup", ",", 
                 RowBox[{"Length", "@", "groupNames"}]}], "}"}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"formGenericDReplacementRules", "=", 
             RowBox[{
             "getFormGenericDReplacementRules", "/@", "groupTypes"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"formPostGroupTensorRenamingRules", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"getFormPostGroupTensorRenamingRules", "[", 
                RowBox[{
                 RowBox[{"ToString", "@", 
                  RowBox[{"groupNames", "[", 
                   RowBox[{"[", "iGroup", "]"}], "]"}]}], ",", 
                 RowBox[{"ToString", "@", 
                  RowBox[{"shortGroupNames", "[", 
                   RowBox[{"[", "iGroup", "]"}], "]"}]}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"iGroup", ",", 
                 RowBox[{"Length", "@", "groupNames"}]}], "}"}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Initializing", " ", "group", " ", "tensor", " ", "replacement", 
              " ", "rules"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"groupTensorsList", "=", 
             RowBox[{"getGroupTensors", "/@", "groupNames"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"replacementRules", "=", 
             RowBox[{"getGroupTensorRules", "/@", "groups"}]}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Message", "[", 
            RowBox[{"DefineGroupTensors", "::", "badarg"}], "]"}]}], "]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Take", "::", "take"}], ",", 
           RowBox[{"Part", "::", "partw"}], ",", 
           RowBox[{"General", "::", "stop"}]}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesInput", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"replacementRules", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesOutput", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"replacementRules", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesOutputTraced", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"replacementRules", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "3"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"groupTensorReplacementRulesOutputPartiallyTraced", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"replacementRules", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "4"}], "]"}], "]"}], "]"}], "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowGroupTemplates", "[", "]"}], ":=", 
    RowBox[{"TableForm", "[", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"formColorPackageTracingAlgorithms", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], ",", "1"}], "]"}], "]"}], 
             "~~", "\"\<(\>\"", "~~", 
             RowBox[{"formColorPackageTracingAlgorithms", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], ",", "2"}], "]"}], "]"}], 
             "~~", "\"\<)\>\""}], "}"}]}], "]"}], "&"}], ",", 
        "formColorPackageGroupTemplates"}], "]"}], ",", 
      RowBox[{"TableHeadings", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"formColorPackageGroupTemplates", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"formColorPackageExtVars", ",", 
           RowBox[{"{", "\"\<algorithm(header)\>\"", "}"}]}], "]"}]}], 
        "}"}]}], ",", 
      RowBox[{"TableSpacing", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"3", ",", " ", "3"}], "}"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ShowGroupConstants", "[", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "groupNames", "]"}], "===", "0"}], ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{"ShowGroupConstants", "::", "nogroups"}], "]"}], ";"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"TableForm", "[", 
      RowBox[{
       RowBox[{"Flatten", "/@", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"groupTypes", ",", "groupConstantsTable"}], "]"}], ",", 
          "2"}], "]"}]}], ",", 
       RowBox[{"TableSpacing", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "3"}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"TableHeadings", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "<>", "\"\<(\>\"", "<>", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "<>", "\"\<)\>\""}], "&"}], "/@", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"ToString", "/@", 
              RowBox[{"Riffle", "[", 
               RowBox[{"groupNames", ",", "shortGroupNames"}], "]"}]}], ",", 
             "2"}], "]"}]}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "\"\<type\>\"", "}"}], ",", 
            "formColorPackageExtVars"}], "]"}]}], "}"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"5ee3a93a-1616-4dd9-91f4-8b8a849b311b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Extra Variable and Auto Declarations", \
"Subsubsection",ExpressionUUID->"b4fbc2dd-a283-46ed-ba29-22a65ebfb920"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"DefineFormAutoDeclareFunctions", "[", "vars___", "]"}], ":=", 
   RowBox[{"DefineFormAutoDeclareFunctions", "[", 
    RowBox[{"List", "[", "vars", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineFormAutoDeclareFunctions", "[", "vars_List", "]"}], ":=", 
    RowBox[{"formCFunctionAutoDeclareList", "=", 
     RowBox[{"Union", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"ToString", "/@", "vars"}], "]"}], ",", 
       "formCFunctionAutoDeclareListBasic"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSynonymList", "[", 
     RowBox[{"symbols_List", ",", "genericName_String"}], "]"}], ":=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", ",", 
         RowBox[{"Unique", "[", "genericName", "]"}]}], "}"}], "&"}], ",", 
      "symbols"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineExtraVars", "[", "vars___", "]"}], ":=", 
   RowBox[{"DefineExtraVars", "[", 
    RowBox[{"List", "[", "vars", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DefineExtraVars", "[", "vars_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "extraFormVarsListExport", "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "all", " ", "extra", " ", "vars", " ", "are", " ", "replaced", " ", 
        "if", " ", "result", " ", "is", " ", "imported", " ", "back", " ", 
        "to", " ", "Mathematica"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"extraFormVarsList", "=", 
        RowBox[{"getSynonymList", "[", 
         RowBox[{
          RowBox[{"DeleteDuplicates", "[", "vars", "]"}], ",", 
          "extraFormVarPrefix"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"extraFormVarsListInputConversion", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "\[Rule]", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", 
           "extraFormVarsList"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"extraFormVarsListOutputConversion", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "\[Rule]", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "&"}], ",", 
           "extraFormVarsList"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"(*", " ", 
        RowBox[{
        "only", " ", "the", " ", "variables", " ", "internally", " ", "used", 
         " ", "by", " ", "FORM", " ", "are", " ", "replaced", " ", "if", " ", 
         "the", " ", "result", " ", "is", " ", "exported", " ", "to", " ", 
         "file"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"extraFormVarsListExportDeclare", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"ToString", "/@", 
           RowBox[{"extraFormVarsList", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ",", 
          "forbiddenFormVars"}], "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "vars", " ", "that", " ", "have", " ", "to", " ", "be", " ", 
         "declared"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"extraFormVarsListExport", "=", 
        RowBox[{"Select", "[", 
         RowBox[{"extraFormVarsList", ",", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"forbiddenFormVars", ",", 
             RowBox[{"ToString", "[", 
              RowBox[{"First", "[", "#", "]"}], "]"}]}], "]"}], "&"}]}], 
         "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"internally", " ", "used"}], ")"}], " ", "vars", " ", 
         "that", " ", "have", " ", "to", " ", "be", " ", "replaced"}], "*)"}],
        "\[IndentingNewLine]", 
       RowBox[{"extraFormVarsListInputConversionExport", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "\[Rule]", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", 
           "extraFormVarsListExport"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"extraFormVarsListOutputConversionExport", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "extraFormVarsListExport", "]"}], "===", 
           "0"}], ",", "\"\<\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"stringLines", "[", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<id \>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "<>", "\"\<=\>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "<>", "\"\<;\>\""}], 
              "&"}], ",", "extraFormVarsListExport"}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"extraFormVarsList", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AddExtraVars", "[", "vars__", "]"}], ":=", 
   RowBox[{"AddExtraVars", "[", 
    RowBox[{"List", "[", "vars", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddExtraVars", "[", "vars_List", "]"}], ":=", 
    RowBox[{"DefineExtraVars", "[", 
     RowBox[{"Union", "[", 
      RowBox[{
       RowBox[{"extraFormVarsList", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "vars"}], "]"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetExtraVars", "[", "]"}], ":=", 
   RowBox[{"extraFormVarsList", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetExtraVarsSynonyms", "[", "]"}], ":=", "extraFormVarsList"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearExtraVars", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"extraFormVarsList", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extraFormVarsListInputConversion", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"extraFormVarsListOutputConversion", "=", 
       RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"33ba1467-2aa3-4cb3-af27-386c3bf1c2e9"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Defining Combined Lorentz Tensors and Identities", \
"Subsection",ExpressionUUID->"9e343d5b-9a86-47d0-8393-0afd6877bb94"],

Cell[CellGroupData[{

Cell["General Helper Modules", \
"Subsubsection",ExpressionUUID->"a7187441-678a-47ba-93f9-c167727f1d34"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"replaceMomentaAndIndicesInExpression", "[", 
    RowBox[{
    "momentaFrom_List", ",", "indicesFrom_List", ",", "expression_", ",", 
     "momentaToNameStrings_List", ",", "indicesToNameStrings_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "replacementRules", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"replacementRules", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Replace", " ", "the", " ", "provided", " ", "momenta", " ", "and", 
          " ", "indices", " ", "in", " ", "the", " ", 
          RowBox[{"expression", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"momentaFrom", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "\[Rule]", 
            RowBox[{"ToExpression", "[", 
             RowBox[{"momentaToNameStrings", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "@", "momentaFrom"}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"indicesFrom", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "\[Rule]", 
            RowBox[{"ToExpression", "[", 
             RowBox[{"indicesToNameStrings", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "@", "indicesFrom"}]}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"expression", "/.", "replacementRules"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"ec35f4f3-509a-464c-9729-e91b86c7139b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"addWildcardMarkersInString", "[", 
    RowBox[{"wildcardArguments_List", ",", "stringExpression_String", ",", 
     RowBox[{"wildcardMarker_String", ":", "\"\<?\>\""}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "RenamingRules", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Add", " ", "\"\<wildcardMarker\>\"", " ", "after", " ", "the", " ", 
       "arguments", " ", "provided", " ", "every", " ", "time", " ", "they", 
       " ", "occur", " ", "in", " ", "the", " ", 
       RowBox[{"string", "."}]}], "*)"}], 
     RowBox[{
      RowBox[{"RenamingRules", "=", 
       RowBox[{"Reverse", "[", 
        RowBox[{"SortBy", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"wildcardArguments", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{"wildcardArguments", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "<>", "wildcardMarker"}]}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "@", "wildcardArguments"}]}], "}"}]}], "]"}], 
          ",", "Length"}], "]"}], "]"}]}], ";", 
      RowBox[{"Return", "[", 
       RowBox[{"StringReplace", "[", 
        RowBox[{"stringExpression", ",", "RenamingRules"}], "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"94c1508d-d33f-4a8f-a061-8cf23ac9c25f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getFormIdentity", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"lhs_", ",", "rhs_"}], "}"}], ",", 
     RowBox[{"momentaName_String", ":", 
      RowBox[{"prefixListLorentzDirac", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ",", 
     RowBox[{"indicesName_String", ":", 
      RowBox[{"prefixListLorentzDirac", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"getFormIdentity", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"momentumFromExpr", "[", "lhs", "]"}], ",", 
       RowBox[{"lorentzFromExpr", "[", "lhs", "]"}], ",", "lhs", ",", "rhs"}],
       "}"}], ",", "momentaName", ",", "indicesName"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getFormIdentity", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"momenta_List", ",", "indices_List", ",", "lhs_", ",", "rhs_"}],
       "}"}], ",", 
     RowBox[{"momentaName_String", ":", 
      RowBox[{"prefixListLorentzDirac", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ",", 
     RowBox[{"indicesName_String", ":", 
      RowBox[{"prefixListLorentzDirac", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"left", ",", "right", ",", "momentumNames", ",", "indexNames"}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Replace", " ", "the", " ", "momenta", " ", "and", " ", "indices", " ", 
       "provided", " ", "with", " ", "\"\<momentaName\>\"", "i", " ", "and", 
       " ", "\"\<indicesName\>\"", "i"}], " ", "*)"}], "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"momentumNames", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"momentaName", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "@", "momenta"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"indexNames", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"indicesName", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "@", "indices"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"right", "=", 
       RowBox[{"replaceMomentaAndIndicesInExpression", "[", 
        RowBox[{
        "momenta", ",", "indices", ",", "rhs", ",", "momentumNames", ",", 
         "indexNames"}], "]"}]}], ";", 
      RowBox[{"left", "=", 
       RowBox[{"replaceMomentaAndIndicesInExpression", "[", 
        RowBox[{
        "momenta", ",", "indices", ",", "lhs", ",", "momentumNames", ",", 
         "indexNames"}], "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Add", " ", "a", " ", "wildcard", " ", "marker", " ", "\"\<?\>\"", " ",
         "after", " ", "each", " ", "momentum", " ", "and", " ", "index", " ",
         "in", " ", "the", " ", "lhs", " ", "string"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"left", "=", 
       RowBox[{"addWildcardMarkersInString", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{"momentumNames", ",", "indexNames"}], "]"}], ",", 
         RowBox[{"toFormStringLorentz", "[", "left", "]"}], ",", 
         "\"\<?\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Return", " ", "a", " ", "FORM", " ", "string", " ", "identifying", 
        " ", "a", " ", "tensor", " ", "structure", " ", "with", " ", 
        "wildcard", " ", "arguments", " ", "on", " ", "the", " ", "lhs", " ", 
        "with", " ", "an", " ", "expression", " ", "on", " ", "the", " ", 
        RowBox[{"rhs", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"\"\<id \>\"", "<>", "left", "<>", "\"\<=\>\"", "<>", 
        RowBox[{"toFormStringLorentz", "[", "right", "]"}], "<>", 
        "\"\<;\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"b29f97e6-f7db-4487-a152-dfe6f5d869bc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getFormIdentityFromFile", "[", 
    RowBox[{"{", 
     RowBox[{"lhs_", ",", "importPath_String"}], "}"}], "]"}], ":=", 
   RowBox[{"getFormIdentityFromFile", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"momentumFromExpr", "[", "lhs", "]"}], ",", 
      RowBox[{"lorentzFromExpr", "[", "lhs", "]"}], ",", "lhs", ",", 
      "importPath"}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getFormIdentityFromFile", "[", 
    RowBox[{"{", 
     RowBox[{
     "momenta_List", ",", "indices_List", ",", "lhs_", ",", 
      "importPath_String"}], "}"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"short", ",", "identityString", ",", "declarationsString"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Bring", " ", "the", " ", "lhs", " ", "into", " ", "FORM", " ", 
       RowBox[{"format", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"short", "=", 
       RowBox[{"toFormStringLorentz", "[", 
        RowBox[{"replaceMomentaAndIndicesInExpression", "[", 
         RowBox[{"momenta", ",", "indices", ",", "lhs", ",", 
          RowBox[{"ToString", "/@", "momenta"}], ",", 
          RowBox[{"ToString", "/@", "indices"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"short", "=", 
       RowBox[{"addWildcardMarkersInString", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"ToString", "/@", "momenta"}], ",", 
           RowBox[{"ToString", "/@", "indices"}]}], "]"}], ",", "short", ",", 
         "\"\<?\>\""}], "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"Create", " ", "a", " ", "FORM", " ", "identity", " ", 
        RowBox[{"string", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"identityString", "=", 
       RowBox[{
       "\"\<id \>\"", "<>", "short", "<>", "\"\< = \\n\>\"", "<>", 
        "\"\<#include \>\"", "<>", "importPath", "<>", 
        "\"\<\\n;\\n.sort\\n\\n\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Create", " ", "a", " ", "FORM", " ", "string", " ", "declaring", " ", 
        "the", " ", "momenta", " ", "as", " ", "vectors", " ", "and", " ", 
        "indices", " ", "as", " ", 
        RowBox[{"indices", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"declarationsString", "=", 
       RowBox[{"\"\<Vector \>\"", "<>", 
        RowBox[{"stringList", "@", "momenta"}], "<>", "\"\<;\\nIndex \>\"", "<>", 
        RowBox[{"stringList", "@", "indices"}], "<>", "\"\<;\\n\>\""}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"declarationsString", "<>", "identityString"}], "]"}], ";"}]}],
     "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"22510fe7-9314-43e3-8543-f1f969d0cc75"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
   "getIndicesRuleFromCombinedLorentzTensor", "[", "combinedTensor_", "]"}], ":=", 
   RowBox[{
    RowBox[{"barrepl", "[", 
     RowBox[{
      RowBox[{"combinedTensor", "[", 
       RowBox[{"[", "3", "]"}], "]"}], ",", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"combinedTensor", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"combinedTensor", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "\[RuleDelayed]", 
    RowBox[{"Evaluate", "[", 
     RowBox[{"combinedTensor", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "getMomentumRuleFromCombinedLorentzTensor", "[", "combinedTensor_", "]"}], 
   ":=", 
   RowBox[{
    RowBox[{"barrepl", "[", 
     RowBox[{
      RowBox[{"combinedTensor", "[", 
       RowBox[{"[", "3", "]"}], "]"}], ",", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"combinedTensor", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"combinedTensor", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "\[RuleDelayed]", 
    RowBox[{"Evaluate", "[", 
     RowBox[{"combinedTensor", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"395cf8e5-59fc-44ad-af0a-ad30929e63e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"addbarPlus", "[", "s_Symbol", "]"}], ":=", 
   RowBox[{"ToExpression", "[", 
    RowBox[{
     RowBox[{"ToString", "[", "s", "]"}], "<>", "\"\<_Plus\>\""}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"3653e07c-1d2e-46a1-9db9-9695d84531ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"barreplPlus", "[", 
    RowBox[{"s_", ",", "vars_List", ",", "i_Integer"}], "]"}], ":=", 
   RowBox[{"s", "/.", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"i", "\[Equal]", "j"}], ",", 
        RowBox[{
         RowBox[{"vars", "[", 
          RowBox[{"[", "j", "]"}], "]"}], "\[Rule]", 
         RowBox[{"addbarPlus", "[", 
          RowBox[{"vars", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"vars", "[", 
          RowBox[{"[", "j", "]"}], "]"}], "\[Rule]", 
         RowBox[{"addbar", "[", 
          RowBox[{"vars", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "]"}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"Length", "[", "vars", "]"}]}], "}"}]}], "]"}]}]}], 
  ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"eed85f47-c724-4811-9029-65a93ff0c5cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "getCombinedMomentumReplForCombinedTensor", "[", "combinedTensor_", "]"}], 
   ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "ms", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"barreplPlus", "[", 
          RowBox[{
           RowBox[{"combinedTensor", "[", 
            RowBox[{"[", "3", "]"}], "]"}], ",", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"combinedTensor", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"combinedTensor", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "i"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"combinedTensor", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "/.", 
            RowBox[{
             RowBox[{
              RowBox[{"combinedTensor", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", 
              RowBox[{"[", "i", "]"}], "]"}], "\[Rule]", 
             RowBox[{"ms", "[", 
              RowBox[{
               RowBox[{"combinedTensor", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], ")"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"combinedTensor", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "/.", 
      RowBox[{"ms", "\[Rule]", "momentumSum"}]}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"b0db763d-38dd-42f6-841e-64be0ed06a63"]
}, Closed]],

Cell[CellGroupData[{

Cell["Lorentz Tensor identities", \
"Subsubsection",ExpressionUUID->"8b368c9d-b2cd-4afc-8459-8f443f76c60f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"lorentzTensorIdentitiesInputCache", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearLorentzTensorIdentities", "[", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"lorentzTensorIdentitiesInputCache", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"formLorentzTensorIdentities", "=", 
        RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddLorentzTensorIdentity", "[", "identity_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getClosedLorentzIndices", "[", 
           RowBox[{"Last", "[", "identity", "]"}], "]"}], "=!=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"AddLorentzTensorIdentity", "::", "closedindices"}], "]"}],
           ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"spinorFromExpr", "[", 
           RowBox[{"Last", "[", "identity", "]"}], "]"}], "=!=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"AddLorentzTensorIdentity", "::", "diracindices"}], "]"}], 
          ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"lorentzTensorIdentitiesInputCache", ",", "identity"}], "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"formLorentzTensorIdentities", ",", 
         RowBox[{"getFormIdentity", "[", 
          RowBox[{"convertInput", "[", "identity", "]"}], "]"}]}], "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineLorentzTensorIdentities", "[", "identities_List", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ClearLorentzTensorIdentities", "[", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"AddLorentzTensorIdentity", "[", "identity", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"identity", ",", "identities"}], "}"}]}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"efd4a9f9-274c-427e-b3d6-009647b4df12"]
}, Closed]],

Cell[CellGroupData[{

Cell["Combined Lorentz Tensors", \
"Subsubsection",ExpressionUUID->"7e0a2dfb-1b3d-42a1-a41a-dcecd6bf7899"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"combinedLorentzTensorInputCache", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearCombinedLorentzTensors", "[", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"combinedTensorNames", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"combinedTensorIdentities", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"combinedTensorSquaresReplRules", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"combinedLorentzTensorInputCache", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"lorentzFromExprRules", "=", "basicLorentzFromExprRules"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"momentumFromExprRules", "=", "basicMomentumFromExprRules"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"combinedMomentumRepl", "=", "basicCombinedMomentumRepl"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCombinedLorentzTensor", "[", "combinedTensorArg_List", "]"}], 
    ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"combinedTensor", ",", "combinedTensorName", ",", 
        RowBox[{"explicitTensor", "=", 
         RowBox[{"convertInput", "[", 
          RowBox[{"Last", "[", "combinedTensorArg", "]"}], "]"}]}], ",", 
        RowBox[{
        "tmpLorentzTensorIdentitiesInputCache", "=", 
         "lorentzTensorIdentitiesInputCache"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"lorentzTensorReplacementRulesInput", "===", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"AddCombinedLorentzTensor", "::", "missingnotation"}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getClosedLorentzIndices", "[", "explicitTensor", "]"}], "=!=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"AddCombinedLorentzTensor", "::", "closedindices"}], "]"}],
           ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"spinorFromExpr", "[", "explicitTensor", "]"}], "=!=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"AddCombinedLorentzTensor", "::", "diracindices"}], "]"}], 
          ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Or", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "#", "]"}], "===", "Plus"}], "&"}], "/@", 
            RowBox[{"momentumFromExpr", "[", "explicitTensor", "]"}]}], 
           ")"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"AddCombinedLorentzTensor", "::", "momentumsums"}], "]"}], 
          ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"checkAllTensorSums", "[", "explicitTensor", "]"}], "===", 
          "False"}], ",", 
         RowBox[{
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
          "combinedLorentzTensorInputCache", ",", "combinedTensorArg"}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"AddCombinedLorentzTensor", "::", "duplicate"}], "]"}], 
          ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"combinedTensor", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"momenta", " ", "list"}], ",", " ", 
           RowBox[{"index", " ", "list"}], ",", " ", "abbreviation", ",", " ", 
           RowBox[{"explicit", " ", "tensor"}]}]}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"combinedTensor", "=", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"Length", "[", "combinedTensorArg", "]"}], ",", 
          "\[IndentingNewLine]", "2", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"momentumFromExpr", "[", "explicitTensor", "]"}], ",", 
              RowBox[{"lorentzFromExpr", "[", "explicitTensor", "]"}]}], 
             "}"}], ",", "combinedTensorArg"}], "]"}], ",", 
          "\[IndentingNewLine]", "3", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"momentumFromExpr", "[", "explicitTensor", "]"}], "}"}], 
            ",", "combinedTensorArg"}], "]"}], ",", "\[IndentingNewLine]", 
          "4", ",", "combinedTensorArg", ",", "\[IndentingNewLine]", "_", ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"AddCombinedLorentzTensor", "::", "badarg"}], "]"}], ";", 
           
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"combinedTensorName", "=", 
        RowBox[{"Head", "[", 
         RowBox[{"combinedTensor", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"combinedLorentzTensorInputCache", ",", "combinedTensorArg"}],
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"combinedTensorNames", ",", "combinedTensorName"}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"lorentzTensors", ",", 
         RowBox[{"combinedTensorName", "[", "___", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"lorentzFromExprRules", ",", 
         RowBox[{
         "getIndicesRuleFromCombinedLorentzTensor", "[", "combinedTensor", 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"momentumFromExprRules", ",", 
         RowBox[{
         "getMomentumRuleFromCombinedLorentzTensor", "[", "combinedTensor", 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"combinedMomentumRepl", ",", "rule"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"rule", ",", 
           RowBox[{
           "getCombinedMomentumReplForCombinedTensor", "[", "combinedTensor", 
            "]"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "PrependTo", " ", "is", " ", "used", " ", "here", " ", "since", " ", 
         "explicit", " ", "expressions", " ", "must", " ", "be", " ", 
         "inserted", " ", "in", " ", "reverse", " ", "order", " ", "if", " ", 
         "they", " ", "depend", " ", "on", " ", "each", " ", 
         RowBox[{"other", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"PrependTo", "[", 
        RowBox[{"combinedTensorIdentities", ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"Last", "[", "combinedTensor", "]"}], "]"}], "=!=", 
            "String"}], ",", "\[IndentingNewLine]", 
           RowBox[{"getFormIdentity", "[", 
            RowBox[{"convertInput", "[", "combinedTensor", "]"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"getFormIdentityFromFile", "[", "combinedTensor", "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"ClearLorentzTensorIdentities", "[", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"Last", "[", "combinedTensor", "]"}], "]"}], "=!=", 
          "String"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"combinedTensorSquaresReplRules", ",", 
            RowBox[{
             RowBox[{"barrepl", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"combinedTensor", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "^", "2"}], ",", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Take", "[", 
                 RowBox[{"combinedTensor", ",", "2"}], "]"}]}]}], "]"}], 
             "\[RuleDelayed]", 
             RowBox[{"Evaluate", "[", 
              RowBox[{"convertInput", "[", 
               RowBox[{"FormTrace", "[", 
                RowBox[{"explicitTensor", "^", "2"}], "]"}], "]"}], "]"}]}]}],
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
       "DefineLorentzTensorIdentities", "[", 
        "tmpLorentzTensorIdentitiesInputCache", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DefineCombinedLorentzTensors", "[", "combinedTensors_List", "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ClearCombinedLorentzTensors", "[", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"AddCombinedLorentzTensor", "[", "combinedTensor", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"combinedTensor", ",", "combinedTensors"}], "}"}]}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"428a74d8-5cf8-449f-b0ec-cc1bd065a355"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Conversion Functions", \
"Section",ExpressionUUID->"a55ecdc5-acb9-460b-94da-0ba84a5bf9a7"],

Cell[CellGroupData[{

Cell["Input", "Subsection",
 CellChangeTimes->{{3.6471051765203867`*^9, 
  3.647105177154538*^9}},ExpressionUUID->"dd3a4935-8c4e-443e-bb1c-\
dcb5309221b9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"isTensor", "[", "expr_", "]"}], ":=", 
   RowBox[{"Or", "@@", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Not", "[", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"Alternatives", "@@", "lorentzTensors"}]}], "]"}], "]"}], 
       "}"}], ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"Alternatives", "@@", "#"}]}], "]"}], "]"}], "&"}], ",", 
        "groupTensorsList"}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeSquaredTensorSums", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"Power", "[", 
        RowBox[{"a_Plus", ",", 
         RowBox[{"n_", "/;", 
          RowBox[{"n", "\[NotEqual]", "2"}]}]}], "]"}], "\[RuleDelayed]", 
       RowBox[{"pow", "[", 
        RowBox[{"a", ",", "n"}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"Power", "[", 
        RowBox[{"a_Plus", ",", "2"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isTensor", "[", "a", "]"}], ",", 
         RowBox[{"Expand", "[", 
          RowBox[{"a", "^", "2"}], "]"}], ",", 
         RowBox[{"pow", "[", 
          RowBox[{"a", ",", "2"}], "]"}]}], "]"}]}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"removeSquaredTensorsRulesT0", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FTxvec", "[", 
         RowBox[{"p_", ",", "mu_"}], "]"}], "^", "2"}], "/;", 
       RowBox[{"Not", "[", 
        RowBox[{"IntegerQ", "[", "mu", "]"}], "]"}]}], "\[RuleDelayed]", 
      RowBox[{"FTxsp", "[", 
       RowBox[{"p", ",", "p"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxdeltaLorentz", "[", 
       RowBox[{"mu_", ",", "mu_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"IntegerQ", "[", "mu", "]"}], ",", "1", ",", 
        RowBox[{"First", "[", "lorentzDimensions", "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FTxdeltaLorentz", "[", 
         RowBox[{"mu_", ",", "nu_"}], "]"}], "^", "2"}], "/;", 
       RowBox[{"mu", "=!=", "nu"}]}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerQ", "[", "mu", "]"}], "&&", 
         RowBox[{"IntegerQ", "[", "nu", "]"}]}], ",", "0", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"IntegerQ", "[", "mu", "]"}], "||", 
           RowBox[{"IntegerQ", "[", "nu", "]"}]}], ",", "1", ",", 
          RowBox[{"First", "[", "lorentzDimensions", "]"}]}], "]"}]}], 
       "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxepsLorentz", "[", 
        RowBox[{"mu_", ",", "nu_", ",", "rho___"}], "]"}], "^", "2"}], 
      "\[RuleDelayed]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"FTxepsLorentz", "[", 
         RowBox[{"nu", ",", "mu", ",", "rho"}], "]"}]}], "*", 
       RowBox[{"FTxepsLorentz", "[", 
        RowBox[{"mu", ",", "nu", ",", "rho"}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxdeltaDirac", "[", 
       RowBox[{"i_", ",", "i_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"IntegerQ", "[", "i", "]"}], ",", "1", ",", 
        RowBox[{"Last", "[", "lorentzDimensions", "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FTxdeltaDirac", "[", 
         RowBox[{"i_", ",", "j_"}], "]"}], "^", "2"}], "/;", 
       RowBox[{"i", "=!=", "j"}]}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerQ", "[", "i", "]"}], "&&", 
         RowBox[{"IntegerQ", "[", "j", "]"}]}], ",", "0", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"IntegerQ", "[", "i", "]"}], "||", 
           RowBox[{"IntegerQ", "[", "j", "]"}]}], ",", "1", ",", 
          RowBox[{"Last", "[", "lorentzDimensions", "]"}]}], "]"}]}], "]"}]}],
      ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxdeltaAdj", "[", 
       RowBox[{"group_", ",", "a_", ",", "a_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"IntegerQ", "[", "a", "]"}], ",", "1", ",", 
        RowBox[{"groupConstantsTable", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"FirstPosition", "[", 
             RowBox[{"groupNames", ",", "group"}], "]"}], "]"}], ",", "3"}], 
          "]"}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FTxdeltaAdj", "[", 
         RowBox[{"group_", ",", "a_", ",", "b_"}], "]"}], "^", "2"}], "/;", 
       RowBox[{"a", "=!=", "b"}]}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerQ", "[", "a", "]"}], "&&", 
         RowBox[{"IntegerQ", "[", "b", "]"}]}], ",", "0", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"IntegerQ", "[", "a", "]"}], "||", 
           RowBox[{"IntegerQ", "[", "b", "]"}]}], ",", "1", ",", 
          RowBox[{"groupConstantsTable", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"First", "[", 
              RowBox[{"FirstPosition", "[", 
               RowBox[{"groupNames", ",", "group"}], "]"}], "]"}], ",", "3"}],
             "]"}], "]"}]}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FTxdeltaFund", "[", 
       RowBox[{"group_", ",", "a_", ",", "a_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"IntegerQ", "[", "a", "]"}], ",", "1", ",", 
        RowBox[{"groupConstantsTable", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"FirstPosition", "[", 
             RowBox[{"groupNames", ",", "group"}], "]"}], "]"}], ",", "1"}], 
          "]"}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FTxdeltaFund", "[", 
         RowBox[{"group_", ",", "a_", ",", "b_"}], "]"}], "^", "2"}], "/;", 
       RowBox[{"a", "=!=", "b"}]}], "\[RuleDelayed]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerQ", "[", "a", "]"}], "&&", 
         RowBox[{"IntegerQ", "[", "b", "]"}]}], ",", "0", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"IntegerQ", "[", "a", "]"}], "||", 
           RowBox[{"IntegerQ", "[", "b", "]"}]}], ",", "1", ",", 
          RowBox[{"groupConstantsTable", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"First", "[", 
              RowBox[{"FirstPosition", "[", 
               RowBox[{"groupNames", ",", "group"}], "]"}], "]"}], ",", "1"}],
             "]"}], "]"}]}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxepsAdj", "[", 
        RowBox[{"group_", ",", "a_", ",", "b_", ",", "cc___"}], "]"}], "^", 
       "2"}], "\[RuleDelayed]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"FTxepsAdj", "[", 
         RowBox[{"group", ",", "b", ",", "a", ",", "cc"}], "]"}]}], "*", 
       RowBox[{"FTxepsAdj", "[", 
        RowBox[{"group", ",", "a", ",", "b", ",", "cc"}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxepsFund", "[", 
        RowBox[{"group_", ",", "a_", ",", "b_", ",", "cc___"}], "]"}], "^", 
       "2"}], "\[RuleDelayed]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"FTxepsFund", "[", 
         RowBox[{"group", ",", "b", ",", "a", ",", "cc"}], "]"}]}], "*", 
       RowBox[{"FTxepsFund", "[", 
        RowBox[{"group", ",", "a", ",", "b", ",", "cc"}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"FTxF", "[", 
        RowBox[{"group_", ",", "a_", ",", "b_", ",", "c_"}], "]"}], "^", 
       "2"}], "\[RuleDelayed]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"FTxF", "[", 
         RowBox[{"group", ",", "b", ",", "a", ",", "c"}], "]"}]}], "*", 
       RowBox[{"FTxF", "[", 
        RowBox[{"group", ",", "a", ",", "b", ",", "c"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"removeSquaredTensorsRulesT", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"FTxvecs", "[", 
        RowBox[{"p_", ",", "mu_"}], "]"}], "^", "2"}], "/;", 
      RowBox[{"Not", "[", 
       RowBox[{"IntegerQ", "[", "mu", "]"}], "]"}]}], "\[RuleDelayed]", 
     RowBox[{"FTxsps", "[", 
      RowBox[{"p", ",", "p"}], "]"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeSquaredTensorsRules", "=", "removeSquaredTensorsRulesT0"}], 
   ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "squared", " ", "sums", " ", "must", " ", "be", " ", "removed", " ", "in", 
    " ", "advance"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeSquaredTensors", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"expr", "/.", "removeSquaredTensorSums"}], "/.", 
     "removeSquaredTensorsRules"}], "/.", 
    "combinedTensorSquaresReplRules"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"42dc74d1-fb5a-4828-b7cc-82c3e6695d67"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "implements", " ", "support", " ", "for", " ", "shorthand", " ", 
    "notation", " ", "for", " ", "gamma", " ", "matrices"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"expandGammaMatrices", "[", 
     RowBox[{"lor_", ",", "spi___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"lorList", "=", "lor"}], 
        RowBox[{"(*", 
         RowBox[{"/.", "lorentzTensorReplacementRulesInput"}], "*)"}], ",", 
        RowBox[{"spiList", "=", 
         RowBox[{"List", "[", "spi", "]"}]}], ",", "res"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "spiList", "]"}], "===", "0"}], ",", 
         RowBox[{"spiList", "=", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"spiDummy", "=", 
              RowBox[{"Unique", "[", "spiDummyPrefix", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"spiDummy", ",", "spiDummy"}], "}"}]}], "]"}]}]}], "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"FTxgamma", "@@", 
         RowBox[{"Join", "[", 
          RowBox[{"lorList", ",", "spiList"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"expand", " ", "momenta"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"res", "//.", 
         RowBox[{
          RowBox[{"FTxgamma", "[", 
           RowBox[{"a___", ",", 
            RowBox[{"FTxvec", "[", "p_", "]"}], ",", "b___"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"lorDummy", "=", 
              RowBox[{"Unique", "[", "lorDummyPrefix", "]"}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"FTxvec", "[", 
              RowBox[{"p", ",", "lorDummy"}], "]"}], 
             RowBox[{"FTxgamma", "[", 
              RowBox[{"a", ",", "lorDummy", ",", "b"}], "]"}]}]}], 
           "]"}]}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"finiteTenabled", ",", 
         RowBox[{
          RowBox[{"res", "=", 
           RowBox[{"res", "//.", 
            RowBox[{
             RowBox[{"FTxgamma", "[", 
              RowBox[{"a___", ",", 
               RowBox[{"FTxvecs", "[", "p_", "]"}], ",", "b___"}], "]"}], 
             "\[RuleDelayed]", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"lorDummy", "=", 
                 RowBox[{"Unique", "[", "lorDummyPrefix", "]"}]}], "}"}], ",", 
               RowBox[{
                RowBox[{"FTxvecs", "[", 
                 RowBox[{"p", ",", "lorDummy"}], "]"}], 
                RowBox[{"FTxgamma", "[", 
                 RowBox[{"a", ",", "lorDummy", ",", "b"}], "]"}]}]}], 
              "]"}]}]}]}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"expand", " ", "gamma", " ", "matrices"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"res", "//.", 
         RowBox[{
          RowBox[{"FTxgamma", "[", 
           RowBox[{"a___", ",", "b_", ",", "c_", ",", "i_", ",", "j_"}], 
           "]"}], "\[RuleDelayed]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"spiDummy", "=", 
              RowBox[{"Unique", "[", "spiDummyPrefix", "]"}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"FTxgamma", "[", 
              RowBox[{"a", ",", "b", ",", "i", ",", "spiDummy"}], "]"}], 
             RowBox[{"FTxgamma", "[", 
              RowBox[{"c", ",", "spiDummy", ",", "j"}], "]"}]}]}], 
           "]"}]}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "convert", " ", "gamma", " ", "5", " ", "matrices", " ", "to", " ", 
         "FTxgamma5", " ", "symbols"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"res", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"FTxgamma", "[", 
             RowBox[{"5", ",", "spi1_", ",", "spi2_"}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{"FTxgamma5", "[", 
             RowBox[{"spi1", ",", "spi2"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"FTxgamma", "[", 
             RowBox[{"FTxgamma5", ",", "spi1_", ",", "spi2_"}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{"FTxgamma5", "[", 
             RowBox[{"spi1", ",", "spi2"}], "]"}]}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "res", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"6ceb7e14-cea2-4901-8874-37a8b24eec87"],

Cell[BoxData[
 RowBox[{
  RowBox[{"convertInput", "[", 
   RowBox[{"input_", ",", 
    RowBox[{"replaceExtraAllVars_", ":", "True"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"res", ",", 
      RowBox[{"check", "=", "True"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"lorentzTensorReplacementRulesInput", "===", 
         RowBox[{"{", "}"}]}], "&&", 
        RowBox[{"groupTensorReplacementRulesInput", "===", 
         RowBox[{"{", "}"}]}]}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"convertInput", "::", "missingnotation"}], "]"}], ";", 
        RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{"removeSquaredTensors", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"input", "//.", "lorentzTensorReplacementRulesInput"}], "/.",
          "groupTensorReplacementRulesInput"}], "/.", 
        RowBox[{"If", "[", 
         RowBox[{
         "replaceExtraAllVars", ",", "extraFormVarsListInputConversion", ",", 
          "extraFormVarsListInputConversionExport"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"res", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"FTxgamma", "[", 
             RowBox[{
              RowBox[{"FTxvec", "[", "p_", "]"}], ",", "spi___"}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{"FTxgamma", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"FTxvec", "[", "p", "]"}], "}"}], ",", "spi"}], 
             "]"}]}], ",", 
           RowBox[{
            RowBox[{"FTxgamma", "[", 
             RowBox[{
              RowBox[{"FTxvecs", "[", "p_", "]"}], ",", "spi___"}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{"FTxgamma", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"FTxvecs", "[", "p", "]"}], "}"}], ",", "spi"}], 
             "]"}]}]}], "}"}]}], ")"}], "/.", 
       RowBox[{
        RowBox[{"FTxgamma", "[", 
         RowBox[{"lor_List", ",", "spi___"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"expandGammaMatrices", "[", 
         RowBox[{"lor", ",", "spi"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"checkTensorSums", "||", "debuggingMode"}], ",", 
       RowBox[{
        RowBox[{"check", "=", 
         RowBox[{"checkAllTensorSums", "[", "res", "]"}]}], ";"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"If", "[", 
       RowBox[{"check", ",", 
        RowBox[{"res", "/.", 
         RowBox[{
          RowBox[{"Complex", "[", 
           RowBox[{"re_", ",", "im_"}], "]"}], "\[RuleDelayed]", 
          RowBox[{"re", "+", 
           RowBox[{"FTxI", " ", "im"}]}]}]}], ",", "Null"}], "]"}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"cbae806d-9b29-4646-8b35-92ad9279e235"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ConvertInput", "[", 
    RowBox[{"input_", ",", 
     RowBox[{"replaceExtraAllVars_", ":", "False"}]}], "]"}], ":=", 
   RowBox[{"convertInput", "[", 
    RowBox[{"input", ",", "replaceExtraAllVars"}], "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"7bbe5afd-30de-4335-8d8c-0f4b7ff95b21"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"enableFiniteT", "[", "yesno_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"yesno", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"basicLorentzFromExprRules", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
           "basicLorentzFromExprRulesT0", ",", "basicLorentzFromExprRulesT"}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"lorentzFromExprRules", "=", 
          RowBox[{"Union", "[", 
           RowBox[{
           "lorentzFromExprRules", ",", "basicLorentzFromExprRulesT"}], 
           "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "basicLorentzFromExprRules", "=", "basicLorentzFromExprRulesT0"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"lorentzFromExprRules", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{
           "lorentzFromExprRules", ",", "basicLorentzFromExprRulesT"}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"yesno", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"basicMomentumFromExprRules", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
           "basicMomentumFromExprRulesT0", ",", 
            "basicMomentumFromExprRulesT"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"momentumFromExprRules", "=", 
          RowBox[{"Union", "[", 
           RowBox[{
           "momentumFromExprRules", ",", "basicMomentumFromExprRulesT"}], 
           "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "basicMomentumFromExprRules", "=", "basicMomentumFromExprRulesT0"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"momentumFromExprRules", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{
           "momentumFromExprRules", ",", "basicMomentumFromExprRulesT"}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"yesno", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"basicLorentzTensors", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"basicLorentzTensorsT0", ",", "basicLorentzTensorsT"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"lorentzTensors", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"lorentzTensors", ",", "basicLorentzTensorsT"}], "]"}]}], 
         ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"basicLorentzTensors", "=", "basicLorentzTensorsT0"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"lorentzTensors", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"lorentzTensors", ",", "basicLorentzTensorsT"}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"yesno", ",", "\[IndentingNewLine]", 
        RowBox[{"removeSquaredTensorsRules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
          "removeSquaredTensorsRulesT0", ",", "removeSquaredTensorsRulesT"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "removeSquaredTensorsRules", "=", "removeSquaredTensorsRulesT0"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"yesno", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"basicCombinedMomentumRepl", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
           "basicCombinedMomentumReplT0", ",", "basicCombinedMomentumReplT"}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"combinedMomentumRepl", "=", 
          RowBox[{"Union", "[", 
           RowBox[{
           "combinedMomentumRepl", ",", "basicCombinedMomentumReplT"}], 
           "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "basicCombinedMomentumRepl", "=", "basicCombinedMomentumReplT0"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"combinedMomentumRepl", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{
           "combinedMomentumRepl", ",", "basicCombinedMomentumReplT"}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"finiteTenabled", "=", "yesno"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "finiteTenabled", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"b58c930c-5c7a-47e0-91b7-7c6a6f0a71b8"]
}, Closed]],

Cell[CellGroupData[{

Cell["Output", \
"Subsection",ExpressionUUID->"fe861779-28e7-4e1d-b50e-8a13c1c1680f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "FORM", " ", "names", " ", "dummies", " ", "on", " ", "a", " ", "term", 
     " ", "by", " ", "term", " ", 
     RowBox[{"basis", ".", " ", "Thus"}]}], ",", " ", 
    RowBox[{
    "the", " ", "same", " ", "dummy", " ", "names", " ", "can", " ", "be", 
     " ", "used", " ", "for", " ", "different", " ", "index", " ", "types"}], 
    ",", " ", 
    RowBox[{"which", " ", "is", " ", "a", " ", "problem", " ", "for", " ", 
     RowBox[{"FormTracer", ".", " ", "Here"}], " ", "we", " ", "rename", " ", 
     "the", " ", "dummy", " ", "indices", " ", "to", " ", "solve", " ", 
     "that", " ", 
     RowBox[{"problem", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"getDummy", "[", 
     RowBox[{"group_", ",", "tempDummy_", ",", "typePrefix_"}], "]"}], ":=", 
    RowBox[{"ToExpression", "[", 
     RowBox[{"typePrefix", "<>", 
      RowBox[{"ToString", "[", "group", "]"}], "<>", "\"\<Dummy\>\"", "<>", 
      RowBox[{"ToString", "[", "tempDummy", "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getAdjDummy", "[", 
     RowBox[{"group_", ",", "tempDummy_"}], "]"}], ":=", 
    RowBox[{"getDummy", "[", 
     RowBox[{"group", ",", "tempDummy", ",", "adjGroupDummyPrefix"}], "]"}]}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getFundDummy", "[", 
     RowBox[{"group_", ",", "tempDummy_"}], "]"}], ":=", 
    RowBox[{"getDummy", "[", 
     RowBox[{"group", ",", "tempDummy", ",", "fundGroupDummyPrefix"}], 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getLorDummy", "[", "tempDummy_", "]"}], ":=", 
    RowBox[{"ToExpression", "[", 
     RowBox[{"lorDummyPrefixFORM", "<>", 
      RowBox[{"ToString", "[", "tempDummy", "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getSpiDummy", "[", "tempDummy_", "]"}], ":=", 
    RowBox[{"ToExpression", "[", 
     RowBox[{"spiDummyPrefixFORM", "<>", 
      RowBox[{"ToString", "[", "tempDummy", "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"groupDummyReplacementFORM", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Global`FTxdeltaAdj", "[", 
         RowBox[{"group_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "a_", "]"}], ",", "b_"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaAdj", "[", 
         RowBox[{"group", ",", 
          RowBox[{"getAdjDummy", "[", 
           RowBox[{"group", ",", "a"}], "]"}], ",", "b"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxdeltaAdj", "[", 
         RowBox[{"group_", ",", "a_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "b_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaAdj", "[", 
         RowBox[{"group", ",", "a", ",", 
          RowBox[{"getAdjDummy", "[", 
           RowBox[{"group", ",", "b"}], "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxdeltaFund", "[", 
         RowBox[{"group_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "i_", "]"}], ",", "j_"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaFund", "[", 
         RowBox[{"group", ",", 
          RowBox[{"getFundDummy", "[", 
           RowBox[{"group", ",", "i"}], "]"}], ",", "j"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxdeltaFund", "[", 
         RowBox[{"group_", ",", "i_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "j_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaFund", "[", 
         RowBox[{"group", ",", "i", ",", 
          RowBox[{"getFundDummy", "[", 
           RowBox[{"group", ",", "j"}], "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxF", "[", 
         RowBox[{"group_", ",", "a___", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "b_", "]"}], ",", "c___"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxF", "[", 
         RowBox[{"group", ",", "a", ",", 
          RowBox[{"getAdjDummy", "[", 
           RowBox[{"group", ",", "b"}], "]"}], ",", "c"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxT", "[", 
         RowBox[{"group_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "a_", "]"}], ",", "i_", ",", 
          "j_"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxT", "[", 
         RowBox[{"group", ",", 
          RowBox[{"getAdjDummy", "[", 
           RowBox[{"group", ",", "a"}], "]"}], ",", "i", ",", "j"}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxT", "[", 
         RowBox[{"group_", ",", "a_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "i_", "]"}], ",", "j_"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxT", "[", 
         RowBox[{"group", ",", "a", ",", 
          RowBox[{"getFundDummy", "[", 
           RowBox[{"group", ",", "i"}], "]"}], ",", "j"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxT", "[", 
         RowBox[{"group_", ",", "a_", ",", "i_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "j_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxT", "[", 
         RowBox[{"group", ",", "a", ",", "i", ",", 
          RowBox[{"getFundDummy", "[", 
           RowBox[{"group", ",", "j"}], "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxepsAdj", "[", 
         RowBox[{"group_", ",", "a___", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "b_", "]"}], ",", "c___"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxepsAdj", "[", 
         RowBox[{"group", ",", "a", ",", 
          RowBox[{"getAdjDummy", "[", 
           RowBox[{"group", ",", "b"}], "]"}], ",", "c"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxepsFund", "[", 
         RowBox[{"group_", ",", "i___", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "j_", "]"}], ",", "k___"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxepsFund", "[", 
         RowBox[{"group", ",", "i", ",", 
          RowBox[{"getFundDummy", "[", 
           RowBox[{"group", ",", "j"}], "]"}], ",", "k"}], "]"}]}]}], 
      "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lorentzDummyReplacementFORM", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Global`FTxdeltaLorentz", "[", 
         RowBox[{
          RowBox[{"tempPartialTraceDummy", "[", "mu_", "]"}], ",", "nu_"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaLorentz", "[", 
         RowBox[{
          RowBox[{"getLorDummy", "[", "mu", "]"}], ",", "nu"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxdeltaLorentz", "[", 
         RowBox[{"mu_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "nu_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaLorentz", "[", 
         RowBox[{"mu", ",", 
          RowBox[{"getLorDummy", "[", "nu", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxdeltaDirac", "[", 
         RowBox[{
          RowBox[{"tempPartialTraceDummy", "[", "i_", "]"}], ",", "j_"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaDirac", "[", 
         RowBox[{
          RowBox[{"getSpiDummy", "[", "i", "]"}], ",", "j"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxdeltaDirac", "[", 
         RowBox[{"i_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "j_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxdeltaDirac", "[", 
         RowBox[{"i", ",", 
          RowBox[{"getSpiDummy", "[", "j", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxvec", "[", 
         RowBox[{"p_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "mu_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxvec", "[", 
         RowBox[{"p", ",", 
          RowBox[{"getLorDummy", "[", "mu", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxvecs", "[", 
         RowBox[{"p_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "mu_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxvecs", "[", 
         RowBox[{"p", ",", 
          RowBox[{"getLorDummy", "[", "mu", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{
          RowBox[{"tempPartialTraceDummy", "[", "mu_", "]"}], ",", "i_", ",", 
          "j_"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{
          RowBox[{"getLorDummy", "[", "mu", "]"}], ",", "i", ",", "j"}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"mu___", ",", 
            RowBox[{"tempPartialTraceDummy", "[", "nu_", "]"}], ",", 
            "rho___"}], "}"}], ",", "i_", ",", "j_"}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"mu", ",", 
            RowBox[{"getLorDummy", "[", "nu", "]"}], ",", "rho"}], "}"}], ",",
           "i", ",", "j"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{"mu_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "i_", "]"}], ",", "j_"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{"mu", ",", 
          RowBox[{"getSpiDummy", "[", "i", "]"}], ",", "j"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{"mu_", ",", "i_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "j_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxgamma", "[", 
         RowBox[{"mu", ",", "i", ",", 
          RowBox[{"getSpiDummy", "[", "j", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxgamma5", "[", 
         RowBox[{
          RowBox[{"tempPartialTraceDummy", "[", "i_", "]"}], ",", "j_"}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxgamma5", "[", 
         RowBox[{
          RowBox[{"getSpiDummy", "[", "i", "]"}], ",", "j"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxgamma5", "[", 
         RowBox[{"i_", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "j_", "]"}]}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"Global`FTxgamma5", "[", 
         RowBox[{"i", ",", 
          RowBox[{"getSpiDummy", "[", "j", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Global`FTxepsLorentz", "[", 
         RowBox[{"mu___", ",", 
          RowBox[{"tempPartialTraceDummy", "[", "nu_", "]"}], ",", "rho___"}],
          "]"}], "\[RuleDelayed]", 
        RowBox[{"Global`FTxepsLorentz", "[", 
         RowBox[{"mu", ",", 
          RowBox[{"getLorDummy", "[", "nu", "]"}], ",", "rho"}], "]"}]}]}], 
      "\[IndentingNewLine]", "}"}]}], ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"df58ef74-f436-4abc-be4c-a26867f97134"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"createOutputReplacementList", "[", "repl_List", "]"}], ":=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Join", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ">", "0"}], ",", 
           RowBox[{"generateReplList", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "repl"}], "]"}], "]"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"convertOutput", "[", 
    RowBox[{"output_", ",", 
     RowBox[{"repl_List", ":", 
      RowBox[{"{", "}"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"output", "/.", 
         RowBox[{"createOutputReplacementList", "[", "repl", "]"}]}], "/.", 
        "lorentzTensorReplacementRulesOutput"}], "/.", 
       "groupTensorReplacementRulesOutput"}], "/.", 
      "extraFormVarsListOutputConversion"}], "/.", 
     RowBox[{
      RowBox[{"pow", "[", 
       RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
      RowBox[{"x", "^", "y"}]}]}], "/.", 
    RowBox[{"FTxI", "\[Rule]", "I"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"convertTracedOutput", "[", 
    RowBox[{"output_", ",", 
     RowBox[{"repl_List", ":", 
      RowBox[{"{", "}"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"output", "/.", 
        RowBox[{"createOutputReplacementList", "[", "repl", "]"}]}], "/.", 
       "lorentzTensorReplacementRulesOutputTraced"}], "/.", 
      "groupTensorReplacementRulesOutputTraced"}], "/.", 
     "extraFormVarsListOutputConversion"}], "/.", 
    RowBox[{
     RowBox[{"Global`pow", "[", 
      RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"x", "^", "y"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"convertPartiallyTracedOutput", "[", 
    RowBox[{"output_", ",", 
     RowBox[{"repl_List", ":", 
      RowBox[{"{", "}"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"output", "//.", "groupDummyReplacementFORM"}], "//.", 
         "lorentzDummyReplacementFORM"}], "/.", 
        RowBox[{"createOutputReplacementList", "[", "repl", "]"}]}], "//.", 
       "lorentzTensorReplacementRulesOutputPartiallyTraced"}], "/.", 
      "groupTensorReplacementRulesOutputPartiallyTraced"}], "/.", 
     "extraFormVarsListOutputConversion"}], "/.", 
    RowBox[{
     RowBox[{"Global`pow", "[", 
      RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
     RowBox[{"x", "^", "y"}]}]}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"52a2f00f-f969-4ee4-8891-3f3921892ca2"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Index Handling", \
"Section",ExpressionUUID->"6b84434b-1288-449f-9e86-c91ee4ec88b1"],

Cell[CellGroupData[{

Cell["Get (open/closed) Indices", \
"Subsection",ExpressionUUID->"084dd05d-53e8-4fc6-a8b1-0260abc2488c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "extracts", " ", "variables", " ", "from", " ", "expression", " ", "from", 
    " ", "rules"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"variablesFromExprRules", "[", 
      RowBox[{"expr_", ",", "rules_List"}], "]"}], ":=", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", "#", ",", "Infinity"}], "]"}], 
            "&"}], ",", "rules"}], "]"}], "//", "Flatten"}], "//", 
        "DeleteDuplicates"}], ",", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"NumericQ", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"group", " ", "indices", " ", "from", " ", "expr"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getFundGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"variablesFromExprRules", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"fundIndicesFromExprRules", "[", "group", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getAdjGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"variablesFromExprRules", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"adjIndicesFromExprRules", "[", "group", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Lorentz", " ", "indices", " ", "from", " ", "expr"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"lorentzFromExpr", "[", "expr_", "]"}], ":=", 
     RowBox[{"variablesFromExprRules", "[", 
      RowBox[{"expr", ",", "lorentzFromExprRules"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Dirac", " ", "indices", " ", "from", " ", "expr"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"spinorFromExpr", "[", "expr_", "]"}], ":=", 
     RowBox[{"variablesFromExprRules", "[", 
      RowBox[{"expr", ",", "spinorFromExprRules"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "private", " ", "open", " ", "indices", " ", "extraction", " ", 
     "functions"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr_List", ",", "indicesFromExprRules_List"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"filteredExpr", ",", "indexList", ",", 
         RowBox[{"openIndexList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"filteredExpr", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"expr", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "#", "]"}], "=!=", "Power"}], "&"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"indexList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"filteredExpr", ",", "#", ",", "Infinity"}], "]"}], 
             "&"}], ",", "indicesFromExprRules"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Count", "[", 
                RowBox[{"indexList", ",", "index"}], "]"}], "\[NotEqual]", 
               "2"}], "&&", 
              RowBox[{"Not", "[", 
               RowBox[{"IntegerQ", "[", "index", "]"}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"openIndexList", ",", "index"}], "]"}], ";"}]}], "]"}],
            ";"}], ",", 
          RowBox[{"{", 
           RowBox[{"index", ",", 
            RowBox[{"Union", "[", "indexList", "]"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "openIndexList", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"assuming", " ", "that", " ", "expr", " ", "is", " ", "well"}], 
      "-", 
      RowBox[{
      "defined", " ", "we", " ", "exploit", " ", "that", " ", "terms", " ", 
       "of", " ", "sums", " ", "must", " ", "have", " ", "the", " ", "same", 
       " ", "indices"}]}], ";", " ", 
     RowBox[{
     "this", " ", "is", " ", "crucial", " ", "for", " ", "the", " ", 
      "performance", " ", "in", " ", "the", " ", "case", " ", "of", " ", 
      "large", " ", "expressions"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr_Times", ",", "indicesFromExprRules_List"}], "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{
       RowBox[{"List", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"expr", "//.", 
           RowBox[{
            RowBox[{"Plus", "[", 
             RowBox[{"firstTerm_", ",", "__"}], "]"}], "\[RuleDelayed]", 
            "firstTerm"}]}], "//", "removeSquaredTensors"}], ")"}]}], ",", 
       "indicesFromExprRules"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr_Plus", ",", "indicesFromExprRules_List"}], "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"expr", "//.", 
         RowBox[{
          RowBox[{"Plus", "[", 
           RowBox[{"firstTerm_", ",", "__"}], "]"}], "\[RuleDelayed]", 
          "firstTerm"}]}], "//", "removeSquaredTensors"}], ",", 
       "indicesFromExprRules"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr_", ",", "indicesFromExprRules_List"}], "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"expr", "//.", 
          RowBox[{
           RowBox[{"Plus", "[", 
            RowBox[{"firstTerm_", ",", "__"}], "]"}], "\[RuleDelayed]", 
           "firstTerm"}]}], "//", "removeSquaredTensors"}], "}"}], ",", 
       "indicesFromExprRules"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr_Power", ",", "indicesFromExprRules_List"}], "]"}], ":=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"private", " ", "indices", " ", "functions"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenLorentzIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr", ",", "lorentzFromExprRules"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenLorentzIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"getOpenLorentzIndices", "/@", "expr"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenDiracIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr", ",", "spinorFromExprRules"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenDiracIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"getOpenDiracIndices", "/@", "expr"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenFundGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"fundIndicesFromExprRules", "[", "group", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenFundGroupIndices", "[", 
      RowBox[{"expr_List", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"getOpenFundGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}], ",", "expr"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenAdjGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"adjIndicesFromExprRules", "[", "group", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenAdjGroupIndices", "[", 
      RowBox[{"expr_List", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"getOpenAdjGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}], ",", "expr"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"getOpenIndices", "/@", "expr"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getOpenIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"openFundIndices", ",", "openAdjIndices"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"openFundIndices", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getOpenFundGroupIndices", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"openAdjIndices", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getOpenAdjGroupIndices", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"getOpenLorentzIndices", "[", "expr", "]"}], ",", 
           RowBox[{"getOpenDiracIndices", "[", "expr", "]"}], ",", 
           "openFundIndices", ",", "openAdjIndices"}], "]"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getClosedLorentzIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"lorentzFromExpr", "[", "expr", "]"}], ",", 
       RowBox[{"getOpenLorentzIndices", "[", "expr", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getClosedDiracIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"spinorFromExpr", "[", "expr", "]"}], ",", 
       RowBox[{"getOpenDiracIndices", "[", "expr", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getClosedFundGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"getFundGroupIndices", "[", 
        RowBox[{"expr", ",", "group"}], "]"}], ",", 
       RowBox[{"getOpenFundGroupIndices", "[", 
        RowBox[{"expr", ",", "group"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getClosedAdjGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"getAdjGroupIndices", "[", 
        RowBox[{"expr", ",", "group"}], "]"}], ",", 
       RowBox[{"getOpenAdjGroupIndices", "[", 
        RowBox[{"expr", ",", "group"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getClosedIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"getClosedIndices", "/@", "expr"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getClosedIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"closedFundIndices", ",", "closedAdjIndices"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"closedFundIndices", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getClosedFundGroupIndices", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"closedAdjIndices", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"getClosedAdjGroupIndices", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"getClosedLorentzIndices", "[", "expr", "]"}], ",", 
           RowBox[{"getClosedDiracIndices", "[", "expr", "]"}], ",", 
           "closedFundIndices", ",", "closedAdjIndices"}], "]"}], "]"}], 
        ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"3bf693fc-fb97-4c97-b1f1-8b149a668554"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Public", " ", "indices", " ", "functions"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"GetLorentzIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"GetLorentzIndices", "/@", "expr"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetLorentzIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"lorentzFromExpr", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetDiracIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"GetDiracIndices", "/@", "expr"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetDiracIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"spinorFromExpr", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GetFundGroupIndices", "[", "expr_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "groupNames", "]"}], "===", "1"}], ",", 
      RowBox[{"GetFundGroupIndices", "[", 
       RowBox[{"expr", ",", 
        RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"GetFundGroupIndices", "::", "grouparg"}], "]"}], ";"}]}], 
     "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetFundGroupIndices", "[", 
      RowBox[{"expr_List", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GetFundGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}], ",", "expr"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetFundGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getFundGroupIndices", "[", 
      RowBox[{
       RowBox[{"convertInput", "[", "expr", "]"}], ",", "group"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GetAdjGroupIndices", "[", "expr_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "groupNames", "]"}], "===", "1"}], ",", 
      RowBox[{"GetAdjGroupIndices", "[", 
       RowBox[{"expr", ",", 
        RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"GetAdjGroupIndices", "::", "grouparg"}], "]"}], ";"}]}], 
     "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetAdjGroupIndices", "[", 
      RowBox[{"expr_List", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GetAdjGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}], ",", "expr"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetAdjGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getAdjGroupIndices", "[", 
      RowBox[{
       RowBox[{"convertInput", "[", "expr", "]"}], ",", "group"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"GetIndices", "/@", "expr"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"fundIndices", ",", "adjIndices"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"fundIndices", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"GetFundGroupIndices", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"adjIndices", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"GetAdjGroupIndices", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"GetLorentzIndices", "[", "expr", "]"}], ",", 
           RowBox[{"GetDiracIndices", "[", "expr", "]"}], ",", "fundIndices", 
           ",", "adjIndices"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetOpenIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getOpenIndices", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetOpenLorentzIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getOpenLorentzIndices", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetOpenDiracIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getOpenDiracIndices", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GetOpenFundGroupIndices", "[", "expr_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "groupNames", "]"}], "===", "1"}], ",", 
      RowBox[{"GetOpenFundGroupIndices", "[", 
       RowBox[{"expr", ",", 
        RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"GetOpenFundGroupIndices", "::", "grouparg"}], "]"}], ";"}]}],
      "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetOpenFundGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getOpenFundGroupIndices", "[", 
      RowBox[{
       RowBox[{"convertInput", "[", "expr", "]"}], ",", "group"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GetOpenAdjGroupIndices", "[", "expr_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "groupNames", "]"}], "===", "1"}], ",", 
      RowBox[{"GetOpenAdjGroupIndices", "[", 
       RowBox[{"expr", ",", 
        RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"GetOpenAdjGroupIndices", "::", "grouparg"}], "]"}], ";"}]}], 
     "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetOpenAdjGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getOpenAdjGroupIndices", "[", 
      RowBox[{
       RowBox[{"convertInput", "[", "expr", "]"}], ",", "group"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getClosedIndices", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedLorentzIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"GetClosedLorentzIndices", "/@", "expr"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedLorentzIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getClosedLorentzIndices", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedDiracIndices", "[", "expr_List", "]"}], ":=", 
     RowBox[{"GetClosedDiracIndices", "/@", "expr"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedDiracIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"getClosedDiracIndices", "[", 
      RowBox[{"convertInput", "[", "expr", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GetClosedFundGroupIndices", "[", "expr_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "groupNames", "]"}], "===", "1"}], ",", 
      RowBox[{"GetClosedFundGroupIndices", "[", 
       RowBox[{"expr", ",", 
        RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"GetClosedFundGroupIndices", "::", "grouparg"}], "]"}], 
       ";"}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedFundGroupIndices", "[", 
      RowBox[{"expr_List", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GetClosedFundGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}], ",", "expr"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedFundGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getClosedFundGroupIndices", "[", 
      RowBox[{
       RowBox[{"convertInput", "[", "expr", "]"}], ",", "group"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GetClosedAdjGroupIndices", "[", "expr_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "groupNames", "]"}], "===", "1"}], ",", 
      RowBox[{"GetClosedAdjGroupIndices", "[", 
       RowBox[{"expr", ",", 
        RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"GetClosedAdjGroupIndices", "::", "grouparg"}], "]"}], 
       ";"}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedAdjGroupIndices", "[", 
      RowBox[{"expr_List", ",", "group_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GetClosedAdjGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}], ",", "expr"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetClosedAdjGroupIndices", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"getClosedAdjGroupIndices", "[", 
      RowBox[{
       RowBox[{"convertInput", "[", "expr", "]"}], ",", "group"}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"e1e98f48-1b93-4cf8-b12e-2c81341df76c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Tensor Sum Checks", \
"Subsection",ExpressionUUID->"abe85bf6-5ad0-48a2-bf9e-3e8296f6dfb7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"private", " ", "sum", " ", "checks", " ", "functions"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"checkSum", "[", 
      RowBox[{"expr_Plus", ",", "openIndicesFunction_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "openIndicesLists", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"openIndicesLists", "=", 
         RowBox[{"Sort", "/@", 
          RowBox[{"(", 
           RowBox[{"openIndicesFunction", "/@", 
            RowBox[{"Apply", "[", 
             RowBox[{"List", ",", "expr"}], "]"}]}], ")"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"AllTrue", "[", 
            RowBox[{
             RowBox[{"Rest", "[", "openIndicesLists", "]"}], ",", 
             RowBox[{
              RowBox[{"#", "===", 
               RowBox[{"First", "[", "openIndicesLists", "]"}]}], "&"}]}], 
            "]"}], ",", "True", ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"CheckTensorSums", "::", "invalidsum"}], ",", 
              "openIndicesLists"}], "]"}], ";", "False"}]}], "]"}], "]"}], 
        ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sumsFromExpr", "[", "expr_", "]"}], ":=", 
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"{", "expr", "}"}], ",", 
       RowBox[{
        RowBox[{"Plus", "[", 
         RowBox[{"x_", ",", "y__"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"Plus", "[", 
         RowBox[{"x", ",", "y"}], "]"}]}], ",", "Infinity"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAllSums", "[", 
      RowBox[{"expr_", ",", "function_"}], "]"}], ":=", 
     RowBox[{"And", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"checkSum", "[", 
          RowBox[{"#", ",", "function"}], "]"}], "&"}], ",", 
        RowBox[{"sumsFromExpr", "[", "expr", "]"}]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkLorentzTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"checkAllSums", "[", 
      RowBox[{"expr", ",", "getOpenLorentzIndices"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkDiracTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"checkAllSums", "[", 
      RowBox[{"expr", ",", "getOpenDiracIndices"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAdjGroupTensorSums", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"checkAllSums", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"getOpenAdjGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkFundGroupTensorSums", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"checkAllSums", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"getOpenFundGroupIndices", "[", 
         RowBox[{"#", ",", "group"}], "]"}], "&"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAllTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "lorentzCheck", ",", "diracCheck", ",", "fundGroupCheck", ",", 
         "adjGroupCheck"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"lorentzCheck", "=", 
         RowBox[{"checkLorentzTensorSums", "[", "expr", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"diracCheck", "=", 
         RowBox[{"checkDiracTensorSums", "[", "expr", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"fundGroupCheck", "=", 
         RowBox[{"And", "@@", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"checkFundGroupTensorSums", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"adjGroupCheck", "=", 
         RowBox[{"And", "@@", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"checkAdjGroupTensorSums", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "&"}], ",", "groupNames"}], 
           "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{
         "lorentzCheck", "&&", "diracCheck", "&&", "fundGroupCheck", "&&", 
          "adjGroupCheck"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"convertInputWithoutSumCheck", "[", "expr_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "tmpDebuggingMode", ",", "tmpCheckTensorSums", ",", "convertedExpr"}],
         "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tmpCheckTensorSums", "=", "checkTensorSums"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"tmpDebuggingMode", "=", "debuggingMode"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"checkTensorSums", "=", "False"}], ";", "\[IndentingNewLine]", 
        RowBox[{"debuggingMode", "=", "False"}], ";", "\[IndentingNewLine]", 
        RowBox[{"convertedExpr", "=", 
         RowBox[{"convertInput", "[", "expr", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"checkTensorSums", "=", "tmpCheckTensorSums"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"debuggingMode", "=", "tmpDebuggingMode"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "convertedExpr", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"9fe2a3f6-cc7f-437c-a7ec-f4fdf79d57e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"public", " ", "check", " ", "functions"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"CheckLorentzTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"checkLorentzTensorSums", "[", 
      RowBox[{"convertInputWithoutSumCheck", "[", "expr", "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CheckDiracTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"checkDiracTensorSums", "[", 
      RowBox[{"convertInputWithoutSumCheck", "[", "expr", "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CheckFundGroupTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "groupNames", "]"}], "==", "1"}], ",", 
       RowBox[{"CheckFundGroupTensorSums", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"CheckFundGroupTensorSums", "::", "grouparg"}], "]"}], 
        ";"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CheckFundGroupTensorSums", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"checkFundGroupTensorSums", "[", 
      RowBox[{
       RowBox[{"convertInputWithoutSumCheck", "[", "expr", "]"}], ",", 
       "group"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CheckAdjGroupTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "groupNames", "]"}], "==", "1"}], ",", 
       RowBox[{"CheckAdjGroupTensorSums", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"First", "[", "groupNames", "]"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"CheckAdjGroupTensorSums", "::", "grouparg"}], "]"}], 
        ";"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CheckAdjGroupTensorSums", "[", 
      RowBox[{"expr_", ",", "group_"}], "]"}], ":=", 
     RowBox[{"checkAdjGroupTensorSums", "[", 
      RowBox[{
       RowBox[{"convertInputWithoutSumCheck", "[", "expr", "]"}], ",", 
       "group"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CheckTensorSums", "[", "expr_", "]"}], ":=", 
     RowBox[{"checkAllTensorSums", "[", 
      RowBox[{"convertInputWithoutSumCheck", "[", "expr", "]"}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"94d9f554-37bc-4e6c-b0ae-fc8cd7cedc16"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Expansion Algorithms", \
"Section",ExpressionUUID->"585f474a-fd5f-4416-a710-64c0582563f4"],

Cell[CellGroupData[{

Cell["Expansion of Lorentz Structures", \
"Subsection",ExpressionUUID->"e5a415cd-f03a-4924-950e-8c035fcc6049"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"lorentzTensorProductToSortedLists", "[", "term_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"{", "term", "}"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lorentzTensorProductToSortedLists", "[", "term_Times", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "abort", ",", "completeDiracTrace", ",", "iTensor", ",", 
       "openLorentzIndices", ",", "openDiracIndices", ",", "tmpProduct", ",", 
       "tmpProductList", ",", 
       RowBox[{"disjointProductsList", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"unsortedTensors", "=", 
        RowBox[{"List", "@@", "term"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"abort", "[", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
           "ExpandLorentzStructures", "::", "failedconsistencycheck"}], "]"}],
           ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"completeDiracTrace", "[", "expr_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"tmpExpr", "=", "expr"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"openDiracIndices", "=", 
               RowBox[{"getOpenDiracIndices", "[", "tmpExpr", "]"}]}], "]"}], 
             ">", "0"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"iTensor", "=", 
              RowBox[{"Catch", "[", 
               RowBox[{
                RowBox[{"Do", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"getOpenDiracIndices", "[", 
                    RowBox[{"unsortedTensors", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Alternatives", "@@", "openDiracIndices"}]}], 
                    "]"}], ",", 
                    RowBox[{"Throw", "[", "i", "]"}]}], "]"}], ";"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "unsortedTensors", "]"}]}], 
                   "}"}]}], "]"}], ";", 
                RowBox[{"Throw", "[", "0", "]"}], ";"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"iTensor", "\[Equal]", "0"}], ",", 
               RowBox[{"abort", "[", "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"tmpExpr", "=", 
              RowBox[{"tmpExpr", "*", 
               RowBox[{"unsortedTensors", "[", 
                RowBox[{"[", "iTensor", "]"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"unsortedTensors", "=", 
              RowBox[{"Drop", "[", 
               RowBox[{"unsortedTensors", ",", 
                RowBox[{"{", "iTensor", "}"}]}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "tmpExpr", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "unsortedTensors", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tmpProduct", "=", 
          RowBox[{"First", "[", "unsortedTensors", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"unsortedTensors", "=", 
          RowBox[{"Rest", "[", "unsortedTensors", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"tmpProductList", "=", 
          RowBox[{"{", 
           RowBox[{"completeDiracTrace", "[", "tmpProduct", "]"}], "}"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"openLorentzIndices", "=", 
              RowBox[{"getOpenLorentzIndices", "[", 
               RowBox[{"Times", "@@", "tmpProductList"}], "]"}]}], "]"}], ">",
             "0"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"iTensor", "=", 
             RowBox[{"Catch", "[", 
              RowBox[{
               RowBox[{"Do", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"getOpenLorentzIndices", "[", 
                    RowBox[{"unsortedTensors", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Alternatives", "@@", "openLorentzIndices"}]}], 
                    "]"}], ",", 
                    RowBox[{"Throw", "[", "i", "]"}]}], "]"}], ";"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"Length", "[", "unsortedTensors", "]"}]}], "}"}]}],
                 "]"}], ";", 
               RowBox[{"Throw", "[", "0", "]"}], ";"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"iTensor", "\[Equal]", "0"}], ",", 
              RowBox[{"abort", "[", "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"tmpProduct", "=", 
             RowBox[{"unsortedTensors", "[", 
              RowBox[{"[", "iTensor", "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"unsortedTensors", "=", 
             RowBox[{"Drop", "[", 
              RowBox[{"unsortedTensors", ",", 
               RowBox[{"{", "iTensor", "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"tmpProductList", ",", 
              RowBox[{"completeDiracTrace", "[", "tmpProduct", "]"}]}], "]"}],
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"disjointProductsList", ",", "tmpProductList"}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "check", " ", "the", " ", "result", " ", "if", " ", "in", " ", 
        "debugging", " ", "mode"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"debuggingMode", ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Apply", "[", 
             RowBox[{"Times", ",", "disjointProductsList", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "=!=", "term"}], ",", 
           
           RowBox[{
            RowBox[{"abort", "[", "]"}], ";"}]}], "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "disjointProductsList", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"60eb38c6-5489-4260-831a-8a3348ca5bb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Private", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"expandLorentzStructures", "[", "expr_Plus", "]"}], ":=", 
     RowBox[{"lorentzTensorProductToSortedLists", "/@", 
      RowBox[{"(", 
       RowBox[{"List", "@@", "expr"}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"expandLorentzStructures", "[", "expr_", "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{"lorentzTensorProductToSortedLists", "[", "expr", "]"}], 
      "}"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Public", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ExpandLorentzStructures", "[", "expr_", "]"}], ":=", 
     RowBox[{"convertOutput", "[", 
      RowBox[{"expandLorentzStructures", "[", 
       RowBox[{"convertInput", "[", "expr", "]"}], "]"}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"d4d8bbd3-c834-49d3-b141-5278afbf7a74"]
}, Closed]],

Cell[CellGroupData[{

Cell["Separation of Tensor classes", "Subsection",
 CellChangeTimes->{{3.6446564539545927`*^9, 
  3.644656465573824*^9}},ExpressionUUID->"5700251e-d48f-47f9-9e33-\
2b9d0dcc0107"],

Cell[CellGroupData[{

Cell["Expansion and Separation Within Tensor Class", \
"Subsubsection",ExpressionUUID->"2da9a6d6-2149-4ebe-8ba2-a616cea5c703"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "This", " ", "function", " ", "separates", " ", "factors", " ", "in", " ", 
     RowBox[{"expr", ".", " ", "It"}], " ", "returns", " ", "a", " ", "list", 
     " ", "of", " ", "length", " ", "2.", " ", "The", " ", "first", " ", 
     "element", " ", "of", " ", "that", " ", "list", " ", "contains", " ", 
     "all", " ", "factors", " ", "that", " ", "do", " ", "not", " ", "depend",
      " ", "on", " ", "any", " ", "object", " ", "in", " ", "the", " ", 
     "objects", " ", "list"}], ",", " ", 
    RowBox[{"the", " ", "second", " ", "element", " ", "all", " ", "others"}],
     ",", " ", 
    RowBox[{
     RowBox[{"i", ".", "e", ".", " ", "those"}], " ", "that", " ", "do", " ", 
     "depend", " ", "on", " ", "at", " ", "least", " ", "one", " ", "object", 
     " ", "of", " ", "the", " ", "objects", " ", 
     RowBox[{"list", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"separateFactors", "[", 
      RowBox[{"expr_", ",", "alternatives_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", "alternatives"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"expr", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "expr"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"separateFactors", "[", 
      RowBox[{"expr_Times", ",", "alternatives_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"prefactorList", "=", 
          RowBox[{"{", "1", "}"}]}], ",", 
         RowBox[{"mainList", "=", 
          RowBox[{"{", "1", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"factor", ",", "alternatives"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"prefactorList", ",", "factor"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"mainList", ",", "factor"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"factor", ",", 
            RowBox[{"List", "@@", "expr"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Times", "@@", "prefactorList"}], ",", 
           RowBox[{"Times", "@@", "mainList"}]}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Expands", " ", "expr", " ", "but", " ", "leaves", " ", "parts", " ", 
     "that", " ", "are", " ", "free", " ", "of", " ", "all", " ", "elements", 
     " ", "of", " ", "the", " ", "expansion", " ", "list", " ", 
     RowBox[{"unexpanded", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"expandIteratively", "[", 
      RowBox[{"expr_", ",", "expansionList_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "expansionList", "]"}], "===", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Expand", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"First", "[", "expansionList", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Expand", "[", 
        RowBox[{
         RowBox[{"expandIteratively", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"Rest", "[", "expansionList", "]"}]}], "]"}], ",", 
         RowBox[{"First", "[", "expansionList", "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"8ee70e5f-c9d0-47f0-bed7-3df48e05e35f"]
}, Closed]],

Cell[CellGroupData[{

Cell["Expansion of Tensor Classes", \
"Subsubsection",ExpressionUUID->"90902bd7-e756-4460-8fa6-ebc41c01d729"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"expandExpr", "[", 
     RowBox[{"expr_", ",", "tensorLists_List"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"currentList", "=", 
         RowBox[{"First", "[", "tensorLists", "]"}]}], ",", 
        RowBox[{"remainingLists", "=", 
         RowBox[{"Rest", "[", "tensorLists", "]"}]}], ",", "expandedExpr", 
        ",", "separatedExpr"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"remainingLists", "===", 
          RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Return", "[", 
           RowBox[{"If", "[", 
            RowBox[{"disentangleLorentzStructures", ",", 
             RowBox[{"expandLorentzStructures", "[", 
              RowBox[{"removeSquaredTensors", "[", "expr", "]"}], "]"}], ",", 
             "expr"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"Alternatives", "@@", "currentList"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"1", ",", 
              RowBox[{"expandExpr", "[", 
               RowBox[{"expr", ",", "remainingLists"}], "]"}]}], "}"}], "}"}],
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"expandedExpr", "=", 
        RowBox[{"expandIteratively", "[", 
         RowBox[{
          RowBox[{"Collect", "[", 
           RowBox[{
            RowBox[{"expandIteratively", "[", 
             RowBox[{"expr", ",", "currentList"}], "]"}], ",", 
            "currentList"}], "]"}], ",", "currentList"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"separatedExpr", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"separateFactors", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Alternatives", "@@", 
              RowBox[{"Flatten", "[", "remainingLists", "]"}]}]}], "]"}], 
           "&"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "expandedExpr", "]"}], "===", "Plus"}], ",", 
            RowBox[{"List", "@@", "expandedExpr"}], ",", 
            RowBox[{"{", "expandedExpr", "}"}]}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"First", "[", "#", "]"}], ",", 
             RowBox[{"expandExpr", "[", 
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], ",", "remainingLists"}], 
              "]"}]}], "}"}], "&"}], ",", "separatedExpr"}], "]"}], "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"expandTerm", "[", 
     RowBox[{"term_", ",", "tensorLists_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"prefactor", ",", "main"}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"prefactor", ",", "main"}], "}"}], "=", 
        RowBox[{"separateFactors", "[", 
         RowBox[{"term", ",", 
          RowBox[{"Alternatives", "@@", 
           RowBox[{"Flatten", "[", "tensorLists", "]"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"prefactor", ",", 
          RowBox[{"expandExpr", "[", 
           RowBox[{"main", ",", "tensorLists"}], "]"}]}], "}"}], "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Private", " ", "function"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"expandTerms", "[", "term_", "]"}], ":=", 
   RowBox[{"expandTerms", "[", 
    RowBox[{"{", "term", "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"expandTerms", "[", "terms_List", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "tensorLists", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"tensorLists", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"groupTensorsList", ",", "lorentzTensors"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"expandTerm", "[", 
            RowBox[{"#", ",", "tensorLists"}], "]"}], "&"}], ",", "terms"}], 
         "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Public", " ", "function"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ExpandTerms", "[", "terms_", "]"}], ":=", 
   RowBox[{"convertOutput", "[", 
    RowBox[{"expandTerms", "[", 
     RowBox[{"convertInput", "[", "terms", "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"1afe991b-2a6e-4d30-9f69-24306c31acd9"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["FORM String Generation", \
"Section",ExpressionUUID->"0bfc4430-f724-497f-83f6-5ceca30a5169"],

Cell[CellGroupData[{

Cell["Auxiliary Conversion Functions", "Subsection",
 InitializationCell->True,
 CellChangeTimes->{{3.632630250883168*^9, 3.632630299668659*^9}, 
   3.644660649311947*^9},ExpressionUUID->"0ae5ec6b-1d55-4bb6-a242-\
8619c452b176"],

Cell[CellGroupData[{

Cell["Momentum replacements (vecs and combined momentum labels)", \
"Subsubsection",
 InitializationCell->
  True,ExpressionUUID->"7e75f736-502e-47ef-8ccd-691310aa2230"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"removeSign", "[", "expr_Times", "]"}], ":=", 
   RowBox[{"expr", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeSign", "[", "expr_Symbol", "]"}], ":=", "expr"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"for", " ", "combined", " ", "tensors"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeSign", "[", "expr_Plus", "]"}], ":=", "expr"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"for", " ", "combined", " ", "tensors"}], "-", 
    RowBox[{"error", " ", "message"}]}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"momentumFromExpr", "[", "expr_", "]"}], ":=", 
    RowBox[{"removeSign", "/@", 
     RowBox[{"variablesFromExprRules", "[", 
      RowBox[{"expr", ",", "momentumFromExprRules"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"canonicalOrderQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "exprsym", "}"}], ",", 
     RowBox[{
      RowBox[{"exprsym", "=", 
       RowBox[{"(", 
        RowBox[{"expr", "//", "Expand"}], ")"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "@", "exprsym"}], "===", "Plus"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "@", 
            RowBox[{"exprsym", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "===", "Times"}], ",", 
          RowBox[{
           RowBox[{"Sign", "[", 
            RowBox[{"exprsym", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "\[Equal]", "1"}],
           ",", "True"}], "]"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "@", "exprsym"}], "===", "Times"}], ",", 
          RowBox[{
           RowBox[{"Sign", "[", 
            RowBox[{"exprsym", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
          "True"}], "]"}]}], "]"}]}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"76602ce0-67fb-456a-8f43-d4076b2a7974"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"momentumSum", "[", "expr_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exprsym", ",", "sign", ",", "label"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"sign", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"canonicalOrderQ", "[", "expr", "]"}], "\[Equal]", "True"}],
          ",", "1", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"exprsym", "=", 
       RowBox[{"sign", "*", "expr"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"label", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "@", "exprsym"}], "===", "Plus"}], ",", 
         RowBox[{"\"\<MOMSUM\>\"", "<>", 
          RowBox[{"StringReplace", "[", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{"CForm", "[", 
              RowBox[{"exprsym", "//", "Expand"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\< + \>\"", "\[Rule]", "\"\<Plus\>\""}], ",", 
              RowBox[{"\"\< - \>\"", "\[Rule]", "\"\<Minus\>\""}], ",", 
              RowBox[{"\"\<*\>\"", "\[Rule]", "\"\<Times\>\""}]}], "}"}]}], 
           "]"}]}], ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"CForm", "[", 
           RowBox[{"exprsym", "//", "Expand"}], "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"sign", "*", 
        RowBox[{"ToExpression", "[", "label", "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"4a0ee2a5-0739-4042-8ddc-c5a85bcd28d2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"invmomentumsum", "[", "expr_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "s", "}"}], ",", 
     RowBox[{"s", "=", 
      RowBox[{"StringReplace", "[", 
       RowBox[{
        RowBox[{"ToString", "[", "expr", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<MOMSUM\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<Plus\>\"", "\[Rule]", "\"\<+\>\""}], ",", 
          RowBox[{"\"\<Minus\>\"", "\[Rule]", "\"\<-\>\""}], ",", 
          RowBox[{"\"\<Times\>\"", "\[Rule]", "\"\<*\>\""}]}], "}"}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"invmomentumsumwithrepl", "[", 
    RowBox[{"expr_", ",", "repl_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "s", "}"}], ",", 
     RowBox[{"s", "=", 
      RowBox[{"ToString", "[", 
       RowBox[{
        RowBox[{"ToExpression", "[", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"ToString", "[", "expr", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MOMSUM\>\"", "\[Rule]", "\"\<\>\""}], ",", 
             RowBox[{"\"\<Plus\>\"", "\[Rule]", "\"\<+\>\""}], ",", 
             RowBox[{"\"\<Minus\>\"", "\[Rule]", "\"\<-\>\""}], ",", 
             RowBox[{"\"\<Times\>\"", "\[Rule]", "\"\<*\>\""}]}], "}"}]}], 
          "]"}], "]"}], "/.", "repl"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"idinvmomentumsum", "[", "exprms_", "]"}], ":=", 
   RowBox[{
    RowBox[{"ToString", "[", "exprms", "]"}], "~~", "\"\<,\>\"", "~~", 
    RowBox[{"invmomentumsum", "[", "exprms", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"idinvmomentumsums", "[", "expr_List", "]"}], ":=", 
   RowBox[{"\"\<Multiply replace_(\>\"", "~~", 
    RowBox[{"stringList", "[", 
     RowBox[{"idinvmomentumsum", "/@", "expr"}], "]"}], "~~", 
    "\"\<);\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"idinvmomentumsumwithrepl", "[", 
    RowBox[{"exprms_", ",", "repl_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ToString", "[", 
     RowBox[{"exprms", "/.", "repl"}], "]"}], "~~", "\"\<,\>\"", "~~", 
    RowBox[{"invmomentumsumwithrepl", "[", 
     RowBox[{"exprms", ",", "repl"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"idinvmomentumsumswithrepl", "[", 
    RowBox[{"expr_List", ",", "repl_"}], "]"}], ":=", 
   RowBox[{"\"\<Multiply replace_(\>\"", "~~", 
    RowBox[{"stringList", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"idinvmomentumsumwithrepl", "[", 
         RowBox[{"#", ",", "repl"}], "]"}], "&"}], ",", "expr"}], "]"}], 
     "]"}], "~~", "\"\<);\>\""}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"5796013a-74c4-4c53-a045-59e7170c4efd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replacevec3", "[", "mom_", "]"}], ":=", 
    RowBox[{"\"\<id FTxvecs(\>\"", "~~", 
     RowBox[{"ToString", "[", "mom", "]"}], "~~", "\"\<,lor1?)=\>\"", "~~", 
     "\"\<vecsx\>\"", "~~", 
     RowBox[{"ToString", "[", "mom", "]"}], "~~", "\"\<(lor1);\>\""}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replacevec3inv", "[", "moms_List", "]"}], ":=", 
   RowBox[{"\"\<Multiply replace_(\>\"", "~~", 
    RowBox[{"stringList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\"\<vecsx\>\"", "~~", 
        RowBox[{"ToString", "[", "#", "]"}], "~~", "\"\<,\>\"", "~~", 
        RowBox[{"ToString", "[", "#", "]"}]}], "&"}], "/@", "moms"}], "]"}], 
    "~~", "\"\<);\>\""}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"aa680207-68e6-4a4f-8e77-ea06c2efe822"]
}, Closed]],

Cell[CellGroupData[{

Cell["String Replacements and Momentum String Conversion", "Subsubsection",
 InitializationCell->True,
 CellChangeTimes->{{3.647070610864293*^9, 
  3.6470706320860443`*^9}},ExpressionUUID->"aa7c77ce-e826-4ce2-960b-\
859c2dde382b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"stringList", "[", "expr_List", "]"}], ":=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"Riffle", "[", 
     RowBox[{
      RowBox[{"ToString", "/@", "expr"}], ",", "\"\<,\>\""}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"stringLines", "[", "expr_List", "]"}], ":=", 
    RowBox[{"StringJoin", "[", 
     RowBox[{"Riffle", "[", 
      RowBox[{"expr", ",", "\"\<\\n\>\""}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"formBlockArgument", "[", 
     RowBox[{"block_String", ",", 
      RowBox[{"level_Integer", ":", "5"}]}], "]"}], ":=", 
    RowBox[{"block", "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"level", "===", "1"}], ",", "\"\<\>\"", ",", 
       RowBox[{"\"\<\\n\>\"", "~~", 
        RowBox[{"stringLines", "@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"\"\<argument;\\n\>\"", "~~", "block"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"level", "-", "1"}]}], "}"}]}], "]"}]}], "~~", 
        "\"\<\\n\>\"", "~~", 
        RowBox[{"stringLines", "@", 
         RowBox[{"Table", "[", 
          RowBox[{"\"\<endargument;\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"level", "-", "1"}]}], "}"}]}], "]"}]}], "~~", 
        "\"\<\\n\>\""}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numToString", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Head", "[", "x", "]"}], "===", "Rational"}], ",", 
     RowBox[{
      RowBox[{"ToString", "[", 
       RowBox[{"Numerator", "[", "x", "]"}], "]"}], "~~", "\"\</\>\"", "~~", 
      RowBox[{"ToString", "[", 
       RowBox[{"Denominator", "[", "x", "]"}], "]"}]}], ",", 
     RowBox[{"ToString", "[", "x", "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"4aab6ec0-a2dd-4ea7-a5e6-0cbfa3669813"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"toGenericFormString", "[", "expr_", "]"}], ":=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"expr", ",", "InputForm"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<FormTracer`Private`\>\"", "\[Rule]", "\"\<\>\""}], ",", 
       RowBox[{"\"\< + \>\"", "\[Rule]", "\"\<+\>\""}], ",", 
       RowBox[{"\"\< - \>\"", "\[Rule]", "\"\<-\>\""}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceGroupTensors", "[", "expr_", "]"}], ":=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxepsAdj[\>\"", "~~", "group__", "~~", "\"\<, \>\"", "~~", 
          "x__", "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{"\"\<e_(\>\"", "~~", "x", "~~", "\"\<)\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxepsFund[\>\"", "~~", "group__", "~~", "\"\<, \>\"", "~~", 
          "x__", "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{"\"\<e_(\>\"", "~~", "x", "~~", "\"\<)\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxdeltaAdj[\>\"", "~~", "group__", "~~", "\"\<, \>\"", "~~", 
          "x__", "~~", "\"\<, \>\"", "~~", "y__", "~~", "\"\<]\>\""}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{
        "\"\<d_(\>\"", "~~", "x", "~~", "\"\<,\>\"", "~~", "y", "~~", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxdeltaFund[\>\"", "~~", "group__", "~~", "\"\<, \>\"", "~~", 
          "x__", "~~", "\"\<, \>\"", "~~", "y__", "~~", "\"\<]\>\""}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{
        "\"\<d_(\>\"", "~~", "x", "~~", "\"\<,\>\"", "~~", "y", "~~", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxF[\>\"", "~~", "group__", "~~", "\"\<, \>\"", "~~", "x__", 
          "~~", "\"\<, \>\"", "~~", "y__", "~~", "\"\<, \>\"", "~~", "z__", 
          "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{
        "\"\<f(\>\"", "~~", "x", "~~", "\"\<,\>\"", "~~", "y", "~~", 
         "\"\<,\>\"", "~~", "z", "~~", "\"\<)\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxT[\>\"", "~~", "group__", "~~", "\"\<, \>\"", "~~", "x__", 
          "~~", "\"\<, \>\"", "~~", "y__", "~~", "\"\<, \>\"", "~~", "z__", 
          "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{
        "\"\<T(\>\"", "~~", "y", "~~", "\"\<,\>\"", "~~", "z", "~~", 
         "\"\<,\>\"", "~~", "x", "~~", "\"\<)\>\""}]}]}], 
      "\[IndentingNewLine]", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceLorentzTensors", "[", "expr_", "]"}], ":=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxgamma[\>\"", "~~", "x__", "~~", "\"\<, \>\"", "~~", "y__", 
          "~~", "\"\<, \>\"", "~~", "z__", "~~", "\"\<]\>\""}], "]"}], 
        "\[RuleDelayed]", 
        RowBox[{
        "\"\<gamma(\>\"", "~~", "x", "~~", "\"\<,\>\"", "~~", "y", "~~", 
         "\"\<,\>\"", "~~", "z", "~~", "\"\<)\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxgamma5[\>\"", "~~", "x__", "~~", "\"\<, \>\"", "~~", "y__", 
          "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{
        "\"\<gamma(g5,\>\"", "~~", "x", "~~", "\"\<,\>\"", "~~", "y", "~~", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{"\"\<FTxepsLorentz[\>\"", "~~", "x__", "~~", "\"\<]\>\""}], 
         "]"}], "\[RuleDelayed]", 
        RowBox[{"\"\<e_(\>\"", "~~", "x", "~~", "\"\<)\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxdeltaLorentz[\>\"", "~~", "x__", "~~", "\"\<, \>\"", "~~", 
          "y__", "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{
        "\"\<d_(\>\"", "~~", "x", "~~", "\"\<,\>\"", "~~", "y", "~~", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxdeltaDirac[\>\"", "~~", "x__", "~~", "\"\<, \>\"", "~~", 
          "y__", "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{
        "\"\<d_(\>\"", "~~", "x", "~~", "\"\<,\>\"", "~~", "y", "~~", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{"\"\<FTxvec[0, \>\"", "~~", "y__", "~~", "\"\<]\>\""}], 
         "]"}], "\[RuleDelayed]", "\"\<0\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxvec[\>\"", "~~", "x__", "~~", "\"\<, \>\"", "~~", "y__", 
          "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{
        "\"\<\>\"", "~~", "x", "~~", "\"\<(\>\"", "~~", "y", "~~", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Shortest", "[", 
         RowBox[{
         "\"\<FTxsp[\>\"", "~~", "x__", "~~", "\"\<, \>\"", "~~", "y__", 
          "~~", "\"\<]\>\""}], "]"}], "\[RuleDelayed]", 
        RowBox[{"x", "~~", "\"\<.\>\"", "~~", "y"}]}]}], 
      "\[IndentingNewLine]", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"finalizeFormString", "[", "expr_", "]"}], ":=", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"expr", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<[\>\"", "->", "\"\<(\>\""}], ",", 
        RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<)\>\""}], ",", 
        RowBox[{"\"\<, \>\"", "\[Rule]", "\"\<,\>\""}], ",", 
        RowBox[{"\"\<FTxI\>\"", "\[Rule]", "\"\<i_\>\""}], ",", 
        RowBox[{"\"\<Sqrt\>\"", "\[Rule]", "\"\<sqrt\>\""}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toFormStringScalar", "[", "expr_", "]"}], ":=", 
   RowBox[{"finalizeFormString", "[", 
    RowBox[{"toGenericFormString", "[", "expr", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toFormStringGroup", "[", "expr_", "]"}], ":=", 
   RowBox[{"finalizeFormString", "[", 
    RowBox[{"replaceGroupTensors", "[", 
     RowBox[{"toGenericFormString", "[", "expr", "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toFormStringLorentz", "[", "expr_", "]"}], ":=", 
   RowBox[{"finalizeFormString", "[", 
    RowBox[{"replaceLorentzTensors", "[", 
     RowBox[{"toGenericFormString", "[", "expr", "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toFormStringAll", "[", "expr_", "]"}], ":=", 
   RowBox[{"finalizeFormString", "[", 
    RowBox[{"replaceLorentzTensors", "[", 
     RowBox[{"replaceGroupTensors", "[", 
      RowBox[{"toGenericFormString", "[", "expr", "]"}], "]"}], "]"}], 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"d2e53fcc-1591-4623-b180-2b9f3103eb8c"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Lorentz Structures", "Subsection",
 CellChangeTimes->{{3.6446587317586308`*^9, 
  3.644658766930667*^9}},ExpressionUUID->"d889a070-17ca-4fe5-9df7-\
8309bd73e0c3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateLorentzFormExpressions", "[", 
    RowBox[{"input_List", ",", "lorentzTermString_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "=", 
        RowBox[{"Reverse", "[", 
         RowBox[{"input", ",", "3"}], "]"}]}], ",", 
       RowBox[{"vars", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"termSummation", "=", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Local \>\"", ",", "lorentzTermString", ",", "\"\<=\>\""}], 
         "}"}]}], ",", 
       RowBox[{"factorMultiplications", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"spinorFactors", "=", 
        RowBox[{"{", "}"}]}], ",", "structures", ",", "tmpFactorName"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"ti", " ", "=", " ", 
       RowBox[{"term", " ", "index"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"si", " ", "=", " ", 
       RowBox[{"short", " ", "for", " ", "structure", " ", "index"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"ifi", " ", "=", " ", 
       RowBox[{
       "short", " ", "for", " ", "inner", " ", "factor", " ", "index"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"termSummation", ",", 
           RowBox[{
           "\"\<+\>\"", "<>", "lorentzTermString", "<>", "\"\<T\>\"", "<>", 
            RowBox[{"ToString", "[", "ti", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"factorMultiplications", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Local \>\"", "<>", "lorentzTermString", "<>", "\"\<T\>\"", "<>", 
             RowBox[{"ToString", "[", "ti", "]"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"factorMultiplications", "[", 
               RowBox[{"[", "ti", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"si", "===", "1"}], ",", "\"\<=\>\"", ",", 
                 "\"\<*\>\""}], "]"}], "<>", "lorentzTermString", "<>", 
               "\"\<T\>\"", "<>", 
               RowBox[{"ToString", "[", "ti", "]"}], "<>", "\"\<S\>\"", "<>", 
               
               RowBox[{"ToString", "[", "si", "]"}], "<>", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"x", "[", 
                    RowBox[{"[", 
                    RowBox[{"ti", ",", "si"}], "]"}], "]"}], "]"}], "===", 
                  "1"}], ",", "\"\<F1\>\"", ",", "\"\<\>\""}], "]"}]}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Do", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"tmpFactorName", "=", 
                RowBox[{"lorentzTermString", "<>", "\"\<T\>\"", "<>", 
                 RowBox[{"ToString", "[", "ti", "]"}], "<>", "\"\<S\>\"", "<>", 
                 RowBox[{"ToString", "[", "si", "]"}], "<>", "\"\<F\>\"", "<>", 
                 RowBox[{"ToString", "[", "ifi", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"vars", ",", 
                 RowBox[{
                 "\"\<Local \>\"", "<>", "tmpFactorName", "<>", "\"\<=\>\"", "<>", 
                  RowBox[{"toFormStringLorentz", "[", 
                   RowBox[{"x", "[", 
                    RowBox[{"[", 
                    RowBox[{"ti", ",", "si", ",", "ifi"}], "]"}], "]"}], 
                   "]"}], "<>", "\"\<;\\n\>\""}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"spinorFromExpr", "[", 
                   RowBox[{"x", "[", 
                    RowBox[{"[", 
                    RowBox[{"ti", ",", "si", ",", "ifi"}], "]"}], "]"}], 
                   "]"}], "=!=", 
                  RowBox[{"{", "}"}]}], ",", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"spinorFactors", ",", "tmpFactorName"}], "]"}]}], 
                "]"}], ";"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{"ifi", ",", 
                RowBox[{"Length", "[", 
                 RowBox[{"x", "[", 
                  RowBox[{"[", 
                   RowBox[{"ti", ",", "si"}], "]"}], "]"}], "]"}]}], "}"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
           
           RowBox[{"{", 
            RowBox[{"si", ",", 
             RowBox[{"Length", "[", 
              RowBox[{"x", "[", 
               RowBox[{"[", "ti", "]"}], "]"}], "]"}]}], "}"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"ti", ",", 
          RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"structures", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"lorentzTermString", "<>", "\"\<T\>\"", "<>", 
              RowBox[{"ToString", "[", "ti", "]"}], "<>", "\"\<S\>\"", "<>", 
              RowBox[{"ToString", "[", "si", "]"}]}], ",", 
             RowBox[{"Length", "[", 
              RowBox[{"x", "[", 
               RowBox[{"[", 
                RowBox[{"ti", ",", "si"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
           
           RowBox[{"{", 
            RowBox[{"ti", ",", 
             RowBox[{"Length", "[", "x", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"si", ",", 
             RowBox[{"Length", "[", 
              RowBox[{"x", "[", 
               RowBox[{"[", "ti", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], ",", 
         "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringJoin", "[", "vars", "]"}], ",", "structures", ",", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"Riffle", "[", 
            RowBox[{"factorMultiplications", ",", "\"\<;\\n\>\""}], "]"}], 
           "]"}], "<>", "\"\<;\\n\>\"", "<>", 
          RowBox[{"StringJoin", "[", "termSummation", "]"}], "<>", 
          "\"\<;\>\""}], ",", "spinorFactors"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"c09f9368-fb3d-45c1-b91a-7f903b8522e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Private", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"generateDiracLorentzContractionCode", "[", 
      RowBox[{
      "lorentzSymbols_List", ",", "lorentzprerepl_String", ",", 
       "vectorIds_String"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"\"\<Unhide \>\"", "<>", 
       RowBox[{"stringList", "[", "lorentzSymbols", "]"}], "<>", 
       "\"\<;\n\>\""}], "~~", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"formLorentzTensorIdentities", "===", 
         RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
        RowBox[{
        "\"\<\n*** use Lorentz tensor identities ***\nRepeat;\n\>\"", "~~", 
         RowBox[{"stringLines", "[", "formLorentzTensorIdentities", "]"}], 
         "~~", "\"\<\nEndRepeat;\n.sort\n\>\""}]}], "]"}], "~~", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"combinedTensorIdentities", "===", 
         RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
        RowBox[{
        "\"\<\n*** inserts explicit expressions for combined Lorentz tensors \
***\n\>\"", "~~", 
         RowBox[{"stringLines", "[", "combinedTensorIdentities", "]"}], " ", 
         "~~", "\"\<\n.sort\n\>\""}]}], "]"}], "~~", "lorentzprerepl", "~~", 
      "\"\<\n\>\"", "~~", 
      RowBox[{"If", "[", 
       RowBox[{"finiteTenabled", ",", 
        RowBox[{"generateVectorReplacementsFiniteT", "[", "vectorIds", "]"}], 
        ",", "\"\<\>\""}], "]"}], "~~", "\"\<\n\>\"", "~~", 
      RowBox[{"generateDiracContractionCode", "[", "]"}], "~~", 
      "\"\<\n\>\""}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"generateDisentangledDiracContractionCode", "[", 
      RowBox[{"spinorFactors_List", ",", "lorentzprerepl_String"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"spinorFactors", "===", 
        RowBox[{"{", "}"}]}], ",", 
       "\"\<*** No Dirac traces to perform! ***\\n\\n\>\"", ",", 
       RowBox[{
        RowBox[{"\"\<\n*** Perform Dirac traces first ***\nUnhide \>\"", "<>", 
         RowBox[{"stringList", "[", "spinorFactors", "]"}], "<>", 
         "\"\<;\n\>\""}], "~~", "lorentzprerepl", "~~", "\"\<\n\>\"", "~~", 
        RowBox[{"generateDiracContractionCode", "[", "]"}], "~~", 
        RowBox[{"\"\<\nHide \>\"", "<>", 
         RowBox[{"stringList", "[", "spinorFactors", "]"}], "<>", 
         "\"\<;\n.sort\n\n\>\""}]}]}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"generateDisentangledLorentzContractionCode", "[", 
      RowBox[{"structuresList_List", ",", "lorentzprerepl_String"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"contractionRound", ",", 
         RowBox[{"contractionString", "=", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"structures", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"structuresList", ",", 
            RowBox[{"Except", "[", 
             RowBox[{"{", 
              RowBox[{"_", ",", "1"}], "}"}], "]"}]}], "]"}]}], ",", 
         RowBox[{"trivialStructures", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"structuresList", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"name_", ",", "1"}], "}"}], "\[RuleDelayed]", 
             RowBox[{"name", "<>", "\"\<F1\>\""}]}]}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"contractionRound", "=", 
           RowBox[{
            RowBox[{"Max", "[", 
             RowBox[{"structures", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "-", "1"}]}], 
          ",", 
          RowBox[{"contractionRound", "\[GreaterEqual]", "1"}], ",", 
          RowBox[{"contractionRound", "--"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"contractionString", ",", 
             RowBox[{"\"\<*** contraction round \>\"", "<>", 
              RowBox[{"ToString", "[", "contractionRound", "]"}], "<>", 
              "\"\<***\\n\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", "Drop", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"contractionString", ",", 
             RowBox[{"\"\<Drop \>\"", "<>", 
              RowBox[{"stringList", "[", 
               RowBox[{"Join", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"structures", ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"name_", ",", "factors_"}], "}"}], "/;", 
                    RowBox[{"factors", "==", 
                    RowBox[{"contractionRound", "+", "1"}]}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"name", "<>", "\"\<F\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"contractionRound", "+", "1"}], "]"}]}]}]}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Cases", "[", 
                  RowBox[{"structures", ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"name_", ",", "factors_"}], "}"}], "/;", 
                    RowBox[{"factors", ">", "contractionRound"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"name", "<>", "\"\<F\>\"", "<>", 
                    RowBox[{"ToString", "[", "contractionRound", "]"}]}]}]}], 
                  "]"}]}], "\[IndentingNewLine]", "]"}], "]"}], "<>", 
              "\"\<;\\n\>\""}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"(*", "Local", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"Do", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"contractionString", ",", "\[IndentingNewLine]", 
                RowBox[{"\"\<Local \>\"", "<>", 
                 RowBox[{"First", "[", "structure", "]"}], "<>", "\"\<=\>\"", 
                 "<>", 
                 RowBox[{"First", "[", "structure", "]"}], "<>", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"contractionRound", "+", "1"}], "\[Equal]", 
                    RowBox[{"Last", "[", "structure", "]"}]}], ",", 
                   RowBox[{"\"\<F\>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"contractionRound", "+", "1"}], "]"}]}], ",", 
                   "\"\<\>\""}], "]"}], "<>", "\"\<*\>\"", "<>", 
                 RowBox[{"First", "[", "structure", "]"}], "<>", "\"\<F\>\"", 
                 "<>", 
                 RowBox[{"ToString", "[", "contractionRound", "]"}], "<>", 
                 "\"\<;\\n\>\""}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
             RowBox[{"{", 
              RowBox[{"structure", ",", 
               RowBox[{"Cases", "[", 
                RowBox[{"structures", ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"_", ",", "factors_"}], "}"}], "/;", 
                  RowBox[{"factors", ">", "contractionRound"}]}]}], "]"}]}], 
              "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Contract", " ", "Lorentz"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"applying", " ", "post", " ", "repl", " ", "rules", " ", 
             RowBox[{"doesn", "'"}], "t", " ", "make", " ", "sense", " ", 
             "after", " ", "every", " ", "contraction", " ", "round", " ", 
             "since", " ", "the", " ", "momenta", " ", "are", " ", "guarded", 
             " ", "by", " ", "MOMSUMxxx"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"contractionString", ",", "\"\<.sort\\n\\n\>\""}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"(*", 
         RowBox[{
         "Unhide", " ", "trivial", " ", "structures", " ", "for", " ", 
          "momentum", " ", "replacements"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "trivialStructures", "]"}], ">", "0"}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"contractionString", ",", 
             RowBox[{"\"\<Unhide \>\"", "<>", 
              RowBox[{"stringList", "[", "trivialStructures", "]"}], "<>", 
              "\"\<;\\n.sort\\n\\n\>\""}]}], "]"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", "contractionString", "]"}], "<>", 
          "lorentzprerepl"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"43398c71-a8e8-47d0-b37a-95b798d8e9de"]
}, Closed]],

Cell[CellGroupData[{

Cell["Tensor Classes", \
"Subsection",ExpressionUUID->"372d199e-12d0-44dc-a8b6-eeab2f79c202"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateFormExpressions", "[", 
    RowBox[{
    "expandedDiagrams_List", ",", "lorentzprerepl_String", ",", 
     "vectorIds_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"generateSummationCode", ",", "tmpGroupVar", ",", 
       RowBox[{"numberOfDiagrams", "=", 
        RowBox[{"Length", "[", "expandedDiagrams", "]"}]}], ",", 
       RowBox[{"groupVariables", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"Length", "[", "groupTensorsList", "]"}], "}"}]}], "]"}]}],
        ",", 
       RowBox[{"lorentzVariables", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"defList", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"lorentzSummations", "=", 
        RowBox[{"{", "}"}]}], ",", "groupSummations", ",", "diagramSummation",
        ",", 
       RowBox[{"lorentzStructures", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"diracFactors", "=", 
        RowBox[{"{", "}"}]}], ",", "lorentzContractionCode"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"disentangleLorentzStructures", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"generateSummationCode", "[", 
           RowBox[{"expr_", ",", "preString_", ",", "0"}], "]"}], ":=", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"tmpLorVar", "=", 
               RowBox[{"preString", "<>", "\"\<LX\>\""}]}], ",", 
              "lorentzFormExpressions"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"lorentzFormExpressions", "=", 
              RowBox[{"generateLorentzFormExpressions", "[", 
               RowBox[{"expr", ",", "tmpLorVar"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"defList", ",", 
               RowBox[{"lorentzFormExpressions", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"lorentzStructures", ",", 
               RowBox[{"lorentzFormExpressions", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"lorentzSummations", ",", 
               RowBox[{"lorentzFormExpressions", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"diracFactors", ",", 
               RowBox[{"lorentzFormExpressions", "[", 
                RowBox[{"[", "4", "]"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "tmpLorVar", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"generateSummationCode", "[", 
           RowBox[{"expr_", ",", "preString_", ",", "0"}], "]"}], ":=", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"tmpLorVar", "=", 
              RowBox[{"preString", "<>", "\"\<LX\>\""}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"defList", ",", 
               RowBox[{
               "\"\<Local \>\"", "<>", "tmpLorVar", "<>", "\"\<=\>\"", "<>", 
                RowBox[{"toFormStringLorentz", "[", "expr", "]"}], "<>", 
                "\"\<;\\n\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"lorentzVariables", ",", "tmpLorVar"}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "tmpLorVar", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"generateSummationCode", "[", 
        RowBox[{"expr_", ",", "preString_", ",", "group_"}], "]"}], ":=", 
       RowBox[{"StringJoin", "@", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"tmpGroupVar", "=", 
            RowBox[{"preString", "<>", "\"\<G\>\"", "<>", 
             RowBox[{"ToString", "[", "iGroupExpr", "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{
             RowBox[{"groupVariables", "[", 
              RowBox[{"[", "group", "]"}], "]"}], ",", "tmpGroupVar"}], "]"}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"defList", ",", 
             RowBox[{
             "\"\<Local \>\"", "<>", "tmpGroupVar", "<>", "\"\<=\>\"", "<>", 
              RowBox[{"toFormStringGroup", "[", 
               RowBox[{"expr", "[", 
                RowBox[{"[", 
                 RowBox[{"iGroupExpr", ",", "1"}], "]"}], "]"}], "]"}], "<>", 
              "\"\<;\\n\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"\"\<+\>\"", "<>", "tmpGroupVar", "<>", "\"\<*(\>\"", "<>", 
            RowBox[{"generateSummationCode", "[", 
             RowBox[{
              RowBox[{"expr", "[", 
               RowBox[{"[", 
                RowBox[{"iGroupExpr", ",", "2"}], "]"}], "]"}], ",", 
              "tmpGroupVar", ",", 
              RowBox[{"group", "-", "1"}]}], "]"}], "<>", "\"\<)\>\""}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"iGroupExpr", ",", 
            RowBox[{"Length", "[", "expr", "]"}]}], "}"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"groupSummations", "=", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"defList", ",", 
            RowBox[{"\"\<Local D\>\"", "<>", 
             RowBox[{"ToString", "[", "iDia", "]"}], "<>", 
             "\"\<prefactor=\>\"", "<>", 
             RowBox[{"toFormStringScalar", "[", 
              RowBox[{"expandedDiagrams", "[", 
               RowBox[{"[", 
                RowBox[{"iDia", ",", "1"}], "]"}], "]"}], "]"}], "<>", 
             "\"\<;\\n\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"\"\<Local FTxD\>\"", "<>", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"numberOfDiagrams", "===", "1"}], ",", "\"\<\>\"", ",", 
             RowBox[{"ToString", "[", "iDia", "]"}]}], "]"}], "<>", 
           "\"\<=D\>\"", "<>", 
           RowBox[{"ToString", "[", "iDia", "]"}], "<>", 
           "\"\<prefactor*(\>\"", "<>", 
           RowBox[{"generateSummationCode", "[", 
            RowBox[{
             RowBox[{"expandedDiagrams", "[", 
              RowBox[{"[", 
               RowBox[{"iDia", ",", "2"}], "]"}], "]"}], ",", 
             RowBox[{"\"\<D\>\"", "<>", 
              RowBox[{"ToString", "[", "iDia", "]"}]}], ",", 
             RowBox[{"Length", "[", "groupTensorsList", "]"}]}], "]"}], "<>", 
           "\"\<);\>\""}]}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"iDia", ",", "numberOfDiagrams"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"diagramSummation", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"numberOfDiagrams", "===", "1"}], ",", "\"\<\>\"", ",", 
         RowBox[{"\"\<\n.sort\n\nDrop;\nLocal FTxD=\>\"", "<>", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"\"\<+FTxD\>\"", "<>", 
              RowBox[{"ToString", "[", "i", "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "numberOfDiagrams"}], "}"}]}], "]"}], "]"}], 
          "<>", "\"\<;\>\""}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"lorentzContractionCode", "=", 
       RowBox[{"If", "[", 
        RowBox[{"disentangleLorentzStructures", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"generateDisentangledDiracContractionCode", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", "diracFactors", "]"}], ",", 
            "lorentzprerepl"}], "]"}], "<>", 
          RowBox[{"generateDisentangledLorentzContractionCode", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"lorentzStructures", ",", "1"}], "]"}], ",", 
            "lorentzprerepl"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"generateDiracLorentzContractionCode", "[", 
          RowBox[{
          "lorentzVariables", ",", "lorentzprerepl", ",", "vectorIds"}], 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"StringJoin", "[", "defList", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"stringList", "[", "#", "]"}], "&"}], ",", 
           RowBox[{"Reverse", "[", "groupVariables", "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "lorentzContractionCode", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"disentangleLorentzStructures", ",", 
            RowBox[{
             RowBox[{"stringLines", "[", "lorentzSummations", "]"}], "<>", 
             "\"\<\\n\>\""}], ",", "\"\<\>\""}], "]"}], "<>", 
          RowBox[{"stringLines", "[", "groupSummations", "]"}], "<>", 
          "diagramSummation"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"c56912a1-ae3e-4bfa-9971-270a0edae17f"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["FormTrace", \
"Section",ExpressionUUID->"d0394500-61b9-46eb-9ffd-18aeaf16f78a"],

Cell[CellGroupData[{

Cell["Time Measurement", \
"Subsection",ExpressionUUID->"1e14524d-a6ef-423e-bc46-4e2dee16d88d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"measureEvaluationTime", "[", 
    RowBox[{"False", ",", 
     RowBox[{"message_String", ":", "\"\<\>\""}], ",", "arg_"}], "]"}], ":=", 
   
   RowBox[{"ReleaseHold", "[", "arg", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"measureEvaluationTime", "[", 
    RowBox[{"True", ",", 
     RowBox[{"message_String", ":", "\"\<\>\""}], ",", "arg_"}], "]"}], ":=", 
   
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", "=", 
       RowBox[{"ReleaseHold", "[", 
        RowBox[{"AbsoluteTiming", "[", "arg", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"ReleaseHold", "[", "message", "]"}], ",", 
        RowBox[{"First", "[", "res", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Last", "[", "res", "]"}]}]}], 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Return", "[", "]"}], " ", "must", " ", "not", " ", "be", " ", 
      "used", " ", "here"}], "*)"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"measureEvaluationTime", ",", "HoldRest"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MeasureEvaluationTime", "[", 
    RowBox[{"arg_", ",", 
     RowBox[{"message_String", ":", "\"\<\>\""}]}], "]"}], ":=", 
   RowBox[{"measureEvaluationTime", "[", 
    RowBox[{"True", ",", "message", ",", "arg"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"MeasureEvaluationTime", ",", "HoldAll"}], "]"}], ";"}]}], "Input",
 
 InitializationCell->
  True,ExpressionUUID->"23295d76-01eb-4396-ad6e-8f84ce4d6da4"]
}, Closed]],

Cell[CellGroupData[{

Cell["Index Replacement", \
"Subsection",ExpressionUUID->"f2622952-4e38-40b2-9649-8faad1c189e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"{", "momenta", "}"}], ",", 
    RowBox[{"{", "momentamomentumsum", "}"}], ",", 
    RowBox[{"{", "extramomenta", "}"}], ",", "..."}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"getAllIndices", "[", "expr_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"momenta", ",", "momentaall", ",", "momentams"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"momenta", "=", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"momentumFromExpr", "[", "expr", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"momentaall", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"momenta", ",", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"ToExpression", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"StringSplit", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Plus\>\"", ",", "\"\<Minus\>\"", ",", 
                    "\"\<Times\>\""}], "}"}]}], "]"}], ",", 
                    RowBox[{"\"\<MOMSUM\>\"", "\[Rule]", "\"\<\>\""}]}], 
                   "]"}], "&"}], ",", "momenta"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"NumericQ", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"momentams", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"momenta", ",", 
           RowBox[{
            RowBox[{"StringMatchQ", "[", 
             RowBox[{
              RowBox[{"ToString", "[", "#", "]"}], ",", 
              RowBox[{
              "RegularExpression", "[", "\"\<MOMSUM(\\\\S*)\>\"", "]"}]}], 
             "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"momenta", ",", "momentams", ",", 
            RowBox[{"Complement", "[", 
             RowBox[{"momentaall", ",", "momenta", ",", "momentams"}], "]"}], 
            ",", 
            RowBox[{"lorentzFromExpr", "[", "expr", "]"}], ",", 
            RowBox[{"spinorFromExpr", "[", "expr", "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"getAdjGroupIndices", "[", 
             RowBox[{"expr", ",", "#"}], "]"}], "&"}], "/@", " ", 
           "groupNames"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"getFundGroupIndices", "[", 
             RowBox[{"expr", ",", "#"}], "]"}], "&"}], "/@", " ", 
           "groupNames"}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"generatePrefixedList", "[", 
      RowBox[{"prefix_String", ",", "length_Integer"}], "]"}], ":=", 
     RowBox[{"ToExpression", "/@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"prefix", "~~", 
         RowBox[{"ToString", "[", "i", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "length"}], "}"}]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getAllIndicesReplaced", "[", "l_List", "]"}], ":=", 
     RowBox[{"Join", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"generatePrefixedList", "[", 
         RowBox[{
          RowBox[{"prefixListIndices", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"Length", "[", 
           RowBox[{"l", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "l", "]"}]}], "}"}]}], "]"}], "]"}]}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"generateReplList", "[", 
      RowBox[{"from_", ",", "to_"}], "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"from", "[", 
         RowBox[{"[", "gri1", "]"}], "]"}], "\[Rule]", 
        RowBox[{"to", "[", 
         RowBox[{"[", "gri1", "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"gri1", ",", 
         RowBox[{"Length", "[", "from", "]"}]}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"b2a2f2a1-665c-4012-baa4-f6cebfecba68"]
}, Closed]],

Cell[CellGroupData[{

Cell["Generate FORM File", \
"Subsection",ExpressionUUID->"080775ce-b92f-4bd8-acd1-b11f251377f9"],

Cell[CellGroupData[{

Cell["Declaration of Variables", \
"Subsubsection",ExpressionUUID->"a9da13ff-40e6-4c1c-949d-19029502f3fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"declareGenericDs", "[", "shortGroupName_String", "]"}], ":=", 
    RowBox[{"\"\<Symbol \>\"", "~~", 
     RowBox[{"stringList", "@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "~~", "shortGroupName"}], "&"}], ",", 
        "formColorPackageGenericD"}], "]"}]}], "~~", "\"\<;\>\""}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"generateDeclareHeader", "[", "allindicesrepl_", "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"dimVars", "===", 
       RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
      RowBox[{
      "\"\<\n*** declaring dimension symbols ***\nSymbol \>\"", "~~", 
       RowBox[{"stringList", "[", "dimVars", "]"}], "~~", "\"\<;\>\""}]}], 
     "]"}], "~~", 
    "\"\<\n\n*** declaring vectors ***\nAutoDeclare Vector \>\"", "~~", 
    RowBox[{"prefixListIndices", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "~~", 
    RowBox[{"If", "[", 
     RowBox[{"finiteTenabled", ",", "\"\<, vecsx\>\"", ",", "\"\<\>\""}], 
     "]"}], "~~", 
    "\"\<;\n\n*** declaring Lorentz indices ***\ndimension \>\"", "~~", 
    RowBox[{"ToString", "[", 
     RowBox[{"First", "[", "lorentzDimensions", "]"}], "]"}], "~~", 
    "\"\<;\nIndex g5=0;\nSet setg5:g5;\nAutoDeclare Index \>\"", "~~", 
    RowBox[{"prefixListIndices", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "~~", 
    "\"\<;\n\n*** declaring Dirac indices ***\ndimension \>\"", "~~", 
    RowBox[{"ToString", "[", 
     RowBox[{"Last", "[", "lorentzDimensions", "]"}], "]"}], "~~", 
    "\"\<;\nAutoDeclare Index \>\"", "~~", 
    RowBox[{"prefixListIndices", "[", 
     RowBox[{"[", "3", "]"}], "]"}], "~~", "\"\<;\n\>\"", "~~", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "groupNames", "]"}], "==", "0"}], ",", 
      "\"\<\>\"", ",", 
      RowBox[{
      "\"\<\n*** declaring adjoint group indices ***\ndimension NA;\n\
AutoDeclare Index \>\"", "~~", 
       RowBox[{"stringList", "@", 
        RowBox[{"Take", "[", 
         RowBox[{"prefixListIndices", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "prefixListLorentzDirac", "]"}], "+", 
             "1"}], ",", 
            RowBox[{
             RowBox[{"Length", "[", "prefixListLorentzDirac", "]"}], "+", 
             RowBox[{"Length", "[", "groupNames", "]"}]}]}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"all", " ", "adjoined", " ", "prefixes"}], "*)"}], "]"}]}], 
       "~~", "\"\<;\n\n*** declaring fundamental group indices ***\ndimension \
NR;\nAutoDeclare Index \>\"", "~~", 
       RowBox[{"stringList", "@", 
        RowBox[{"Take", "[", 
         RowBox[{"prefixListIndices", ",", 
          RowBox[{"-", 
           RowBox[{"Length", "[", "groupNames", "]"}]}]}], 
         RowBox[{"(*", 
          RowBox[{"all", " ", "fundamental", " ", "prefixes"}], "*)"}], 
         "]"}]}], "~~", "\"\<;\n\>\""}]}], "]"}], "~~", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"partialtrace", "\[Equal]", "False"}], ",", "\"\<\>\"", ",", 
      RowBox[{
      "\"\<\n*** declare Lorentz and Dirac tensors\nCFunction \
FTxdeltaLorentz,FTxdeltaDirac,FTxgamma,FTxgamma5,FTxepsLorentz;\n\n*** \
declare index sets to distinguish deltas\nSet lorIndices: \>\"", "~~", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"allindicesrepl", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}], "\[GreaterEqual]", "2"}], 
         ",", 
         RowBox[{"stringList", "[", 
          RowBox[{"allindicesrepl", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "\"\<lor1,lor2\>\""}], 
        "]"}], "~~", "\"\<;\nSet spiIndices: \>\"", "~~", 
       RowBox[{"stringList", "[", 
        RowBox[{"allindicesrepl", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "]"}], "~~", "\"\<;\n\n\>\"", "~~", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "groupNames", "]"}], "==", "0"}], ",", 
         "\"\<\>\"", ",", 
         RowBox[{"\"\<\n*** declare group names and tensors\nSymbol \>\"", "~~", 
          RowBox[{"stringList", "[", "groupNames", "]"}], "~~", 
          "\"\<;\nCFunction FTxT,FTxF,FTxdeltaFund,FTxdeltaAdj\>\"", "~~", 
          RowBox[{"If", "[", 
           RowBox[{
           "partialtrace", ",", "\"\<,FTxepsFund,FTxepsAdj\>\"", ",", 
            "\"\<\>\""}], "]"}], "~~", "\"\<;\n\n\>\"", "~~", 
          RowBox[{"stringLines", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"\"\<*** \>\"", "~~", 
              RowBox[{"ToString", "@", 
               RowBox[{"groupNames", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "~~", 
              "\"\< index sets\nSet a\>\"", "~~", 
              RowBox[{"ToString", "@", 
               RowBox[{"shortGroupNames", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "~~", "\"\<Indices: \>\"", "~~", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"allindicesrepl", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", "+", "3"}], "]"}], "]"}], "]"}], 
                 "\[GreaterEqual]", "2"}], ",", 
                RowBox[{"stringList", "[", 
                 RowBox[{"allindicesrepl", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", "+", "3"}], "]"}], "]"}], "]"}], ",", 
                RowBox[{"\"\<a\>\"", "~~", 
                 RowBox[{"ToString", "@", 
                  RowBox[{"shortGroupNames", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "~~", "\"\<1,a\>\"", "~~", 
                 RowBox[{"ToString", "@", 
                  RowBox[{"shortGroupNames", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "~~", "\"\<2\>\""}]}], 
               "]"}], "~~", "\"\<;\nSet f\>\"", "~~", 
              RowBox[{"ToString", "@", 
               RowBox[{"shortGroupNames", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "~~", "\"\<Indices: \>\"", "~~", 
              RowBox[{"stringList", "[", 
               RowBox[{"allindicesrepl", "[", 
                RowBox[{"[", 
                 RowBox[{"i", "+", "3", "+", 
                  RowBox[{"Length", "[", "groupNames", "]"}]}], "]"}], "]"}], 
               "]"}], "~~", "\"\<;\>\""}], "\[IndentingNewLine]", ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "shortGroupNames", "]"}]}], "}"}]}], 
            "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "]"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"f720c099-50b9-4a8c-9830-ec931023d87d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Momentum Replacements", \
"Subsubsection",ExpressionUUID->"b6faa422-e899-479a-aaec-5e8447d3f953"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "generateVectorReplacementsFiniteT", "[", "vectorIds_String", "]"}], ":=", 
    RowBox[{
    "\"\<\n*******************************************************************\
*************\n* Replace vec3 with dummy momenta for finite T\n* (to be done \
after inserting explicit tensor expressions)\n\
******************************************************************************\
**\n\>\"", "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"combinedTensorIdentities", "===", 
        RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
       RowBox[{
       "\"\<* resolve numerical factors in vec and sp (required for combined \
tensors)\n.sort\nS tmpvecrepl1, tmpvecrepl2;\n\>\"", "~~", 
        RowBox[{
        "formBlockArgument", "[", 
         "\"\<\nFactArg FTxvecs;\nid \
FTxvecs(mom?,-1,1,lorx1?)=-FTxvecs(mom,lorx1);\nid \
FTxvecs(tmpvecrepl1?,mom?,lorx1?)=tmpvecrepl1*FTxvecs(mom,lorx1);\nFactArg \
FTxvec;\nid FTxvec(mom?,-1,1,lorx1?)=-FTxvec(mom,lorx1);\nid \
FTxvec(tmpvecrepl1?,mom?,lorx1?)=tmpvecrepl1*FTxvec(mom,lorx1);\nFactarg \
FTxsp;\nid \
FTxsp(tmpvecrepl1?,mom1?,tmpvecrepl2?,mom2?)=tmpvecrepl1*tmpvecrepl2*FTxsp(\
mom1,mom2);\nid FTxsp(tmpvecrepl1?,mom1?,mom2?)=tmpvecrepl1*FTxsp(mom1,mom2);\
\nid FTxsp(mom1?,tmpvecrepl1?,mom2?)=tmpvecrepl1*FTxsp(mom1,mom2);\nid \
FTxsp(mom1?,-1,1,mom2?)=-FTxsp(mom1,mom2);\nid \
FTxsp(mom1?,-1,1,tmpvecrepl1?,mom2?)=-tmpvecrepl1*FTxsp(mom1,mom2);\nid \
FTxsp(tmpvecrepl1?,mom1?,mom2?,-1,1)=-tmpvecrepl1*FTxsp(mom1,mom2);\nid \
FTxsp(mom1?,mom2?,-1,1)=-FTxsp(mom1,mom2);\nid \
FTxsp(mom1?,-1,1,mom2?,-1,1)=FTxsp(mom1,mom2);\nFactarg FTxsps;\nid \
FTxsps(tmpvecrepl1?,mom1?,tmpvecrepl2?,mom2?)=tmpvecrepl1*tmpvecrepl2*FTxsps(\
mom1,mom2);\nid \
FTxsps(tmpvecrepl1?,mom1?,mom2?)=tmpvecrepl1*FTxsps(mom1,mom2);\nid \
FTxsps(mom1?,tmpvecrepl1?,mom2?)=tmpvecrepl1*FTxsps(mom1,mom2);\nid \
FTxsps(mom1?,-1,1,mom2?)=-FTxsps(mom1,mom2);\nid \
FTxsps(mom1?,-1,1,tmpvecrepl1?,mom2?)=-tmpvecrepl1*FTxsps(mom1,mom2);\nid \
FTxsps(tmpvecrepl1?,mom1?,mom2?,-1,1)=-tmpvecrepl1*FTxsps(mom1,mom2);\nid \
FTxsps(mom1?,mom2?,-1,1)=-FTxsps(mom1,mom2);\nid \
FTxsps(mom1?,-1,1,mom2?,-1,1)=FTxsps(mom1,mom2);\>\"", "]"}]}]}], "]"}], 
     "~~", "\"\<\n\>\"", "~~", 
     RowBox[{"formBlockArgument", "[", 
      RowBox[{"\"\<id FTxvecs(mom1?,0)=0;\\n\>\"", "~~", "vectorIds"}], "]"}],
      "~~", "\"\<\n.sort\>\""}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"undoCombinedMomentaCode", "[", "momentaIds_String", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"momentaIds", "===", "\"\<\>\""}], ",", "\"\<\>\"", ",", 
     RowBox[{
     "\"\<\n*** undo combined momentum labels ***\n\>\"", "~~", "momentaIds", 
      "~~", "\"\<\n.sort\>\""}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"7a7e6521-73ec-4029-a875-b8e28bc8c43e"]
}, Closed]],

Cell[CellGroupData[{

Cell["Dirac Contraction", \
"Subsubsection",ExpressionUUID->"6c7f0a4a-74f2-4c42-b1d1-59d6e66c9c9b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateDiracContractionCode", "[", "]"}], ":=", 
   RowBox[{
   "\"\<\n********************************************************************\
************\n* Performs Lorentz/Dirac contraction\n\
******************************************************************************\
**\n\n*** combine Dirac matrices to Dirac string ***\nrepeat id \
gamma(?lor1,spi1?,spi2?)*gamma(?lor2,spi2?,spi3?)=gamma(?lor1,?lor2,spi1,spi3)\
;\n.sort\n\n*** convert Dirac strings without open indices to FORM gamma \
matrices ***\nunittrace \>\"", "~~", 
    RowBox[{"ToString", "[", 
     RowBox[{"Last", "[", "lorentzDimensions", "]"}], "]"}], "~~", 
    "\"\<;\n\>\"", "~~", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"First", "[", "lorentzDimensions", "]"}], "===", "4"}], ",", 
      "\"\<\nRepeat;\ncontract 0;\nid once gamma(?mom1,spi1?,spi1?)= \
g_(1,?mom1);\nid g_(1,g5)=g_(1,5_);\nTrace4 1;\nEndRepeat;\n\>\"", ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"fastgamma5tracedneq4", "\[Equal]", "True"}], ",", 
         "\"\<#define FastGamma5Trace \\\"1\\\"\>\"", ",", "\"\<\>\""}], 
        "]"}], "~~", 
       "\"\<\n* handle gamma5s\n\n* guard external epsilons\nid \
e_(lorx1?,lorx2?,lorx3?,lorx4?)=FTxeExt(lorx1,lorx2,lorx3,lorx4);\n\nRepeat;\n\
if( match(gamma(?mom1, spi1?,spi1?)));\n#call PreDiracTrace5\n* first \
contract external epsilons (only those related to current spin line)\nrepeat \
id FTxTr(?lorx1,lorx2?,?lorx3)*FTxeExt(?lorx4,lorx2?,?lorx5)=FTxTr(?lorx1,\
lorx2,?lorx3)*e_(?lorx4,lorx2,?lorx5);\nrepeat id \
FTxeInt(?lorx1,lorx2?,?lorx3)*FTxeExt(?lorx4,lorx2?,?lorx5)=FTxeInt(?lorx1,\
lorx2,?lorx3)*e_(?lorx4,lorx2,?lorx5);\ncontract 0;\n*id \
e_(lorx1?,lorx2?,lorx3?,lorx4?)=FTxeExt(lorx1,lorx2,lorx3,lorx4);\n\n* now \
contract internal epsilons (only those related to current spin line)\nrepeat \
id FTxTr(?lorx1,lorx2?,?lorx3)*FTxeInt(?lorx4,lorx2?,?lorx5)=FTxTr(?lorx1,\
lorx2,?lorx3)*e_(?lorx4,lorx2,?lorx5);\nrepeat id \
FTxeInt(?lorx1,lorx2?,?lorx3)*e_(lorx2?,lorx4?,lorx5?,lorx6?)=e_(?lorx1,lorx2,\
?lorx3)*e_(lorx2,lorx4,lorx5,lorx6);\ncontract 0;\n* id \
e_(lorx1?,lorx2?,lorx3?,lorx4?)=FTxeInt(lorx1,lorx2,lorx3,lorx4);\nendif;\n\
EndRepeat;\n.sort\n* perform actual dirac traces\nRepeat;\nid,once,FTxTr(?a) \
= g_(1,?a);\nTracen,1;\nEndRepeat;\n*convert everything to standard epsilons \
for output\nid FTxeInt(?lorx)=e_(?lorx);\nid FTxeExt(?lorx)=e_(?lorx);\n\n\
\>\""}]}], "]"}], "~~", "\"\<\n.sort\>\""}]}], ";"}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"588d63e8-ef3f-49a7-95ee-f087fa70613b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Group Contraction", \
"Subsubsection",ExpressionUUID->"e66d0234-86e1-4b30-8afb-540b601535c9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"generateGroupContractionCode", "[", 
     RowBox[{
     "id_Integer", ",", "groupVariables_List", ",", "groupprerepl_", ",", 
      "grouppostrepl_"}], "]"}], ":=", 
    RowBox[{
    "\"\<\n*******************************************************************\
*************\n* Perform \>\"", "~~", 
     RowBox[{"ToString", "[", 
      RowBox[{"groupNames", "[", 
       RowBox[{"[", "id", "]"}], "]"}], "]"}], "~~", 
     "\"\< trace\n\
******************************************************************************\
**\n\>\"", "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"id", "\[Equal]", "1"}], ",", 
       RowBox[{"\"\<Hide;\\nNhide \>\"", "~~", 
        RowBox[{"groupVariables", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<;\>\""}], ",", 
       RowBox[{"\"\<Unhide \>\"", "~~", 
        RowBox[{"groupVariables", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<;\>\""}]}], "]"}], "~~", 
     "\"\<\n\>\"", "~~", 
     RowBox[{"formPreGroupTraceIdentities", "[", 
      RowBox[{"[", "id", "]"}], "]"}], "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"groupprerepl", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "=!=", "\"\<\>\""}], ",", 
       RowBox[{"\"\<\n*** user-defined prerepl ***\n\>\"", "~~", 
        RowBox[{"groupprerepl", "[", 
         RowBox[{"[", "id", "]"}], "]"}]}], ",", "\"\<\>\""}], "]"}], "~~", 
     "\"\<\n\>\"", "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"groupTracingAlgorithms", "[", 
         RowBox[{"[", 
          RowBox[{"id", ",", "3"}], "]"}], "]"}], ">", "0"}], ",", 
       RowBox[{"\"\<.sort\>\"", "~~", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"groupTracingAlgorithms", "[", 
            RowBox[{"[", 
             RowBox[{"id", ",", "3"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
          "\"\<\n*** set the dimension to NA for sums ***\nDimension NA;\>\"",
           ",", "\"\<\n*** set the dimension to NR for sums ***\nDimension \
NR;\>\""}], "]"}]}], ",", "\"\<\>\""}], "]"}], "~~", 
     "\"\<\ncontract 0;\n\>\"", "~~", 
     RowBox[{"groupTracingAlgorithms", "[", 
      RowBox[{"[", 
       RowBox[{"id", ",", "1"}], "]"}], "]"}], "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"groupTypes", "[", 
          RowBox[{"[", "id", "]"}], "]"}], "===", "GenericGroup"}], "&&", 
        RowBox[{"Not", "[", "partialtrace", "]"}]}], ",", 
       "\"\<\n#call simpli\>\"", ",", "\"\<\>\""}], "]"}], "~~", 
     "\"\<\n.sort\>\"", "~~", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"grouppostrepl", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "=!=", "\"\<\>\""}], ",", 
       RowBox[{"\"\<\n*** user-defined postrepl ***\n\>\"", "~~", 
        RowBox[{"grouppostrepl", "[", 
         RowBox[{"[", "id", "]"}], "]"}]}], ",", "\"\<\>\""}], "]"}], "~~", 
     "\"\<\n\>\"", "~~", 
     RowBox[{"If", "[", 
      RowBox[{"partialtrace", ",", 
       RowBox[{"\"\<*undo Ts for partial trace\nrepeat;\nid,once,T(f\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x1?,f\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x2?,?a,a\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x1?,a\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x2?) = T(f\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x1,f\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x3,?a,a\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x1)*T(f\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x3,f\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x2,a\>\"", "~~", 
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<x2); \nsum f\>\"", "~~", 
        
        RowBox[{"shortGroupNames", "[", 
         RowBox[{"[", "id", "]"}], "]"}], "~~", 
        "\"\<x3;\nendrepeat;\n*replace epsilon\n#call replaceepsilon\n\>\""}],
        ",", "\"\<\>\""}], "]"}], "~~", "\"\<\n\>\"", "~~", 
     RowBox[{"formPostGroupRenamingRules", "[", 
      RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<\n\>\"", "~~", 
     RowBox[{"formGenericDReplacementRules", "[", 
      RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<\n\>\"", "~~", 
     RowBox[{"If", "[", 
      RowBox[{"partialtrace", ",", 
       RowBox[{"formBlockArgument", "[", 
        RowBox[{
         RowBox[{"formPostGroupTensorRenamingRules", "[", 
          RowBox[{"[", "id", "]"}], "]"}], ",", "1"}], "]"}], ",", 
       "\"\<\>\""}], "]"}], "~~", "\"\<\n.sort\nHide \>\"", "~~", 
     RowBox[{"groupVariables", "[", 
      RowBox[{"[", "id", "]"}], "]"}], "~~", "\"\<;\n.sort\>\""}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"generateExtraGroupPrereplLists", "[", 
    RowBox[{"expr_List", ",", "listhead_"}], "]"}], ":=", 
   RowBox[{"stringLines", "[", 
    RowBox[{"Last", "/@", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"expr", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "@", "#"}], "===", "List"}], "&"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "listhead"}], "&"}]}], 
      "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"a8b15605-5233-43ef-99dc-f7033b253f9b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bracketing and Output", \
"Subsubsection",ExpressionUUID->"ec244bf7-c80e-4c93-836b-0cfc5eca3295"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"generateBracketingString", "[", "bracket_", "]"}], ":=", 
    RowBox[{"\"\<\nbracket \>\"", "~~", 
     RowBox[{"stringList", "[", "bracket", "]"}], "~~", 
     "\"\<;\n.sort\n\n\>\"", "~~", 
     RowBox[{"stringLines", "@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
        "\"\<Local FTxDcoeff\>\"", "~~", "bra", "~~", "\"\<=FTxD[\>\"", "~~", 
         "bra", "~~", "\"\<];\>\""}], ",", 
        RowBox[{"{", 
         RowBox[{"bra", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "\"\<1\>\"", "}"}], ",", 
            RowBox[{"ToString", "/@", "bracket"}]}], "]"}]}], "}"}]}], 
       "]"}]}], "~~", "\"\<\n.sort\>\""}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"generateExportCode", "[", 
    RowBox[{
    "format_String", ",", "bracket_List", ",", "optimization_String", ",", 
     "resFileName_String", ",", "exportResVar_String", ",", 
     "exportTmpVar_String", ",", "exportVarType_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"absResFileName", ",", 
       RowBox[{"exportString", "=", 
        RowBox[{"{", "}"}]}], ",", "tmpFileName", ",", "insertPosition", ",", 
       "absResFileNameBracket"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "use", " ", "different", " ", "absResFileName", " ", "for", " ", 
       "Windows", " ", "and", " ", "Unix"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"absResFileName", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"$OperatingSystem", "===", "\"\<Windows\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringTake", "[", 
               RowBox[{"resFileName", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}], "===", 
              "\"\<:\\\\\>\""}], ",", "resFileName", ",", 
             RowBox[{"FileNameJoin", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Directory", "[", "]"}], ",", "resFileName"}], "}"}], 
              "]"}]}], "]"}], ",", 
           RowBox[{"\"\<\\\\\>\"", "\[Rule]", "\"\<\\\\\\\\\>\""}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{"resFileName", ",", "1"}], "]"}], "===", 
            "$PathnameSeparator"}], ",", "resFileName", ",", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Directory", "[", "]"}], ",", "resFileName"}], "}"}], 
            "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"import", " ", "to", " ", "Mathematica"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"format", "===", "\"\<mathematica\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "bracket", "]"}], ">", "0"}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{"FormTrace", "::", "nobracketing"}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{
          "\"\<\nFormat mathematica;\n#write <\>\"", "~~", "absResFileName", 
           "~~", "\"\<> \\\"(%E)\\\", FTxD\n\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"export", " ", "to", " ", "C"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"exportString", ",", 
        RowBox[{
        "\"\<\nExtraSymbols,array,\>\"", "~~", "exportTmpVar", "~~", 
         "\"\<;\nFormat \>\"", "~~", "format", "~~", "\"\<;\nFormat \>\"", "~~",
          "optimization", "~~", "\"\<;\n\>\""}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "generate", " ", "a", " ", "separate", " ", "file", " ", "for", " ", 
        "each", " ", "bracketing", " ", "coefficient", " ", "if", " ", 
        "bracketing", " ", "is", " ", "enabled"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "bracket", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tmpFileName", "=", 
          RowBox[{"Last", "[", 
           RowBox[{"FileNameSplit", "[", "absResFileName", "]"}], "]"}]}], 
         ";", 
         RowBox[{"(*", 
          RowBox[{
          "extract", " ", "pure", " ", "file", " ", "name", " ", "just", " ", 
           "in", " ", "case", " ", "the", " ", "path", " ", "contains", " ", 
           "dots"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"insertPosition", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"StringContainsQ", "[", 
             RowBox[{"tmpFileName", ",", "\"\<.\>\""}], "]"}], ",", 
            RowBox[{"First", "[", 
             RowBox[{
              RowBox[{"Last", "[", 
               RowBox[{"StringPosition", "[", 
                RowBox[{"tmpFileName", ",", "\"\<.\>\""}], "]"}], "]"}], "-", 
              
              RowBox[{"StringLength", "[", "tmpFileName", "]"}], "-", "2"}], 
             "]"}], ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"exportString", ",", 
           RowBox[{"\"\<\n\>\"", "<>", 
            RowBox[{"StringJoin", "@@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"absResFileNameBracket", "=", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"insertPosition", "===", "0"}], ",", 
                   RowBox[{"absResFileName", "<>", "bracketStr"}], ",", 
                   RowBox[{"StringInsert", "[", 
                    RowBox[{"absResFileName", ",", 
                    RowBox[{"\"\<_\>\"", "<>", "bracketStr"}], ",", " ", 
                    "insertPosition"}], "]"}]}], "]"}]}], ";", 
                RowBox[{
                "\"\<\n*** coefficient \>\"", "~~", "bracketStr", "~~", 
                 "\"\< ***\n#if termsin(FTxDcoeff\>\"", "~~", "bracketStr", 
                 "~~", "\"\<) == 0\n#write<\>\"", "~~", 
                 "absResFileNameBracket", "~~", "\"\<>\\\"\>\"", "~~", 
                 "exportResVar", "~~", "\"\<_\>\"", "~~", 
                 RowBox[{"ToUpperCase", "[", "bracketStr", "]"}], "~~", 
                 "\"\<= %e;\\\",FTxDcoeff\>\"", "~~", "bracketStr", "~~", 
                 "\"\<\n#else\n#optimize FTxDcoeff\>\"", "~~", "bracketStr", "~~", 
                 RowBox[{"\"\<;\>\"", "<>", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"format", "===", "\"\<C\>\""}], ",", 
                    RowBox[{
                    "\"\<\n#write<\>\"", "~~", "absResFileNameBracket", "~~", 
                    "\"\<>\\\"\>\"", "~~", "exportVarType", "~~", "\"\< \>\"",
                     "~~", "exportTmpVar", "~~", 
                    "\"\<[{`optimmaxvar_'+1}];\\\"\>\""}], ",", "\"\<\>\""}], 
                   "]"}], "<>", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"format", "===", "\"\<fortran90\>\""}], ",", 
                    RowBox[{
                    "\"\<\n#write<\>\"", "~~", "absResFileNameBracket", "~~", 
                    "\"\<>\\\"\>\"", "~~", "exportVarType", "~~", 
                    "\"\< :: \>\"", "~~", "exportTmpVar", "~~", 
                    "\"\<({`optimmaxvar_'+1})\\\"\>\""}], ",", "\"\<\>\""}], 
                   "]"}], "<>", "\"\<\n#write<\>\""}], "~~", 
                 "absResFileNameBracket", "~~", 
                 "\"\<>\\\"%O\\\"\n#write<\>\"", "~~", 
                 "absResFileNameBracket", "~~", "\"\<>\\\"\>\"", "~~", 
                 "exportResVar", "~~", "\"\<_\>\"", "~~", 
                 RowBox[{"ToUpperCase", "[", "bracketStr", "]"}], "~~", 
                 "\"\<= %e;\\\",FTxDcoeff\>\"", "~~", "bracketStr", "~~", 
                 "\"\<\n#clearoptimize\n#endif\n\>\""}]}], ",", 
               RowBox[{"{", 
                RowBox[{"bracketStr", ",", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"{", "\"\<1\>\"", "}"}], ",", 
                   RowBox[{"ToString", "/@", "bracket"}]}], "]"}]}], "}"}]}], 
              "]"}]}]}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"exportString", ",", 
           RowBox[{
           "\"\<\n#if termsin(FTxD) == 0\n#write<\>\"", "~~", 
            "absResFileName", "~~", "\"\<>\\\"\>\"", "~~", "exportResVar", "~~", 
            RowBox[{"\"\<= %e;\\\",FTxD\n#else\n#optimize FTxD;\>\"", "<>", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"format", "===", "\"\<C\>\""}], ",", 
               RowBox[{
               "\"\<\n#write<\>\"", "~~", "absResFileName", "~~", 
                "\"\<>\\\"\>\"", "~~", "exportVarType", "~~", "\"\< \>\"", "~~",
                 "exportTmpVar", "~~", "\"\<[{`optimmaxvar_'+1}];\\\"\>\""}], 
               ",", "\"\<\>\""}], "]"}], "<>", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"format", "===", "\"\<fortran90\>\""}], ",", 
               RowBox[{
               "\"\<\n#write<\>\"", "~~", "absResFileName", "~~", 
                "\"\<>\\\"\>\"", "~~", "exportVarType", "~~", "\"\< :: \>\"", 
                "~~", "exportTmpVar", "~~", 
                "\"\<({`optimmaxvar_'+1})\\\"\>\""}], ",", "\"\<\>\""}], 
              "]"}], "<>", "\"\<\n#write<\>\""}], "~~", "absResFileName", 
            "~~", "\"\<>\\\"%O\\\"\n#write<\>\"", "~~", "absResFileName", 
            "~~", "\"\<>\\\"\>\"", "~~", "exportResVar", "~~", 
            "\"\<= %e\\\",FTxD\n#clearoptimize\n#endif\n\>\""}]}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"StringJoin", "[", "exportString", "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"41cee5bf-abf1-4114-b803-a8429d358bee"]
}, Closed]],

Cell[CellGroupData[{

Cell["Main Module", \
"Subsubsection",ExpressionUUID->"3cb1d017-0eec-4ec6-95c5-6324fecbf3f8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"generateFormFile", "[", 
     RowBox[{
     "expr_", ",", "formFileName_String", ",", "resFileName_String", ",", 
      "optimization_String", ",", "format_String", ",", "prerepl_List", ",", 
      "postrepl_List", ",", "bracket_List", ",", "exportResVar_String", ",", 
      "exportTmpVar_String", ",", "exportVarType_String"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "replacemomenta", ",", "idmomenta1", ",", "id3momenta1", ",", 
        "id3momenta1inv", ",", "momentams", ",", "momenta", ",", "momentaall",
         ",", "allindicesextracted", ",", "allindices", ",", "allindicesrepl",
         ",", "indicesreplrule", ",", "momreplrule", ",", 
        "mathematicavariablelistsreturn", ",", "preambleprerepl", ",", 
        "generalprerepl", ",", "lorentzprerepl", ",", "groupprerepl", ",", 
        "generalpostrepl", ",", "lorentzpostrepl", ",", "grouppostrepl", ",", 
        "formCode", ",", "file", ",", "exprlst", ",", "formexpr", ",", 
        "openIndicesString"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"expr", "===", "Null"}], ",", 
         RowBox[{"Abort", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"measureEvaluationTime", "[", 
        RowBox[{
        "debuggingMode", ",", 
         "\"\<Time needed for converting input, extracting momenta and \
indices: \>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"convert", " ", "input"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"exprlst", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "//.", "combinedMomentumRepl"}], "&"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "[", "expr", "]"}], "===", "List"}], ",", 
               "expr", ",", 
               RowBox[{"{", "expr", "}"}]}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"check", " ", "for", " ", "open", " ", "indices"}], "*)"}],
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"partialtrace", "\[Equal]", "False"}], "||", 
               RowBox[{"format", "=!=", "\"\<mathematica\>\""}]}], ")"}], "&&", 
             RowBox[{"AnyTrue", "[", 
              RowBox[{"exprlst", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"getOpenIndices", "[", "#", "]"}], "=!=", 
                 RowBox[{"{", "}"}]}], "&"}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"openIndicesString", "=", 
              RowBox[{"stringList", "[", 
               RowBox[{"ToString", "/@", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"getOpenIndices", "[", "#", "]"}], "&"}], ",", 
                  "exprlst"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"partialtrace", "\[Equal]", "False"}], ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"FormTrace", "::", "openindices"}], ",", 
                 "openIndicesString"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"format", "=!=", "\"\<mathematica\>\""}], ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"FormTrace", "::", "openindicesexport"}], ",", 
                 "openIndicesString"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"extract", " ", "indices"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"allindicesextracted", "=", 
           RowBox[{"getAllIndices", "[", 
            RowBox[{"Plus", "@@", "exprlst"}], "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "separates", " ", "three", " ", "different", " ", "kinds", " ", 
            "of", " ", "momenta"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"allindices", "=", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Flatten", "[", 
               RowBox[{"allindicesextracted", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3", ";;", "2"}], "]"}], "]"}], "]"}], 
              "}"}], ",", 
             RowBox[{"allindicesextracted", "[", 
              RowBox[{"[", 
               RowBox[{"4", ";;"}], "]"}], "]"}]}], "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"same", " ", "as", " ", "above"}], ",", " ", 
            RowBox[{"but", " ", "all", " ", "momenta", " ", "combined"}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "[", 
             RowBox[{"DuplicateFreeQ", "[", 
              RowBox[{"Flatten", "[", "allindices", "]"}], "]"}], "]"}], ",", 
            
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"GenerateFormFile", "::", "duplicateindicesnames"}], 
              "]"}], ";", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"allindicesrepl", "=", 
           RowBox[{"getAllIndicesReplaced", "[", "allindices", "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{"format", ":", " ", 
            RowBox[{"{", 
             RowBox[{
             "momX", ",", "lorX", ",", "spiX", ",", "adj1", ",", "adj2", ",", 
              "...", ",", "adjN", ",", "fund1", ",", "fund2", ",", "...", ",",
               "fundN"}]}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"indicesreplrule", "=", 
           RowBox[{"generateReplList", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"allindices", "[", 
               RowBox[{"[", 
                RowBox[{"2", ";;"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{"Flatten", "[", 
              RowBox[{"allindicesrepl", "[", 
               RowBox[{"[", 
                RowBox[{"2", ";;"}], "]"}], "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"replacemomenta", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Or", "@@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Not", "[", 
                  RowBox[{"StringFreeQ", "[", 
                   RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"#", ",", "InputForm", ",", 
                    RowBox[{
                    "CharacterEncoding", "\[Rule]", "\"\<ASCII\>\""}]}], 
                    "]"}], ",", "\"\<\\\\\>\""}], "]"}], "]"}], "&"}], ",", 
                RowBox[{"allindicesextracted", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ",", "True", ",", 
             "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"momreplrule", "=", 
           RowBox[{"If", "[", 
            RowBox[{"replacemomenta", ",", 
             RowBox[{"generateReplList", "[", 
              RowBox[{
               RowBox[{"allindices", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"allindicesrepl", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mathematicavariablelistsreturn", "=", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"format", "===", "\"\<mathematica\>\""}], ",", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{"replacemomenta", ",", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"allindices", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"allindicesrepl", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "}"}], "}"}]}], "]"}], ",", 
               RowBox[{"If", "[", 
                RowBox[{"partialtrace", ",", 
                 RowBox[{"Partition", "[", 
                  RowBox[{
                   RowBox[{"Riffle", "[", 
                    RowBox[{
                    RowBox[{"allindices", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;"}], "]"}], "]"}], ",", 
                    RowBox[{"allindicesrepl", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;"}], "]"}], "]"}]}], "]"}], ",", "2"}], 
                  "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "}"}], "}"}]}], "]"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"momenta", "=", 
           RowBox[{"allindicesextracted", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"momentams", "=", 
           RowBox[{"allindicesextracted", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"momentaall", "=", 
           RowBox[{"allindices", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"exprlst", "=", 
           RowBox[{"exprlst", "/.", 
            RowBox[{"Dispatch", "[", 
             RowBox[{"Join", "[", 
              RowBox[{"momreplrule", ",", "indicesreplrule"}], "]"}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "[", "replacemomenta", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "no", " ", "momentum", " ", "replacement", " ", "required"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"idmomenta1", "=", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", "momentams", "]"}], ">", "0"}], ",", 
                RowBox[{"idinvmomentumsums", "[", "momentams", "]"}], ",", 
                "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"id3momenta1", "=", 
              RowBox[{"If", "[", 
               RowBox[{"finiteTenabled", " ", ",", 
                RowBox[{"stringLines", "[", 
                 RowBox[{"replacevec3", "/@", "momenta"}], "]"}], ",", 
                "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"id3momenta1inv", "=", 
              RowBox[{"If", "[", 
               RowBox[{"finiteTenabled", ",", 
                RowBox[{"replacevec3inv", "[", "momenta", "]"}], ",", 
                "\"\<\>\""}], "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"momentum", " ", "replacement", " ", "required"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"idmomenta1", "=", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", "momentams", "]"}], ">", "0"}], ",", 
                RowBox[{"idinvmomentumsumswithrepl", "[", 
                 RowBox[{"momentams", ",", "momreplrule"}], "]"}], ",", 
                "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"id3momenta1", "=", 
              RowBox[{"If", "[", 
               RowBox[{"finiteTenabled", ",", 
                RowBox[{"stringLines", "[", 
                 RowBox[{"replacevec3", "/@", 
                  RowBox[{"(", 
                   RowBox[{"momenta", "/.", "momreplrule"}], ")"}]}], "]"}], 
                ",", "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"id3momenta1inv", "=", 
              RowBox[{"If", "[", 
               RowBox[{"finiteTenabled", ",", 
                RowBox[{"replacevec3inv", "[", 
                 RowBox[{"momenta", "/.", "momreplrule"}], "]"}], ",", 
                "\"\<\>\""}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"format", "=!=", "\"\<mathematica\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "check", " ", "extra", " ", "vars", " ", "list", " ", "for", " ",
               "forbidden", " ", "special", " ", "characters"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"Or", "@@", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Not", "[", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"#", ",", "InputForm", ",", 
                    RowBox[{
                    "CharacterEncoding", "\[Rule]", "\"\<ASCII\>\""}]}], 
                    "]"}], ",", "\"\<\\\\\>\""}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{"extraFormVarsList", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{"FormTrace", "::", "specialchar"}], "]"}], ";", 
                RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "check", " ", "momenta", " ", "for", " ", "forbidden", " ", 
               "special", " ", "characters"}], "*)"}], "\[IndentingNewLine]", 
             
             RowBox[{"If", "[", 
              RowBox[{"replacemomenta", ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{"FormTrace", "::", "specialcharmomentum"}], "]"}], 
                ";", 
                RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "prerepl", " ", "and", " ", "postrepl", " ", "list", " ", 
            "handling"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"AllTrue", "[", 
              RowBox[{
               RowBox[{"Head", "/@", "prerepl"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "===", "List"}], "||", 
                 RowBox[{"#", "===", "String"}]}], "&"}]}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"FormTrace", "::", "invalidprerepl"}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"preambleprerepl", "=", 
           RowBox[{"generateExtraGroupPrereplLists", "[", 
            RowBox[{"prerepl", ",", "PreambleFormRule"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"generalprerepl", "=", 
           RowBox[{"stringLines", "@", 
            RowBox[{"Select", "[", 
             RowBox[{"prerepl", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "@", "#"}], "=!=", "List"}], "&"}]}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"lorentzprerepl", "=", 
           RowBox[{"generateExtraGroupPrereplLists", "[", 
            RowBox[{"prerepl", ",", "LorentzFormRule"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"groupprerepl", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"generateExtraGroupPrereplLists", "[", 
               RowBox[{"prerepl", ",", "#"}], "]"}], "&"}], ",", 
             "groupNames"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"AllTrue", "[", 
              RowBox[{
               RowBox[{"Head", "/@", "postrepl"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "===", "List"}], "||", 
                 RowBox[{"#", "===", "String"}]}], "&"}]}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"FormTrace", "::", "invalidpostrepl"}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"generalpostrepl", "=", 
           RowBox[{"stringLines", "@", 
            RowBox[{"Select", "[", 
             RowBox[{"postrepl", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "@", "#"}], "=!=", "List"}], "&"}]}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"lorentzpostrepl", "=", 
           RowBox[{"generateExtraGroupPrereplLists", "[", 
            RowBox[{"postrepl", ",", "LorentzFormRule"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"grouppostrepl", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"generateExtraGroupPrereplLists", "[", 
               RowBox[{"postrepl", ",", "#"}], "]"}], "&"}], ",", 
             "groupNames"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"measureEvaluationTime", "[", 
        RowBox[{
        "debuggingMode", ",", 
         "\"\<Time needed for expansion and generation of FORM expressions: \
\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"formexpr", "=", 
           RowBox[{"generateFormExpressions", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"removeSquaredTensors", "[", 
               RowBox[{"expandTerms", "[", "exprlst", "]"}], "]"}], "/.", 
              "dimVarRulesInput"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"lorentzprerepl", "===", "\"\<\>\""}], ",", "\"\<\>\"",
                ",", 
               RowBox[{
               "\"\<*** user-defined prerepl ***\\n\>\"", "<>", 
                "lorentzprerepl", "<>", "\"\<\\n.sort\\n\>\""}]}], "]"}], ",",
              "id3momenta1"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"measureEvaluationTime", "[", 
        RowBox[{
        "debuggingMode", ",", "\"\<Time needed for string generation: \>\"", 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"put", " ", "strings", " ", "together"}], ";", " ", 
           RowBox[{
           "the", " ", "result", " ", "is", " ", "the", " ", "FORM", " ", 
            "program"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"formCode", "=", 
           RowBox[{
            RowBox[{"stringLines", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"\"\<#include- \>\"", "<>", 
                 RowBox[{"FileNameJoin", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "formTracerDirectory", ",", "\"\<Header\>\"", ",", "#"}], 
                   "}"}], "]"}]}], "&"}], ",", 
               RowBox[{"Union", "[", 
                RowBox[{
                 RowBox[{"groupTracingAlgorithms", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"First", "[", "lorentzDimensions", "]"}], "=!=", 
                    "4"}], ",", 
                   RowBox[{"{", "\"\<dirac.h\>\"", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], "]"}], "]"}], 
            "~~", "\"\<\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{"partialtrace", ",", 
              RowBox[{"\"\<#include- \>\"", "<>", 
               RowBox[{"FileNameJoin", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "formTracerDirectory", ",", "\"\<Header\>\"", ",", 
                  "\"\<misc.h\>\""}], "}"}], "]"}]}], ",", "\"\<\>\""}], 
             "]"}], "~~", "\"\<\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"preambleprerepl", "=!=", "\"\<\>\""}], ",", 
              RowBox[{
              "\"\<\n*********************************************************\
***********************\n* user-defined preamble\n\
******************************************************************************\
**\n\>\"", "~~", "preambleprerepl", "~~", "\"\<\n\>\""}], ",", "\"\<\>\""}], 
             "]"}], "~~", 
            "\"\<\n***********************************************************\
*********************\n***************************MAIN \
PROGRAM*****************************************\n\
******************************************************************************\
**\n\n************************************************************************\
********\n* General declarations\n\
******************************************************************************\
**\n\>\"", "~~", 
            RowBox[{"generateDeclareHeader", "[", "allindicesrepl", "]"}], 
            "~~", "\"\<\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"groupTracingAlgorithms", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
                "\"\<color.h\>\""}], "]"}], ",", 
              RowBox[{
              "\"\<*** declaring color package symbol repacements\n\
AutoDeclare Vector \>\"", "~~", "prefixColorPackagegrpvecsym", "~~", 
               "\"\<;\nAutoDeclare CFunction \>\"", "~~", 
               RowBox[{"stringList", "[", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"prefixColorPackageGenericD", "~~", "#"}], "&"}], 
                  ",", 
                  RowBox[{"Join", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "postfixColorPackagesp", "~~", "\"\<(symmetric)\>\""}], 
                    "}"}], ",", "formColorPackageGenericD"}], "]"}]}], "]"}], 
                "]"}], "~~", "\"\<;\>\""}], ",", "\"\<\>\""}], "]"}], "~~", 
            "\"\<\n\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Not", "[", "replacemomenta", "]"}], "&&", 
               RowBox[{
                RowBox[{"Length", "[", "momentaall", "]"}], ">", "0"}]}], ",", 
              RowBox[{
              "\"\<\n*** declare vectors explicitly ***\nVector \>\"", "~~", 
               " ", 
               RowBox[{"stringList", "[", "momentaall", "]"}], "~~", 
               "\"\<;\>\""}], ",", "\"\<\>\""}], "]"}], "~~", 
            "\"\<\nSet setvec:\>\"", "~~", 
            RowBox[{"stringList", "[", 
             RowBox[{"If", "[", 
              RowBox[{"replacemomenta", ",", 
               RowBox[{"momenta", "/.", "momreplrule"}], ",", "momenta"}], 
              "]"}], "]"}], "~~", "\"\<;\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{"finiteTenabled", " ", ",", 
              RowBox[{"\"\<\nSet setvecs:\>\"", "~~", 
               RowBox[{"stringList", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"\"\<vecsx\>\"", ",", 
                    RowBox[{"ToString", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
                 RowBox[{"If", "[", 
                  RowBox[{"replacemomenta", ",", 
                   RowBox[{"momentaall", "/.", "momreplrule"}], ",", 
                   "momentaall"}], "]"}]}], "]"}], "~~", "\"\<;\>\""}], 
              "\[IndentingNewLine]", ",", "\"\<\>\""}], "]"}], "~~", 
            "\"\<\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"combinedTensorNames", "===", 
               RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
              RowBox[{"\"\<CFunction \>\"", "<>", 
               RowBox[{"stringList", "[", "combinedTensorNames", "]"}], "<>", 
               "\"\<;\>\""}]}], "]"}], "~~", 
            "\"\<\nAutoDeclare CFunction \>\"", "~~", 
            RowBox[{"stringList", "[", "formCFunctionAutoDeclareList", "]"}], 
            "~~", "\"\<;\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"format", "===", "\"\<mathematica\>\""}], "||", 
               RowBox[{"extraFormVarsListExportDeclare", "\[Equal]", 
                RowBox[{"{", "}"}]}]}], ",", "\"\<\>\"", ",", 
              RowBox[{"\"\<CFunction \>\"", "<>", 
               RowBox[{"stringList", "[", 
                RowBox[{"Complement", "[", 
                 RowBox[{"extraFormVarsListExportDeclare", ",", 
                  RowBox[{"ToString", "/@", "momentaall"}]}], "]"}], "]"}], 
               "<>", "\"\<;\>\""}]}], "]"}], "~~", 
            "\"\<\nCFunction pow,sqrt,Pi,gamma,FTxsp(symmetric),FTxvec\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
             "finiteTenabled", ",", "\"\<,FTxvecs,FTxsps(symmetric)\>\"", 
              ",", "\"\<\>\""}], "]"}], "~~", "\"\<;\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"First", "[", "lorentzDimensions", "]"}], "=!=", "4"}],
               ",", "\"\<CFunction FTxTr, FTxTr2, FTxTr3, FTxeInt, FTxeExt;\>\
\"", ",", "\"\<\>\""}], "]"}], "~~", 
            "\"\<\n*** turn off runtime statistics ***\nOff statistics;\n\
.sort\n\n*********************************************************************\
***********\n* Decomposed input\n\
******************************************************************************\
**\n\>\"", "~~", 
            RowBox[{"formexpr", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "~~", "\"\<\n.sort\n\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"generalprerepl", "=!=", "\"\<\>\""}], ",", 
              RowBox[{
              "\"\<\n*********************************************************\
***********************\n* Apply general pre replacements\n\
******************************************************************************\
**\n\>\"", "~~", "generalprerepl", "~~", "\"\<\n.sort\n\>\""}], ",", 
              "\"\<\>\""}], "]"}], "~~", "\"\<\n\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"lorentzTensorReplacementRulesInput", "=!=", 
                RowBox[{"{", "}"}]}], "&&", "disentangleLorentzStructures"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                 RowBox[{"if", " ", "disentangleLorentzStructures"}], 
                 "\[Equal]", "False"}], ",", " ", 
                RowBox[{
                "they", " ", "are", " ", "only", " ", "applied", " ", "to", 
                 " ", "the", " ", "Lorentz", " ", "variables", " ", 
                 "later"}]}], "*)"}], ",", 
              RowBox[{
              "\"\<\n*********************************************************\
***********************\n* General Lorentz replacements\n\
******************************************************************************\
**\n\>\"", "~~", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"combinedTensorIdentities", "===", 
                  RowBox[{"{", "}"}]}], ",", "\"\<\>\"", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "in", " ", "this", " ", "case", " ", "they", " ", "are", 
                   " ", "only", " ", "applied", " ", "to", " ", "the", " ", 
                   "Lorentz", " ", "variables"}], " ", "*)"}], ",", 
                 RowBox[{
                 "\"\<\n*** inserts explicit expressions for combined Lorentz \
tensors ***\n\>\"", "~~", 
                  RowBox[{
                  "stringLines", "[", "combinedTensorIdentities", "]"}], " ", 
                  "~~", "\"\<\n.sort\>\""}]}], "]"}], "~~", "\"\<\n\>\"", "~~", 
               RowBox[{"If", "[", 
                RowBox[{"finiteTenabled", ",", 
                 RowBox[{
                 "generateVectorReplacementsFiniteT", "[", "id3momenta1", 
                  "]"}], ",", "\"\<\>\""}], "]"}]}], ",", "\"\<\>\""}], "]"}],
             "~~", "\"\<\n\n\>\"", "~~", 
            RowBox[{"stringLines", "@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"generateGroupContractionCode", "[", 
                RowBox[{"i", ",", 
                 RowBox[{"formexpr", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "groupprerepl", ",", 
                 "grouppostrepl"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "groupNames", "]"}]}], "}"}]}], 
              "]"}]}], "~~", "\"\<\n\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lorentzTensorReplacementRulesInput", "===", 
               RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
              RowBox[{
              "\"\<\n*********************************************************\
***********************\n* Lorentz and Dirac contraction\n\
******************************************************************************\
**\n*** set dimension to Lorenz dim for epsilons ***\nDimension \>\"", "~~", 
               RowBox[{"ToString", "[", 
                RowBox[{"First", "[", "lorentzDimensions", "]"}], "]"}], 
               "~~", "\"\<;\n.sort\n\n\>\"", "~~", 
               RowBox[{"formexpr", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "~~", "\"\<\n\>\"", "~~", 
               RowBox[{"If", "[", 
                RowBox[{"partialtrace", ",", 
                 RowBox[{
                 "\"\<\n******************************************************\
****************************\n*partial trace manipulations\n\
******************************************************************************\
****\n*replace vectors \nrepeat id \
gamma(?lor1,momx1?setvec,?lor2,spix1?,spix2?)=gamma(?lor1,FTxvec(momx1),?lor2,\
spix1,spix2);\nrepeat id \
gamma(?lor1,g5,?lor2,spix1?,spix2?)=gamma(?lor1,5,?lor2,spix1,spix2);\>\"", "~~", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"finiteTenabled", " ", "&&", " ", 
                    RowBox[{
                    RowBox[{"Length", "[", "momenta", "]"}], ">", "0"}]}], 
                    ",", "\"\<\nrepeat id \
gamma(?lor1,momx1?setvecs,?lor2,spix1?,spix2?)=gamma(?lor1,FTxvecs(momx1),?\
lor2,spix1,spix2);\n\>\"", ",", "\"\<\>\""}], "]"}], "~~", 
                  "\"\<\n\n*replace epsilon and pull out vectors \n#call \
replaceepsilon\nmultiply replace_(FTxeps,FTxepsLorentz);\n\nRepeat;\n\t\
id,once FTxepsLorentz(?lorx1,momx1?setvec,?lorx2)=FTxvec(momx1,lorx3)*\
FTxepsLorentz(?lorx1,lorx3,?lorx2);\>\"", "~~", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"finiteTenabled", "&&", 
                    RowBox[{
                    RowBox[{"Length", "[", "momenta", "]"}], ">", "0"}]}], 
                    ",", "\"\<\n\tid,once \
FTxepsLorentz(?lorx1,momx1?setvecs,?lorx2)=FTxvecs(momx1,lorx4)*FTxepsLorentz(\
?lorx1,lorx4,?lorx2);\n\tsum lorx4;\>\"", ",", "\"\<\>\""}], "]"}], "~~", 
                  "\"\< \n\tsum lorx3;\nEndRepeat;\>\""}], ",", "\"\<\>\""}], 
                "]"}], "~~", 
               "\"\<\n********************************************************\
************************\n* Rewriting scalar products and momentum labels\n\
******************************************************************************\
**\n*** rewrite scalar products and vectors with numeric indices ***\n\>\"", "~~", 
               RowBox[{"formBlockArgument", "[", 
                RowBox[{"If", "[", 
                 RowBox[{
                 "finiteTenabled", ",", 
                  "\"\<\nid mom1?!setvecs.mom2?!setvecs=FTxsp(mom1,mom2);\nid \
mom1?!setvecs.mom2?!setvecs^-1=FTxsp(mom1,mom2)^-1;\nid \
mom1?setvecs.mom2?=FTxsps(mom1,mom2);\nid \
mom1?setvecs.mom2?^-1=FTxsps(mom1,mom2)^-1;\nid mom1?setvecs(0)=0;\nid \
mom1?!setvecs(lor1?fixed_)=FTxvec(mom1,lor1);\nid \
mom1?setvecs(lor1?fixed_)=FTxvecs(mom1,lor1);\n\>\"", ",", 
                  "\"\<\nid mom1?.mom2?=FTxsp(mom1,mom2);\nid \
mom1?.mom2?^-1=FTxsp(mom1,mom2)^-1;\nid mom1?(lor1?fixed_)=FTxvec(mom1,lor1);\
\n\>\""}], "]"}], "]"}], "~~", "\"\<\n\>\"", "~~", 
               RowBox[{"If", "[", 
                RowBox[{
                "finiteTenabled", ",", "id3momenta1inv", ",", "\"\<\>\""}], 
                "]"}], "~~", "\"\<\n.sort\n\n\>\"", "~~", 
               RowBox[{"If", "[", 
                RowBox[{"partialtrace", ",", 
                 RowBox[{
                 "\"\<\n******************************************************\
**************************\n* Identifications performed after the \
Lorentz/Dirac trace\n\
******************************************************************************\
**\n*** replace tensors *** \>\"", "~~", 
                  RowBox[{"formBlockArgument", "[", 
                   RowBox[{
                   "\"\<\nid \
d_(lor1?lorIndices,lor2?)=FTxdeltaLorentz(lor1,lor2);\nid \
d_(spi1?spiIndices,spi2?)=FTxdeltaDirac(spi1,spi2);\nid \
gamma(g5,spi1?,spi2?)=FTxgamma5(spi1,spi2);\nid \
gamma(lor1?!setg5,spi1?,spi2?)=FTxgamma(lor1,spi1,spi2);\nMultiply \
replace_(gamma,FTxgamma);\n\>\"", ",", "1"}], "]"}], "~~", 
                  "\"\<\n*** replace momenta ***\n\>\"", "~~", 
                  RowBox[{"formBlockArgument", "[", 
                   RowBox[{
                   "\"\<id mom1?(lor1?)=FTxvec(mom1,lor1);\>\"", ",", "1"}], 
                   "]"}], "~~", "\"\<\n.sort\>\""}], ",", "\"\<\>\""}], "]"}],
                "~~", "\"\<\n\>\"", "~~", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"lorentzpostrepl", "=!=", "\"\<\>\""}], ",", 
                 RowBox[{"\"\<\n\>\"", "~~", 
                  RowBox[{"undoCombinedMomentaCode", "[", "idmomenta1", "]"}],
                   "~~", "\"\<\n*** user-defined postrepl ***\n\>\"", "~~", 
                  "lorentzpostrepl", "~~", "\"\<\n.sort\>\""}], ",", 
                 "\"\<\>\""}], "]"}], "~~", "\"\<\n\>\""}]}], "]"}], "~~", 
            "\"\<\n***********************************************************\
*********************\n* Putting terms together\n\
******************************************************************************\
**\nDrop;\n\>\"", "~~", 
            RowBox[{"formexpr", "[", 
             RowBox[{"[", "4", "]"}], "]"}], "~~", "\"\<\n.sort\n\n\>\"", "~~", 
            RowBox[{"undoCombinedMomentaCode", "[", "idmomenta1", "]"}], 
            "~~", "\"\<\n\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"format", "=!=", "\"\<mathematica\>\""}], "&&", 
               RowBox[{
               "extraFormVarsListOutputConversionExport", "=!=", 
                "\"\<\>\""}]}], ",", 
              RowBox[{
              "\"\<\n*** reinsert variables that had to be protected since \
they are internally used by the color package ***\n\>\"", "<>", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "[", "groupNames", "]"}], "===", "0"}], 
                 RowBox[{"(*", 
                  RowBox[{
                  "in", " ", "this", " ", "case", " ", "the", " ", 
                   "problematic", " ", "vars", " ", "are", " ", "not", " ", 
                   "declared"}], "*)"}], ",", 
                 RowBox[{"\"\<Symbol \>\"", "<>", 
                  RowBox[{"stringList", "[", "forbiddenFormVars", "]"}], 
                  "<>", "\"\<;\>\""}], ",", "\"\<\>\""}], "]"}], "<>", 
               "\"\<\n\>\"", "<>", 
               RowBox[{
               "formBlockArgument", "[", 
                "extraFormVarsListOutputConversionExport", "]"}], "<>", 
               "\"\<\n.sort\>\""}], ",", "\"\<\>\""}], "]"}], "~~", 
            "\"\<\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"dimReplVarsSynonyms", "===", 
               RowBox[{"{", "}"}]}], ",", "\"\<\>\"", ",", 
              RowBox[{
              "\"\<\n*** re-insert replaced dimension variables ***\nMultiply \
replace_(\>\"", "<>", 
               RowBox[{"stringList", "@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"Reverse", "/@", "dimReplVarsSynonyms"}], "]"}]}], 
               "<>", "\"\<);\n.sort\>\""}]}], "]"}], "~~", "\"\<\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"generalpostrepl", "=!=", "\"\<\>\""}], ",", 
              RowBox[{
              "\"\<\n*********************************************************\
***********************\n* Apply general post replacements\n\
******************************************************************************\
**\n\>\"", "~~", "generalpostrepl", "~~", "\"\<\n.sort\n\>\""}], ",", 
              "\"\<\>\""}], "]"}], "~~", "\"\<\n\>\"", "~~", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "bracket", "]"}], ">", "0"}], ",", 
              RowBox[{
              "\"\<\n*********************************************************\
***********************\n* Perform bracketing\n\
******************************************************************************\
**\n\>\"", "~~", 
               RowBox[{"generateBracketingString", "[", "bracket", "]"}], 
               "~~", "\"\<\n\>\""}], ",", "\"\<\>\""}], "]"}], "~~", 
            "\"\<\n***********************************************************\
*********************\n* Output/export\n\
******************************************************************************\
**\n\>\"", "~~", 
            RowBox[{"generateExportCode", "[", 
             RowBox[{
             "format", ",", "bracket", ",", "optimization", ",", 
              "resFileName", ",", "exportResVar", ",", "exportTmpVar", ",", 
              "exportVarType"}], "]"}], "~~", "\"\<\n.end\>\""}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"write", " ", "form", " ", "program"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"file", "=", 
           RowBox[{"OpenWrite", "[", "formFileName", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"WriteString", "[", 
           RowBox[{"file", ",", "formCode"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Close", "[", "file", "]"}], ";"}]}], "\[IndentingNewLine]",
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "mathematicavariablelistsreturn", "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GenerateFormFile", "[", 
    RowBox[{
    "expr_", ",", "formFileName_String", ",", "resFileName_String", ",", 
     RowBox[{"optimization_String", ":", "\"\<\>\""}], ",", 
     RowBox[{"format_String", ":", "\"\<mathematica\>\""}], ",", 
     RowBox[{"prerepl_List", ":", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"postrepl_List", ":", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"bracket_List", ":", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"exportResVar_String", ":", "\"\<expr\>\""}], ",", 
     RowBox[{"exportTmpVar_String", ":", "\"\<w\>\""}], ",", 
     RowBox[{"exportVarType_String", ":", "\"\<double\>\""}]}], "]"}], ":=", 
   RowBox[{"generateFormFile", "[", 
    RowBox[{
     RowBox[{"convertInput", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"format", "===", "\"\<mathematica\>\""}]}], "]"}], ",", 
     "formFileName", ",", "resFileName", ",", "optimization", ",", "format", 
     ",", "prerepl", ",", "postrepl", ",", "bracket", ",", "exportResVar", 
     ",", "exportTmpVar", ",", "exportVarType"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"ed4393f0-7280-4b83-829a-ef10b730bc08"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Import FORM Result", \
"Subsection",ExpressionUUID->"841b0950-6ce4-4d19-8798-776ca136077d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"importFormResult", "[", 
    RowBox[{"filename_String", ",", "deleteImportedFile_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"FileExistsQ", "[", "filename", "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"ImportFormResult", "::", "noformoutput"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"result", "=", 
       RowBox[{"ToExpression", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"ReadString", "[", "filename", "]"}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<\\n\>\"", "\[Rule]", "\"\< \>\""}], ",", 
              RowBox[{"\"\<sqrt\>\"", "\[Rule]", "\"\<Sqrt\>\""}], ",", 
              RowBox[{"\"\<i_\>\"", "\[Rule]", " ", "\"\<I\>\""}], ",", 
              RowBox[{"\"\<pow[\>\"", "\[Rule]", "\"\<Power[\>\""}]}], "}"}], 
            ",", 
            RowBox[{"If", "[", 
             RowBox[{"partialtrace", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Shortest", "[", 
                 RowBox[{"\"\<N\>\"", "~~", 
                  RowBox[{"x", ":", 
                   RowBox[{"DigitCharacter", ".."}]}], "~~", "\"\<_?\>\""}], 
                 "]"}], "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"ToString", "[", "tempPartialTraceDummy", "]"}], 
                 "~~", "\"\<[\>\"", "~~", "x", "~~", "\"\<]\>\""}]}], "}"}], 
              ",", 
              RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"deleteImportedFile", ",", 
        RowBox[{"DeleteFile", "[", "filename", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"result", "===", 
         RowBox[{"Global`FTxsp", "[", 
          RowBox[{"Global`mom1", ",", " ", "Global`mom2"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"FormTrace", "::", "formfailed"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "result", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportFormResult", "[", 
    RowBox[{"filename_String", ",", 
     RowBox[{"deleteImportedFile_", ":", "False"}]}], "]"}], ":=", 
   RowBox[{"convertPartiallyTracedOutput", "[", 
    RowBox[{"importFormResult", "[", 
     RowBox[{"filename", ",", "deleteImportedFile"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"5a690256-7c5d-42cf-a4a6-e5ff74312d98"]
}, Closed]],

Cell[CellGroupData[{

Cell["Main module", \
"Subsection",ExpressionUUID->"d0959ca1-6e62-4e0c-9413-4220ad5b7bf1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FormTrace", "[", "___", "]"}], ":=", 
   RowBox[{"Message", "[", 
    RowBox[{"FormTrace", "::", "badarg"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FormTrace", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"prerepl_List", ":", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"postrepl_List", ":", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"filename_", ":", "\"\<\>\""}], ",", 
     RowBox[{"bracket_List", ":", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"exportResVar_String", ":", "\"\<expr\>\""}], ",", 
     RowBox[{"exportTmpVar_String", ":", "\"\<w\>\""}], ",", 
     RowBox[{"exportVarType_String", ":", "\"\<double\>\""}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "timeString", ",", "formFile", ",", "resFile", ",", "format", ",", 
       "optimization", ",", "formProcessResult", ",", "formConsoleOutput", 
       ",", "formErrors", ",", "retValVariableLists", ",", "importedRes"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"expr", "===", "Null"}], "||", 
         RowBox[{
          RowBox[{"checkFormExecutable", "[", "]"}], "\[Equal]", "False"}]}], 
        ",", 
        RowBox[{
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"timeString", "=", 
       RowBox[{"StringJoin", "@", 
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"StringLength", "[", 
                   RowBox[{"ToString", "[", "#", "]"}], "]"}], "\[Equal]", 
                  "1"}], ",", 
                 RowBox[{"\"\<0\>\"", "~~", 
                  RowBox[{"ToString", "[", "#", "]"}]}], ",", 
                 RowBox[{"ToString", "[", "#", "]"}]}], "]"}], "&"}], ",", 
              RowBox[{"Date", "[", "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"ToString", "[", 
              RowBox[{"Unique", "[", "\"\<f\>\"", "]"}], "]"}], "}"}]}], 
           "]"}], ",", "\"\<-\>\""}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"debuggingMode", "&&", 
         RowBox[{"Not", "[", 
          RowBox[{"DirectoryQ", "[", "cacheFilesDirectory", "]"}], "]"}]}], 
        ",", 
        RowBox[{"CreateDirectory", "[", "cacheFilesDirectory", "]"}]}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"formFile", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
           "debuggingMode", ",", "cacheFilesDirectory", ",", 
            "$TemporaryDirectory"}], "]"}], ",", 
          RowBox[{
          "\"\<runform_\>\"", "<>", "timeString", "<>", "\"\<.frm\>\""}]}], 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"filename", "===", "\"\<\>\""}], 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"means", " ", "default", " ", "case"}], ",", " ", 
          RowBox[{
          "result", " ", "is", " ", "imported", " ", "back", " ", "into", " ",
            "Mathematica"}]}], " ", "*)"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"resFile", "=", 
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
              "debuggingMode", ",", "cacheFilesDirectory", ",", 
               "$TemporaryDirectory"}], "]"}], ",", 
             RowBox[{
             "\"\<res_\>\"", "<>", "timeString", "<>", "\"\<.txt\>\""}]}], 
            "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"optimization", "=", "\"\<\>\""}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"format", "=", "\"\<mathematica\>\""}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "filename", "]"}], "===", "String"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "default", " ", "with", " ", "filename", " ", "provided", " ", 
             "is", " ", "O2", " ", "optimized", " ", "c", " ", "code"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"resFile", "=", "filename"}], ";", "\[IndentingNewLine]", 
            
            RowBox[{"optimization", "=", "\"\<O2\>\""}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"format", "=", "\"\<C\>\""}], ";"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"filename", " ", "is", " ", "list", " ", 
             RowBox[{"{", 
              RowBox[{
              "filename", ",", " ", "optimization", ",", " ", "format"}], 
              "}"}]}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Head", "[", "filename", "]"}], "=!=", "List"}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{"FormTrace", "::", "badarg"}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"resFile", "=", 
             RowBox[{"First", "[", "filename", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"optimization", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "filename", "]"}], ">", "1"}], ",", 
               RowBox[{"filename", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", "\"\<O2\>\""}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"format", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "filename", "]"}], ">", "2"}], ",", 
               RowBox[{"filename", "[", 
                RowBox[{"[", "3", "]"}], "]"}], ",", "\"\<C\>\""}], "]"}]}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"retValVariableLists", "=", 
       RowBox[{"generateFormFile", "[", 
        RowBox[{
         RowBox[{"convertInput", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"format", "===", "\"\<mathematica\>\""}]}], "]"}], ",", 
         "formFile", ",", "resFile", ",", "optimization", ",", "format", ",", 
         "prerepl", ",", "postrepl", ",", "bracket", ",", "exportResVar", ",",
          "exportTmpVar", ",", "exportVarType"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"measureEvaluationTime", "[", 
       RowBox[{
       "debuggingMode", ",", "\"\<Time needed by Form: \>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"formProcessResult", "=", 
          RowBox[{"RunProcess", "[", 
           RowBox[{"{", 
            RowBox[{"formExecutable", ",", "\"\<-q\>\"", ",", "formFile"}], 
            "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"check", " ", "exit", " ", "code"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"formProcessResult", "[", "\"\<ExitCode\>\"", "]"}], "=!=",
             "0"}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"FormTrace", "::", "formeexitcode"}], ",", 
             RowBox[{"formProcessResult", "[", "\"\<ExitCode\>\"", "]"}]}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "output", " ", "string", " ", "for", " ", "error", 
           " ", "messages"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"formConsoleOutput", "=", 
          RowBox[{"formProcessResult", "[", "\"\<StandardOutput\>\"", "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"StringFreeQ", "[", 
             RowBox[{"formConsoleOutput", ",", "formFile"}], "]"}], "]"}], 
           RowBox[{"(*", 
            RowBox[{
            "FORM", " ", "starts", " ", "error", " ", "messages", " ", "with",
              " ", "full", " ", "file", " ", "name"}], "*)"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"formErrors", "=", 
             RowBox[{"Flatten", "@", 
              RowBox[{"StringCases", "[", 
               RowBox[{"formConsoleOutput", ",", 
                RowBox[{
                 RowBox[{"Shortest", "[", 
                  RowBox[{
                  "formFile", "~~", "msg1__", "~~", "\"\<\\n\>\"", "~~", 
                   "msg2__", "~~", "\"\<\\n\>\""}], "]"}], "\[RuleDelayed]", 
                 RowBox[{"StringSplit", "[", 
                  RowBox[{
                   RowBox[{"msg1", "<>", "\"\<\\n\>\"", "<>", "msg2"}], ",", 
                   "formFile"}], "]"}]}]}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"FormTrace", "::", "formerror"}], ",", "#"}], "]"}], 
               "&"}], ",", "formErrors"}], "]"}], ";", "\[IndentingNewLine]", 
            
            RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "debuggingMode"}], ",", 
        RowBox[{"DeleteFile", "[", "formFile", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"filename", "===", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{"measureEvaluationTime", "[", 
         RowBox[{
         "debuggingMode", ",", "\"\<Time needed to import the result: \>\"", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"importedRes", "=", 
            RowBox[{"importFormResult", "[", 
             RowBox[{"resFile", ",", 
              RowBox[{"!", "debuggingMode"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"If", "[", 
             RowBox[{"partialtrace", ",", 
              RowBox[{"convertPartiallyTracedOutput", "[", 
               RowBox[{
                RowBox[{"importedRes", "/.", 
                 RowBox[{
                  RowBox[{"Global`FTxgamma", "[", 
                   RowBox[{
                   "a_", ",", "b___", ",", "c_", ",", "d_", ",", "e_"}], 
                   "]"}], "\[Rule]", 
                  RowBox[{"Global`FTxgamma", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "d", ",", 
                    "e"}], "]"}]}]}], ",", "retValVariableLists"}], "]"}], 
              ",", 
              RowBox[{"convertTracedOutput", "[", 
               RowBox[{"importedRes", ",", "retValVariableLists"}], "]"}]}], 
             "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"46dd946a-259b-4af5-90f5-22fcf77213d3"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Backwards Compatibility", \
"Section",ExpressionUUID->"fab083b6-8421-45cc-95d3-5e38f3bc93f9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"Context", "[", "URLDownload", "]"}], "]"}], "=!=", 
     "\"\<System`\>\""}], ",", 
    RowBox[{"URLDownload", "=", "URLSave"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"Context", "[", "ReadString", "]"}], "]"}], "=!=", 
     "\"\<System`\>\""}], ",", 
    RowBox[{
     RowBox[{"ReadString", "[", "fn_String", "]"}], " ", ":=", 
     RowBox[{"Import", "[", 
      RowBox[{"fn", ",", "\"\<Text\>\""}], "]"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"Context", "[", "FirstPosition", "]"}], "]"}], "=!=", 
     "\"\<System`\>\""}], ",", 
    RowBox[{
     RowBox[{"FirstPosition", "[", 
      RowBox[{"list_", ",", "item_"}], "]"}], ":=", 
     RowBox[{"First", "[", 
      RowBox[{"Position", "[", 
       RowBox[{"list", ",", "item"}], "]"}], "]"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"Context", "[", "FirstCase", "]"}], "]"}], "=!=", 
     "\"\<System`\>\""}], ",", 
    RowBox[{
     RowBox[{"FirstCase", "[", 
      RowBox[{"list_", ",", "patt_"}], "]"}], ":=", 
     RowBox[{"First", "[", 
      RowBox[{"Cases", "[", 
       RowBox[{"list", ",", "patt"}], "]"}], "]"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"Context", "[", "DuplicateFreeQ", "]"}], "]"}], "=!=", 
     "\"\<System`\>\""}], ",", 
    RowBox[{
     RowBox[{"DuplicateFreeQ", "[", "lst_List", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Count", "[", 
              RowBox[{"lst", ",", "#"}], "]"}], "&"}], ",", "lst"}], "]"}], 
          "]"}], "]"}], ">", "1"}], ",", "False", ",", "True"}], "]"}]}]}], 
   "]"}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"a33ddbfb-14f1-4828-9c77-1461dab56ee9"]
}, Closed]],

Cell[CellGroupData[{

Cell["End", "Section",ExpressionUUID->"e0e83118-d095-4c0b-903f-e023b37c0c9e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Protect", "@@", 
   RowBox[{"Names", "[", "\"\<FormTracer`*\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"2b97cb8d-b09e-4161-9099-ae640e7d6edc"]
}, Closed]]
}, Open  ]]
},
NotebookAutoSave->False,
ClosingAutoSave->False,
ClosingSaveDialog->True,
CloseOnClickOutside->False,
IncludeFileExtension->True,
FileChangeProtection->Automatic,
TransitionEffect->Automatic,
TransitionDirection->Horizontal,
TransitionDuration->Short,
RasterExploreViewRange->17,
MarkerLineThickness->1.,
MarkerAspectRatio->0.,
AutoGeneratedPackage->Automatic,
Editable->True,
Saveable->True,
StyleEnvironment->Automatic,
ScreenStyleEnvironment->"Working",
PrintingStyleEnvironment->"Working",
ShowPageBreaks->False,
WindowToolbars->{},
RulerUnits->"Centimeters",
BlinkingCellInsertionPoint->True,
CellInsertionPointColor->GrayLevel[0.7500114442664225],
CellInsertionPointCell->FEPrivate`FrontEndResource[
 "FEExpressions", "CellInsertionMenu"],
Selectable->True,
Deletable->True,
WindowSize->{1272., 766.5},
WindowMargins->{{Automatic, 4.5}, {0, Automatic}},
BackgroundAppearance->None,
BackgroundAppearanceOptions->"Fill",
PrivateNotebookOptions->{"DockedCellAnimation"->False,
"DockedCellTransition"->False,
"DocumentType"->Automatic,
"DoubleBuffer"->True,
"ExcludeFromShutdown"->False,
"FileContents"->{
 "FileLeader", "StandardFileLeader", "NotebookData", "StandardFileTrailer", 
  "FileTrailer"},
"FileLeader"->"",
"FileOutlineCache"->False,
"FileTrailer"->"",
"FinalWindowPrompt"->False,
"JournalStyle"->"Automatic",
"NoteStyle"->"Automatic",
"PluginToolbarEnabled"->True,
"PluginUpdateNotificationsEnabled"->True,
"SafeFileOpen"->"None",
"SafeFileSave"->"Prescan",
"VersionedStylesheet"->{"Default.nb"[8.] -> False}},
AutoIndent->Automatic,
InputAliases->{"intt" -> RowBox[{"\[Integral]", 
     RowBox[{"\[SelectionPlaceholder]", 
       RowBox[{"\[DifferentialD]", "\[Placeholder]"}]}]}], "dintt" -> 
  RowBox[{
     SubsuperscriptBox[
     "\[Integral]", "\[SelectionPlaceholder]", "\[Placeholder]"], 
     RowBox[{"\[Placeholder]", 
       RowBox[{"\[DifferentialD]", "\[Placeholder]"}]}]}], "sumt" -> RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"\[SelectionPlaceholder]", "=", "\[Placeholder]"}], 
      "\[Placeholder]"], "\[Placeholder]"}], "prodt" -> RowBox[{
     UnderoverscriptBox["\[Product]", 
      RowBox[{"\[SelectionPlaceholder]", "=", "\[Placeholder]"}], 
      "\[Placeholder]"], "\[Placeholder]"}], "dt" -> RowBox[{
     SubscriptBox["\[PartialD]", "\[Placeholder]"], " ", 
     "\[SelectionPlaceholder]"}], "ia" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Inactive"], "cbrt" -> 
  RadicalBox[
   "\[SelectionPlaceholder]", "3", SurdForm -> True, MultilineFunction -> 
    None], "surd" -> 
  RadicalBox[
   "\[SelectionPlaceholder]", "\[Placeholder]", SurdForm -> True, 
    MultilineFunction -> None], "ket" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Ket"], "bra" -> 
  TemplateBox[{"\[SelectionPlaceholder]"}, "Bra"], "braket" -> 
  TemplateBox[{"\[SelectionPlaceholder]", "\[Placeholder]"}, "BraKet"], 
  "delay" -> TemplateBox[{"\[SelectionPlaceholder]"}, "SystemsModelDelay"], 
  "grad" -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], "\[Placeholder]"}], 
  "del." -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], ".", 
     "\[Placeholder]"}], "delx" -> RowBox[{
     SubscriptBox["\[Del]", "\[SelectionPlaceholder]"], "\[Cross]", 
     "\[Placeholder]"}], "del2" -> RowBox[{
     SubsuperscriptBox["\[Del]", "\[SelectionPlaceholder]", 2], 
     "\[Placeholder]"}]},
InputAutoReplacements->{},
ContextMenu->FEPrivate`FrontEndResource["ContextMenus", "Text"],
ComponentwiseContextMenu->{
 "GraphicsBox" -> FEPrivate`FrontEndResource["ContextMenus", "GraphicsBox"], 
  "Graphics3DBox" -> 
  FEPrivate`FrontEndResource["ContextMenus", "Graphics3DBox"], 
  "LocatorPaneBox" -> 
  FEPrivate`FrontEndResource["ContextMenus", "LocatorPaneBox"], "CellGroup" -> 
  FEPrivate`FrontEndResource["ContextMenus", "CellGroup"], "CellBracket" -> 
  FEPrivate`FrontEndResource["ContextMenus", "CellBracket"], "CellRange" -> 
  FEPrivate`FrontEndResource["ContextMenus", "CellRange"], 
  "CellInsertionPoint" -> 
  FEPrivate`FrontEndResource["ContextMenus", "CellInsertionPoint"]},
CellChangeTimes->{},
TrackCellChangeTimes->False,
CellChangeTimeMergeInterval->30.,
DelimiterFlashTime->0.3,
ShowCursorTracker->True,
MousePointerAppearance->Automatic,
ShowAutoStyles->False,
ShowCodeAssist->True,
ShowAutoConvert->False,
ShowMissingStyles->False,
ShowPredictiveInterface->True,
ShowSyntaxStyles->True,
EmphasizeSyntaxErrors->False,
StructuredSelection->False,
StyleBoxAutoDelete->False,
ShowSpecialCharacters->True,
AllowInlineCells->True,
PasteBoxFormInlineCells->Automatic,
Background->None,
FrontEndVersion->"12.1 for Linux x86 (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
GhostCellInEmptyNotebook -> False,
ExpressionUUID->"98e83e05-6c18-4839-b3f4-fbbf66a03e05"
]

